AORB_1:14:double_distance(double,double):p1[i] - p2[i] => p1[i] * p2[i]
AORB_2:14:double_distance(double,double):p1[i] - p2[i] => p1[i] / p2[i]
AORB_3:14:double_distance(double,double):p1[i] - p2[i] => p1[i] % p2[i]
AORB_4:14:double_distance(double,double):p1[i] - p2[i] => p1[i] + p2[i]
AORB_5:15:double_distance(double,double):dp * dp => dp / dp
AORB_6:15:double_distance(double,double):dp * dp => dp % dp
AORB_7:15:double_distance(double,double):dp * dp => dp + dp
AORB_8:15:double_distance(double,double):dp * dp => dp - dp
AORB_9:24:double_distance1(double,double):p1[i] - p2[i] => p1[i] * p2[i]
AORB_10:24:double_distance1(double,double):p1[i] - p2[i] => p1[i] / p2[i]
AORB_11:24:double_distance1(double,double):p1[i] - p2[i] => p1[i] % p2[i]
AORB_12:24:double_distance1(double,double):p1[i] - p2[i] => p1[i] + p2[i]
AORB_13:33:double_distanceInf(double,double):p1[i] - p2[i] => p1[i] * p2[i]
AORB_14:33:double_distanceInf(double,double):p1[i] - p2[i] => p1[i] / p2[i]
AORB_15:33:double_distanceInf(double,double):p1[i] - p2[i] => p1[i] % p2[i]
AORB_16:33:double_distanceInf(double,double):p1[i] - p2[i] => p1[i] + p2[i]
AORB_17:96:double_safeNorm(double):rgiant / floatn => rgiant * floatn
AORB_18:96:double_safeNorm(double):rgiant / floatn => rgiant % floatn
AORB_19:96:double_safeNorm(double):rgiant / floatn => rgiant + floatn
AORB_20:96:double_safeNorm(double):rgiant / floatn => rgiant - floatn
AORB_21:102:double_safeNorm(double):x1max / xabs => x1max * xabs
AORB_22:102:double_safeNorm(double):x1max / xabs => x1max % xabs
AORB_23:102:double_safeNorm(double):x1max / xabs => x1max + xabs
AORB_24:102:double_safeNorm(double):x1max / xabs => x1max - xabs
AORB_25:103:double_safeNorm(double):s1 * r => s1 / r
AORB_26:103:double_safeNorm(double):s1 * r => s1 % r
AORB_27:103:double_safeNorm(double):s1 * r => s1 + r
AORB_28:103:double_safeNorm(double):s1 * r => s1 - r
AORB_29:103:double_safeNorm(double):s1 * r * r => s1 * r / r
AORB_30:103:double_safeNorm(double):s1 * r * r => s1 * r % r
AORB_31:103:double_safeNorm(double):s1 * r * r => s1 * r + r
AORB_32:103:double_safeNorm(double):s1 * r * r => s1 * r - r
AORB_33:103:double_safeNorm(double):1 + s1 * r * r => 1 * (s1 * r * r)
AORB_34:103:double_safeNorm(double):1 + s1 * r * r => 1 / (s1 * r * r)
AORB_35:103:double_safeNorm(double):1 + s1 * r * r => 1 % (s1 * r * r)
AORB_36:103:double_safeNorm(double):1 + s1 * r * r => 1 - s1 * r * r
AORB_37:106:double_safeNorm(double):xabs / x1max => xabs * x1max
AORB_38:106:double_safeNorm(double):xabs / x1max => xabs % x1max
AORB_39:106:double_safeNorm(double):xabs / x1max => xabs + x1max
AORB_40:106:double_safeNorm(double):xabs / x1max => xabs - x1max
AORB_41:107:double_safeNorm(double):r * r => r / r
AORB_42:107:double_safeNorm(double):r * r => r % r
AORB_43:107:double_safeNorm(double):r * r => r + r
AORB_44:107:double_safeNorm(double):r * r => r - r
AORB_45:111:double_safeNorm(double):x3max / xabs => x3max * xabs
AORB_46:111:double_safeNorm(double):x3max / xabs => x3max % xabs
AORB_47:111:double_safeNorm(double):x3max / xabs => x3max + xabs
AORB_48:111:double_safeNorm(double):x3max / xabs => x3max - xabs
AORB_49:112:double_safeNorm(double):s3 * r => s3 / r
AORB_50:112:double_safeNorm(double):s3 * r => s3 % r
AORB_51:112:double_safeNorm(double):s3 * r => s3 + r
AORB_52:112:double_safeNorm(double):s3 * r => s3 - r
AORB_53:112:double_safeNorm(double):s3 * r * r => s3 * r / r
AORB_54:112:double_safeNorm(double):s3 * r * r => s3 * r % r
AORB_55:112:double_safeNorm(double):s3 * r * r => s3 * r + r
AORB_56:112:double_safeNorm(double):s3 * r * r => s3 * r - r
AORB_57:112:double_safeNorm(double):1 + s3 * r * r => 1 * (s3 * r * r)
AORB_58:112:double_safeNorm(double):1 + s3 * r * r => 1 / (s3 * r * r)
AORB_59:112:double_safeNorm(double):1 + s3 * r * r => 1 % (s3 * r * r)
AORB_60:112:double_safeNorm(double):1 + s3 * r * r => 1 - s3 * r * r
AORB_61:116:double_safeNorm(double):xabs / x3max => xabs * x3max
AORB_62:116:double_safeNorm(double):xabs / x3max => xabs % x3max
AORB_63:116:double_safeNorm(double):xabs / x3max => xabs + x3max
AORB_64:116:double_safeNorm(double):xabs / x3max => xabs - x3max
AORB_65:117:double_safeNorm(double):r * r => r / r
AORB_66:117:double_safeNorm(double):r * r => r % r
AORB_67:117:double_safeNorm(double):r * r => r + r
AORB_68:117:double_safeNorm(double):r * r => r - r
AORB_69:122:double_safeNorm(double):xabs * xabs => xabs / xabs
AORB_70:122:double_safeNorm(double):xabs * xabs => xabs % xabs
AORB_71:122:double_safeNorm(double):xabs * xabs => xabs + xabs
AORB_72:122:double_safeNorm(double):xabs * xabs => xabs - xabs
AORB_73:127:double_safeNorm(double):s2 / x1max => s2 * x1max
AORB_74:127:double_safeNorm(double):s2 / x1max => s2 % x1max
AORB_75:127:double_safeNorm(double):s2 / x1max => s2 + x1max
AORB_76:127:double_safeNorm(double):s2 / x1max => s2 - x1max
AORB_77:127:double_safeNorm(double):s2 / x1max / x1max => s2 / x1max * x1max
AORB_78:127:double_safeNorm(double):s2 / x1max / x1max => s2 / x1max % x1max
AORB_79:127:double_safeNorm(double):s2 / x1max / x1max => s2 / x1max + x1max
AORB_80:127:double_safeNorm(double):s2 / x1max / x1max => s2 / x1max - x1max
AORB_81:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s1 * (s2 / x1max / x1max)
AORB_82:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s1 / (s2 / x1max / x1max)
AORB_83:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s1 % (s2 / x1max / x1max)
AORB_84:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s1 - s2 / x1max / x1max
AORB_85:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => x1max / Math.sqrt( s1 + s2 / x1max / x1max )
AORB_86:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => x1max % Math.sqrt( s1 + s2 / x1max / x1max )
AORB_87:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => x1max + Math.sqrt( s1 + s2 / x1max / x1max )
AORB_88:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => x1max - Math.sqrt( s1 + s2 / x1max / x1max )
AORB_89:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => x3max / Math.sqrt( s3 )
AORB_90:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => x3max % Math.sqrt( s3 )
AORB_91:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => x3max + Math.sqrt( s3 )
AORB_92:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => x3max - Math.sqrt( s3 )
AORB_93:133:double_safeNorm(double):x3max / s2 => x3max * s2
AORB_94:133:double_safeNorm(double):x3max / s2 => x3max % s2
AORB_95:133:double_safeNorm(double):x3max / s2 => x3max + s2
AORB_96:133:double_safeNorm(double):x3max / s2 => x3max - s2
AORB_97:133:double_safeNorm(double):x3max * s3 => x3max / s3
AORB_98:133:double_safeNorm(double):x3max * s3 => x3max % s3
AORB_99:133:double_safeNorm(double):x3max * s3 => x3max + s3
AORB_100:133:double_safeNorm(double):x3max * s3 => x3max - s3
AORB_101:133:double_safeNorm(double):x3max / s2 * (x3max * s3) => x3max / s2 / (x3max * s3)
AORB_102:133:double_safeNorm(double):x3max / s2 * (x3max * s3) => x3max / s2 % (x3max * s3)
AORB_103:133:double_safeNorm(double):x3max / s2 * (x3max * s3) => x3max / s2 + x3max * s3
AORB_104:133:double_safeNorm(double):x3max / s2 * (x3max * s3) => x3max / s2 - x3max * s3
AORB_105:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => 1 * (x3max / s2 * (x3max * s3))
AORB_106:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => 1 / (x3max / s2 * (x3max * s3))
AORB_107:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => 1 % (x3max / s2 * (x3max * s3))
AORB_108:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => 1 - x3max / s2 * (x3max * s3)
AORB_109:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => s2 / (1 + x3max / s2 * (x3max * s3))
AORB_110:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => s2 % (1 + x3max / s2 * (x3max * s3))
AORB_111:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => s2 + (1 + x3max / s2 * (x3max * s3))
AORB_112:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => s2 - (1 + x3max / s2 * (x3max * s3))
AORB_113:135:double_safeNorm(double):s2 / x3max => s2 * x3max
AORB_114:135:double_safeNorm(double):s2 / x3max => s2 % x3max
AORB_115:135:double_safeNorm(double):s2 / x3max => s2 + x3max
AORB_116:135:double_safeNorm(double):s2 / x3max => s2 - x3max
AORB_117:135:double_safeNorm(double):x3max * s3 => x3max / s3
AORB_118:135:double_safeNorm(double):x3max * s3 => x3max % s3
AORB_119:135:double_safeNorm(double):x3max * s3 => x3max + s3
AORB_120:135:double_safeNorm(double):x3max * s3 => x3max - s3
AORB_121:135:double_safeNorm(double):s2 / x3max + x3max * s3 => s2 / x3max * (x3max * s3)
AORB_122:135:double_safeNorm(double):s2 / x3max + x3max * s3 => s2 / x3max / (x3max * s3)
AORB_123:135:double_safeNorm(double):s2 / x3max + x3max * s3 => s2 / x3max % (x3max * s3)
AORB_124:135:double_safeNorm(double):s2 / x3max + x3max * s3 => s2 / x3max - x3max * s3
AORB_125:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => x3max / (s2 / x3max + x3max * s3)
AORB_126:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => x3max % (s2 / x3max + x3max * s3)
AORB_127:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => x3max + (s2 / x3max + x3max * s3)
AORB_128:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => x3max - (s2 / x3max + x3max * s3)
AORB_129:146:double_scale(double,double):arr[i] * val => arr[i] / val
AORB_130:146:double_scale(double,double):arr[i] * val => arr[i] % val
AORB_131:146:double_scale(double,double):arr[i] * val => arr[i] + val
AORB_132:146:double_scale(double,double):arr[i] * val => arr[i] - val
AORB_133:160:double_entropy(double):(double) k[i] / sum_k => (double) k[i] * sum_k
AORB_134:160:double_entropy(double):(double) k[i] / sum_k => (double) k[i] % sum_k
AORB_135:160:double_entropy(double):(double) k[i] / sum_k => (double) k[i] + sum_k
AORB_136:160:double_entropy(double):(double) k[i] / sum_k => (double) k[i] - sum_k
AORB_137:161:double_entropy(double):p_i * Math.log( p_i ) => p_i / Math.log( p_i )
AORB_138:161:double_entropy(double):p_i * Math.log( p_i ) => p_i % Math.log( p_i )
AORB_139:161:double_entropy(double):p_i * Math.log( p_i ) => p_i + Math.log( p_i )
AORB_140:161:double_entropy(double):p_i * Math.log( p_i ) => p_i - Math.log( p_i )
AORB_141:177:double_g(double,double):sumExpected - sumObserved => sumExpected * sumObserved
AORB_142:177:double_g(double,double):sumExpected - sumObserved => sumExpected / sumObserved
AORB_143:177:double_g(double,double):sumExpected - sumObserved => sumExpected % sumObserved
AORB_144:177:double_g(double,double):sumExpected - sumObserved => sumExpected + sumObserved
AORB_145:178:double_g(double,double):sumObserved / sumExpected => sumObserved * sumExpected
AORB_146:178:double_g(double,double):sumObserved / sumExpected => sumObserved % sumExpected
AORB_147:178:double_g(double,double):sumObserved / sumExpected => sumObserved + sumExpected
AORB_148:178:double_g(double,double):sumObserved / sumExpected => sumObserved - sumExpected
AORB_149:183:double_g(double,double):ratio * expected[i] => ratio / expected[i]
AORB_150:183:double_g(double,double):ratio * expected[i] => ratio % expected[i]
AORB_151:183:double_g(double,double):ratio * expected[i] => ratio + expected[i]
AORB_152:183:double_g(double,double):ratio * expected[i] => ratio - expected[i]
AORB_153:183:double_g(double,double):(double) observed[i] / (ratio * expected[i]) => (double) observed[i] * (ratio * expected[i])
AORB_154:183:double_g(double,double):(double) observed[i] / (ratio * expected[i]) => (double) observed[i] % (ratio * expected[i])
AORB_155:183:double_g(double,double):(double) observed[i] / (ratio * expected[i]) => (double) observed[i] + ratio * expected[i]
AORB_156:183:double_g(double,double):(double) observed[i] / (ratio * expected[i]) => (double) observed[i] - ratio * expected[i]
AORB_157:183:double_g(double,double):(double) observed[i] / expected[i] => (double) observed[i] * expected[i]
AORB_158:183:double_g(double,double):(double) observed[i] / expected[i] => (double) observed[i] % expected[i]
AORB_159:183:double_g(double,double):(double) observed[i] / expected[i] => (double) observed[i] + expected[i]
AORB_160:183:double_g(double,double):(double) observed[i] / expected[i] => (double) observed[i] - expected[i]
AORB_161:184:double_g(double,double):(double) observed[i] * dev => (double) observed[i] / dev
AORB_162:184:double_g(double,double):(double) observed[i] * dev => (double) observed[i] % dev
AORB_163:184:double_g(double,double):(double) observed[i] * dev => (double) observed[i] + dev
AORB_164:184:double_g(double,double):(double) observed[i] * dev => (double) observed[i] - dev
AORB_165:186:double_g(double,double):2d * sum => 2d / sum
AORB_166:186:double_g(double,double):2d * sum => 2d % sum
AORB_167:186:double_g(double,double):2d * sum => 2d + sum
AORB_168:186:double_g(double,double):2d * sum => 2d - sum
AORB_169:208:double_calculateDifferences(double,double):y[i] - x[i] => y[i] * x[i]
AORB_170:208:double_calculateDifferences(double,double):y[i] - x[i] => y[i] / x[i]
AORB_171:208:double_calculateDifferences(double,double):y[i] - x[i] => y[i] % x[i]
AORB_172:208:double_calculateDifferences(double,double):y[i] - x[i] => y[i] + x[i]
AORB_173:220:double_computeDividedDifference(double,double):n - i => n * i
AORB_174:220:double_computeDividedDifference(double,double):n - i => n / i
AORB_175:220:double_computeDividedDifference(double,double):n - i => n % i
AORB_176:220:double_computeDividedDifference(double,double):n - i => n + i
AORB_177:221:double_computeDividedDifference(double,double):j + i => j * i
AORB_178:221:double_computeDividedDifference(double,double):j + i => j / i
AORB_179:221:double_computeDividedDifference(double,double):j + i => j % i
AORB_180:221:double_computeDividedDifference(double,double):j + i => j - i
AORB_181:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j + i] * x[j]
AORB_182:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j + i] / x[j]
AORB_183:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j + i] % x[j]
AORB_184:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j + i] + x[j]
AORB_185:222:double_computeDividedDifference(double,double):j + 1 => j * 1
AORB_186:222:double_computeDividedDifference(double,double):j + 1 => j / 1
AORB_187:222:double_computeDividedDifference(double,double):j + 1 => j % 1
AORB_188:222:double_computeDividedDifference(double,double):j + 1 => j - 1
AORB_189:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j + 1] * divdiff[j]
AORB_190:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j + 1] / divdiff[j]
AORB_191:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j + 1] % divdiff[j]
AORB_192:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j + 1] + divdiff[j]
AORB_193:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => (divdiff[j + 1] - divdiff[j]) * denominator
AORB_194:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => (divdiff[j + 1] - divdiff[j]) % denominator
AORB_195:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => divdiff[j + 1] - divdiff[j] + denominator
AORB_196:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => divdiff[j + 1] - divdiff[j] - denominator
AORB_197:233:double_computeCanberraDistance(double,double):a[i] - b[i] => a[i] * b[i]
AORB_198:233:double_computeCanberraDistance(double,double):a[i] - b[i] => a[i] / b[i]
AORB_199:233:double_computeCanberraDistance(double,double):a[i] - b[i] => a[i] % b[i]
AORB_200:233:double_computeCanberraDistance(double,double):a[i] - b[i] => a[i] + b[i]
AORB_201:234:double_computeCanberraDistance(double,double):Math.abs( a[i] ) + Math.abs( b[i] ) => Math.abs( a[i] ) * Math.abs( b[i] )
AORB_202:234:double_computeCanberraDistance(double,double):Math.abs( a[i] ) + Math.abs( b[i] ) => Math.abs( a[i] ) / Math.abs( b[i] )
AORB_203:234:double_computeCanberraDistance(double,double):Math.abs( a[i] ) + Math.abs( b[i] ) => Math.abs( a[i] ) % Math.abs( b[i] )
AORB_204:234:double_computeCanberraDistance(double,double):Math.abs( a[i] ) + Math.abs( b[i] ) => Math.abs( a[i] ) - Math.abs( b[i] )
AORB_205:235:double_computeCanberraDistance(double,double):num / denom => num * denom
AORB_206:235:double_computeCanberraDistance(double,double):num / denom => num % denom
AORB_207:235:double_computeCanberraDistance(double,double):num / denom => num + denom
AORB_208:235:double_computeCanberraDistance(double,double):num / denom => num - denom
AORB_209:243:double_evaluateHoners(double,double):n - 1 => n * 1
AORB_210:243:double_evaluateHoners(double,double):n - 1 => n / 1
AORB_211:243:double_evaluateHoners(double,double):n - 1 => n % 1
AORB_212:243:double_evaluateHoners(double,double):n - 1 => n + 1
AORB_213:245:double_evaluateHoners(double,double):argument * result => argument / result
AORB_214:245:double_evaluateHoners(double,double):argument * result => argument % result
AORB_215:245:double_evaluateHoners(double,double):argument * result => argument + result
AORB_216:245:double_evaluateHoners(double,double):argument * result => argument - result
AORB_217:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => argument * result * coefficients[j]
AORB_218:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => argument * result / coefficients[j]
AORB_219:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => argument * result % coefficients[j]
AORB_220:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => argument * result - coefficients[j]
AORB_221:260:double_evaluateInternal(double,double,double):z - x[i] => z * x[i]
AORB_222:260:double_evaluateInternal(double,double,double):z - x[i] => z / x[i]
AORB_223:260:double_evaluateInternal(double,double,double):z - x[i] => z % x[i]
AORB_224:260:double_evaluateInternal(double,double,double):z - x[i] => z + x[i]
AORB_225:268:double_evaluateInternal(double,double,double):n - i => n * i
AORB_226:268:double_evaluateInternal(double,double,double):n - i => n / i
AORB_227:268:double_evaluateInternal(double,double,double):n - i => n % i
AORB_228:268:double_evaluateInternal(double,double,double):n - i => n + i
AORB_229:269:double_evaluateInternal(double,double,double):x[j] - z => x[j] * z
AORB_230:269:double_evaluateInternal(double,double,double):x[j] - z => x[j] / z
AORB_231:269:double_evaluateInternal(double,double,double):x[j] - z => x[j] % z
AORB_232:269:double_evaluateInternal(double,double,double):x[j] - z => x[j] + z
AORB_233:270:double_evaluateInternal(double,double,double):i + j => i * j
AORB_234:270:double_evaluateInternal(double,double,double):i + j => i / j
AORB_235:270:double_evaluateInternal(double,double,double):i + j => i % j
AORB_236:270:double_evaluateInternal(double,double,double):i + j => i - j
AORB_237:270:double_evaluateInternal(double,double,double):x[i + j] - z => x[i + j] * z
AORB_238:270:double_evaluateInternal(double,double,double):x[i + j] - z => x[i + j] / z
AORB_239:270:double_evaluateInternal(double,double,double):x[i + j] - z => x[i + j] % z
AORB_240:270:double_evaluateInternal(double,double,double):x[i + j] - z => x[i + j] + z
AORB_241:271:double_evaluateInternal(double,double,double):i + j => i * j
AORB_242:271:double_evaluateInternal(double,double,double):i + j => i / j
AORB_243:271:double_evaluateInternal(double,double,double):i + j => i % j
AORB_244:271:double_evaluateInternal(double,double,double):i + j => i - j
AORB_245:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[j] * x[i + j]
AORB_246:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[j] / x[i + j]
AORB_247:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[j] % x[i + j]
AORB_248:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[j] + x[i + j]
AORB_249:272:double_evaluateInternal(double,double,double):j + 1 => j * 1
AORB_250:272:double_evaluateInternal(double,double,double):j + 1 => j / 1
AORB_251:272:double_evaluateInternal(double,double,double):j + 1 => j % 1
AORB_252:272:double_evaluateInternal(double,double,double):j + 1 => j - 1
AORB_253:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => c[j + 1] * d[j]
AORB_254:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => c[j + 1] / d[j]
AORB_255:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => c[j + 1] % d[j]
AORB_256:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => c[j + 1] + d[j]
AORB_257:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => (c[j + 1] - d[j]) * divider
AORB_258:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => (c[j + 1] - d[j]) % divider
AORB_259:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => c[j + 1] - d[j] + divider
AORB_260:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => c[j + 1] - d[j] - divider
AORB_261:273:double_evaluateInternal(double,double,double):tc * w => tc / w
AORB_262:273:double_evaluateInternal(double,double,double):tc * w => tc % w
AORB_263:273:double_evaluateInternal(double,double,double):tc * w => tc + w
AORB_264:273:double_evaluateInternal(double,double,double):tc * w => tc - w
AORB_265:274:double_evaluateInternal(double,double,double):td * w => td / w
AORB_266:274:double_evaluateInternal(double,double,double):td * w => td % w
AORB_267:274:double_evaluateInternal(double,double,double):td * w => td + w
AORB_268:274:double_evaluateInternal(double,double,double):td * w => td - w
AORB_269:276:double_evaluateInternal(double,double,double):n - i => n * i
AORB_270:276:double_evaluateInternal(double,double,double):n - i => n / i
AORB_271:276:double_evaluateInternal(double,double,double):n - i => n % i
AORB_272:276:double_evaluateInternal(double,double,double):n - i => n + i
AORB_273:276:double_evaluateInternal(double,double,double):n - i + 1 => (n - i) * 1
AORB_274:276:double_evaluateInternal(double,double,double):n - i + 1 => (n - i) / 1
AORB_275:276:double_evaluateInternal(double,double,double):n - i + 1 => (n - i) % 1
AORB_276:276:double_evaluateInternal(double,double,double):n - i + 1 => n - i - 1
AORB_277:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => 0.5 / (n - i + 1)
AORB_278:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => 0.5 % (n - i + 1)
AORB_279:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => 0.5 + (n - i + 1)
AORB_280:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => 0.5 - (n - i + 1)
AORB_281:288:double_evaluateNewton(double,double,double):c.length - 1 => c.length * 1
AORB_282:288:double_evaluateNewton(double,double,double):c.length - 1 => c.length / 1
AORB_283:288:double_evaluateNewton(double,double,double):c.length - 1 => c.length % 1
AORB_284:288:double_evaluateNewton(double,double,double):c.length - 1 => c.length + 1
AORB_285:291:double_evaluateNewton(double,double,double):z - c[i] => z * c[i]
AORB_286:291:double_evaluateNewton(double,double,double):z - c[i] => z / c[i]
AORB_287:291:double_evaluateNewton(double,double,double):z - c[i] => z % c[i]
AORB_288:291:double_evaluateNewton(double,double,double):z - c[i] => z + c[i]
AORB_289:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => (z - c[i]) / value
AORB_290:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => (z - c[i]) % value
AORB_291:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => z - c[i] + value
AORB_292:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => z - c[i] - value
AORB_293:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => a[i] * ((z - c[i]) * value)
AORB_294:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => a[i] / ((z - c[i]) * value)
AORB_295:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => a[i] % ((z - c[i]) * value)
AORB_296:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => a[i] - (z - c[i]) * value
AORB_297:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample1[i] * sample2[i]
AORB_298:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample1[i] / sample2[i]
AORB_299:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample1[i] % sample2[i]
AORB_300:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample1[i] + sample2[i]
AORB_301:302:double_meanDifference(double,double):sumDifference / sample1.length => sumDifference * sample1.length
AORB_302:302:double_meanDifference(double,double):sumDifference / sample1.length => sumDifference % sample1.length
AORB_303:302:double_meanDifference(double,double):sumDifference / sample1.length => sumDifference + sample1.length
AORB_304:302:double_meanDifference(double,double):sumDifference / sample1.length => sumDifference - sample1.length
AORB_305:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] * sample2[i]
AORB_306:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] / sample2[i]
AORB_307:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] % sample2[i]
AORB_308:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] + sample2[i]
AORB_309:315:double_varianceDifference(double,double):sumDifference / n => sumDifference * n
AORB_310:315:double_varianceDifference(double,double):sumDifference / n => sumDifference % n
AORB_311:315:double_varianceDifference(double,double):sumDifference / n => sumDifference + n
AORB_312:315:double_varianceDifference(double,double):sumDifference / n => sumDifference - n
AORB_313:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] * sample2[i]
AORB_314:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] / sample2[i]
AORB_315:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] % sample2[i]
AORB_316:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i] + sample2[i]
AORB_317:318:double_varianceDifference(double,double):diff - meanDifference => diff * meanDifference
AORB_318:318:double_varianceDifference(double,double):diff - meanDifference => diff / meanDifference
AORB_319:318:double_varianceDifference(double,double):diff - meanDifference => diff % meanDifference
AORB_320:318:double_varianceDifference(double,double):diff - meanDifference => diff + meanDifference
AORB_321:318:double_varianceDifference(double,double):diff - meanDifference => diff * meanDifference
AORB_322:318:double_varianceDifference(double,double):diff - meanDifference => diff / meanDifference
AORB_323:318:double_varianceDifference(double,double):diff - meanDifference => diff % meanDifference
AORB_324:318:double_varianceDifference(double,double):diff - meanDifference => diff + meanDifference
AORB_325:318:double_varianceDifference(double,double):(diff - meanDifference) * (diff - meanDifference) => (diff - meanDifference) / (diff - meanDifference)
AORB_326:318:double_varianceDifference(double,double):(diff - meanDifference) * (diff - meanDifference) => (diff - meanDifference) % (diff - meanDifference)
AORB_327:318:double_varianceDifference(double,double):(diff - meanDifference) * (diff - meanDifference) => diff - meanDifference + (diff - meanDifference)
AORB_328:318:double_varianceDifference(double,double):(diff - meanDifference) * (diff - meanDifference) => diff - meanDifference - (diff - meanDifference)
AORB_329:319:double_varianceDifference(double,double):diff - meanDifference => diff * meanDifference
AORB_330:319:double_varianceDifference(double,double):diff - meanDifference => diff / meanDifference
AORB_331:319:double_varianceDifference(double,double):diff - meanDifference => diff % meanDifference
AORB_332:319:double_varianceDifference(double,double):diff - meanDifference => diff + meanDifference
AORB_333:321:double_varianceDifference(double,double):sum2 * sum2 => sum2 / sum2
AORB_334:321:double_varianceDifference(double,double):sum2 * sum2 => sum2 % sum2
AORB_335:321:double_varianceDifference(double,double):sum2 * sum2 => sum2 + sum2
AORB_336:321:double_varianceDifference(double,double):sum2 * sum2 => sum2 - sum2
AORB_337:321:double_varianceDifference(double,double):sum2 * sum2 / n => sum2 * sum2 * n
AORB_338:321:double_varianceDifference(double,double):sum2 * sum2 / n => sum2 * sum2 % n
AORB_339:321:double_varianceDifference(double,double):sum2 * sum2 / n => sum2 * sum2 + n
AORB_340:321:double_varianceDifference(double,double):sum2 * sum2 / n => sum2 * sum2 - n
AORB_341:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum1 * (sum2 * sum2 / n)
AORB_342:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum1 / (sum2 * sum2 / n)
AORB_343:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum1 % (sum2 * sum2 / n)
AORB_344:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum1 + sum2 * sum2 / n
AORB_345:321:double_varianceDifference(double,double):n - 1 => n * 1
AORB_346:321:double_varianceDifference(double,double):n - 1 => n / 1
AORB_347:321:double_varianceDifference(double,double):n - 1 => n % 1
AORB_348:321:double_varianceDifference(double,double):n - 1 => n + 1
AORB_349:321:double_varianceDifference(double,double):(sum1 - sum2 * sum2 / n) / (n - 1) => (sum1 - sum2 * sum2 / n) * (n - 1)
AORB_350:321:double_varianceDifference(double,double):(sum1 - sum2 * sum2 / n) / (n - 1) => (sum1 - sum2 * sum2 / n) % (n - 1)
AORB_351:321:double_varianceDifference(double,double):(sum1 - sum2 * sum2 / n) / (n - 1) => sum1 - sum2 * sum2 / n + (n - 1)
AORB_352:321:double_varianceDifference(double,double):(sum1 - sum2 * sum2 / n) / (n - 1) => sum1 - sum2 * sum2 / n - (n - 1)
AORB_353:333:boolean_equals(double,double):y[i] - x[i] => y[i] * x[i]
AORB_354:333:boolean_equals(double,double):y[i] - x[i] => y[i] / x[i]
AORB_355:333:boolean_equals(double,double):y[i] - x[i] => y[i] % x[i]
AORB_356:333:boolean_equals(double,double):y[i] - x[i] => y[i] + x[i]
AORB_357:370:double_chiSquare(double,double):sumExpected - sumObserved => sumExpected * sumObserved
AORB_358:370:double_chiSquare(double,double):sumExpected - sumObserved => sumExpected / sumObserved
AORB_359:370:double_chiSquare(double,double):sumExpected - sumObserved => sumExpected % sumObserved
AORB_360:370:double_chiSquare(double,double):sumExpected - sumObserved => sumExpected + sumObserved
AORB_361:371:double_chiSquare(double,double):sumObserved / sumExpected => sumObserved * sumExpected
AORB_362:371:double_chiSquare(double,double):sumObserved / sumExpected => sumObserved % sumExpected
AORB_363:371:double_chiSquare(double,double):sumObserved / sumExpected => sumObserved + sumExpected
AORB_364:371:double_chiSquare(double,double):sumObserved / sumExpected => sumObserved - sumExpected
AORB_365:377:double_chiSquare(double,double):ratio * expected[i] => ratio / expected[i]
AORB_366:377:double_chiSquare(double,double):ratio * expected[i] => ratio % expected[i]
AORB_367:377:double_chiSquare(double,double):ratio * expected[i] => ratio + expected[i]
AORB_368:377:double_chiSquare(double,double):ratio * expected[i] => ratio - expected[i]
AORB_369:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => observed[i] * (ratio * expected[i])
AORB_370:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => observed[i] / (ratio * expected[i])
AORB_371:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => observed[i] % (ratio * expected[i])
AORB_372:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => observed[i] + ratio * expected[i]
AORB_373:378:double_chiSquare(double,double):dev * dev => dev / dev
AORB_374:378:double_chiSquare(double,double):dev * dev => dev % dev
AORB_375:378:double_chiSquare(double,double):dev * dev => dev + dev
AORB_376:378:double_chiSquare(double,double):dev * dev => dev - dev
AORB_377:378:double_chiSquare(double,double):ratio * expected[i] => ratio / expected[i]
AORB_378:378:double_chiSquare(double,double):ratio * expected[i] => ratio % expected[i]
AORB_379:378:double_chiSquare(double,double):ratio * expected[i] => ratio + expected[i]
AORB_380:378:double_chiSquare(double,double):ratio * expected[i] => ratio - expected[i]
AORB_381:378:double_chiSquare(double,double):dev * dev / (ratio * expected[i]) => dev * dev * (ratio * expected[i])
AORB_382:378:double_chiSquare(double,double):dev * dev / (ratio * expected[i]) => dev * dev % (ratio * expected[i])
AORB_383:378:double_chiSquare(double,double):dev * dev / (ratio * expected[i]) => dev * dev + ratio * expected[i]
AORB_384:378:double_chiSquare(double,double):dev * dev / (ratio * expected[i]) => dev * dev - ratio * expected[i]
AORB_385:380:double_chiSquare(double,double):observed[i] - expected[i] => observed[i] * expected[i]
AORB_386:380:double_chiSquare(double,double):observed[i] - expected[i] => observed[i] / expected[i]
AORB_387:380:double_chiSquare(double,double):observed[i] - expected[i] => observed[i] % expected[i]
AORB_388:380:double_chiSquare(double,double):observed[i] - expected[i] => observed[i] + expected[i]
AORB_389:381:double_chiSquare(double,double):dev * dev => dev / dev
AORB_390:381:double_chiSquare(double,double):dev * dev => dev % dev
AORB_391:381:double_chiSquare(double,double):dev * dev => dev + dev
AORB_392:381:double_chiSquare(double,double):dev * dev => dev - dev
AORB_393:381:double_chiSquare(double,double):dev * dev / expected[i] => dev * dev * expected[i]
AORB_394:381:double_chiSquare(double,double):dev * dev / expected[i] => dev * dev % expected[i]
AORB_395:381:double_chiSquare(double,double):dev * dev / expected[i] => dev * dev + expected[i]
AORB_396:381:double_chiSquare(double,double):dev * dev / expected[i] => dev * dev - expected[i]
AORB_397:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => values[i] * cutoff
AORB_398:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => values[i] / cutoff
AORB_399:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => values[i] % cutoff
AORB_400:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => values[i] + cutoff
AORB_401:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev / dev
AORB_402:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev % dev
AORB_403:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev + dev
AORB_404:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev - dev
AORB_405:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => length * 1.0
AORB_406:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => length / 1.0
AORB_407:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => length % 1.0
AORB_408:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => length + 1.0
AORB_409:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => sumsq * (length - 1.0)
AORB_410:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => sumsq % (length - 1.0)
AORB_411:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => sumsq + (length - 1.0)
AORB_412:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => sumsq - (length - 1.0)
AORB_413:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => sumsq * length
AORB_414:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => sumsq % length
AORB_415:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => sumsq + length
AORB_416:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => sumsq - length
AORB_417:417:int_partition(double,int,int,int):begin + 1 => begin * 1
AORB_418:417:int_partition(double,int,int,int):begin + 1 => begin / 1
AORB_419:417:int_partition(double,int,int,int):begin + 1 => begin % 1
AORB_420:417:int_partition(double,int,int,int):begin + 1 => begin - 1
AORB_421:418:int_partition(double,int,int,int):end - 1 => end * 1
AORB_422:418:int_partition(double,int,int,int):end - 1 => end / 1
AORB_423:418:int_partition(double,int,int,int):end - 1 => end % 1
AORB_424:418:int_partition(double,int,int,int):end - 1 => end + 1
AORB_425:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => begin * length
AORB_426:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => begin / length
AORB_427:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => begin % length
AORB_428:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => begin - length
AORS_1:13:double_distance(double,double):i++ => i--
AORS_2:23:double_distance1(double,double):i++ => i--
AORS_3:32:double_distanceInf(double,double):i++ => i--
AORS_4:44:double_ebeAdd(double,double):i++ => i--
AORS_5:56:double_ebeDivide(double,double):i++ => i--
AORS_6:68:double_ebeMultiply(double,double):i++ => i--
AORS_7:80:double_ebeSubtract(double,double):i++ => i--
AORS_8:97:double_safeNorm(double):i++ => i--
AORS_9:145:double_scale(double,double):i++ => i--
AORS_10:155:double_entropy(double):i++ => i--
AORS_11:158:double_entropy(double):i++ => i--
AORS_12:171:double_g(double,double):i++ => i--
AORS_13:182:double_g(double,double):i++ => i--
AORS_14:198:double_calculateAbsoluteDifferences(double):++i => i--
AORS_15:207:double_calculateDifferences(double,double):++i => i--
AORS_16:219:double_computeDividedDifference(double,double):i++ => i--
AORS_17:220:double_computeDividedDifference(double,double):j++ => j--
AORS_18:232:double_computeCanberraDistance(double,double):i++ => i--
AORS_19:244:double_evaluateHoners(double,double):j-- => j++
AORS_20:257:double_evaluateInternal(double,double,double):i++ => i--
AORS_21:267:double_evaluateInternal(double,double,double):i++ => i--
AORS_22:268:double_evaluateInternal(double,double,double):j++ => j--
AORS_23:279:double_evaluateInternal(double,double,double):nearest-- => nearest++
AORS_24:290:double_evaluateNewton(double,double,double):i-- => i++
AORS_25:299:double_meanDifference(double,double):i++ => i--
AORS_26:312:double_varianceDifference(double,double):i++ => i--
AORS_27:316:double_varianceDifference(double,double):i++ => i--
AORS_28:332:boolean_equals(double,double):++i => i--
AORS_29:342:boolean_checkNonNegative(double):i++ => i--
AORS_30:352:boolean_checkPositive(double):i++ => i--
AORS_31:364:double_chiSquare(double,double):i++ => i--
AORS_32:375:double_chiSquare(double,double):i++ => i--
AORS_33:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i++ => i--
AORS_34:421:int_partition(double,int,int,int):--j => j++
AORS_35:424:int_partition(double,int,int,int):++i => i--
AORS_36:433:int_partition(double,int,int,int):--i => i++
AORS_37:444:double_evaluateWeightedProduct(double,double,int,int):i++ => i--
AODU_1:164:double_entropy(double):-h => h
AODS_1:279:double_evaluateInternal(double,double,double):nearest-- => nearest
AODS_2:421:int_partition(double,int,int,int):--j => j
AODS_3:424:int_partition(double,int,int,int):++i => i
AODS_4:428:int_partition(double,int,int,int):i++ => i
AODS_5:429:int_partition(double,int,int,int):j-- => j
AODS_6:433:int_partition(double,int,int,int):--i => i
AOIU_1:14:double_distance(double,double):i => -i
AOIU_2:15:double_distance(double,double):dp => -dp
AOIU_3:17:double_distance(double,double):sum => -sum
AOIU_4:24:double_distance1(double,double):i => -i
AOIU_5:26:double_distance1(double,double):sum => -sum
AOIU_6:33:double_distanceInf(double,double):max => -max
AOIU_7:33:double_distanceInf(double,double):i => -i
AOIU_8:35:double_distanceInf(double,double):max => -max
AOIU_9:45:double_ebeAdd(double,double):i => -i
AOIU_10:57:double_ebeDivide(double,double):i => -i
AOIU_11:69:double_ebeMultiply(double,double):i => -i
AOIU_12:81:double_ebeSubtract(double,double):i => -i
AOIU_13:95:double_safeNorm(double):v.length => -v.length
AOIU_14:96:double_safeNorm(double):rgiant => -rgiant
AOIU_15:98:double_safeNorm(double):i => -i
AOIU_16:102:double_safeNorm(double):x1max => -x1max
AOIU_17:104:double_safeNorm(double):xabs => -xabs
AOIU_18:106:double_safeNorm(double):xabs => -xabs
AOIU_19:107:double_safeNorm(double):r => -r
AOIU_20:111:double_safeNorm(double):x3max => -x3max
AOIU_21:113:double_safeNorm(double):xabs => -xabs
AOIU_22:116:double_safeNorm(double):xabs => -xabs
AOIU_23:117:double_safeNorm(double):r => -r
AOIU_24:122:double_safeNorm(double):xabs => -xabs
AOIU_25:127:double_safeNorm(double):x1max => -x1max
AOIU_26:127:double_safeNorm(double):s1 => -s1
AOIU_27:130:double_safeNorm(double):x3max => -x3max
AOIU_28:130:double_safeNorm(double):s3 => -s3
AOIU_29:133:double_safeNorm(double):s2 => -s2
AOIU_30:135:double_safeNorm(double):x3max => -x3max
AOIU_31:135:double_safeNorm(double):s2 => -s2
AOIU_32:139:double_safeNorm(double):norm => -norm
AOIU_33:144:double_scale(double,double):arr.length => -arr.length
AOIU_34:146:double_scale(double,double):i => -i
AOIU_35:146:double_scale(double,double):val => -val
AOIU_36:156:double_entropy(double):i => -i
AOIU_37:160:double_entropy(double):i => -i
AOIU_38:160:double_entropy(double):sum_k => -sum_k
AOIU_39:161:double_entropy(double):p_i => -p_i
AOIU_40:161:double_entropy(double):p_i => -p_i
AOIU_41:172:double_g(double,double):i => -i
AOIU_42:173:double_g(double,double):i => -i
AOIU_43:178:double_g(double,double):sumObserved => -sumObserved
AOIU_44:183:double_g(double,double):i => -i
AOIU_45:183:double_g(double,double):ratio => -ratio
AOIU_46:183:double_g(double,double):i => -i
AOIU_47:183:double_g(double,double):i => -i
AOIU_48:183:double_g(double,double):i => -i
AOIU_49:184:double_g(double,double):i => -i
AOIU_50:184:double_g(double,double):dev => -dev
AOIU_51:186:double_g(double,double):sum => -sum
AOIU_52:197:double_calculateAbsoluteDifferences(double):z.length => -z.length
AOIU_53:199:double_calculateAbsoluteDifferences(double):i => -i
AOIU_54:206:double_calculateDifferences(double,double):x.length => -x.length
AOIU_55:208:double_calculateDifferences(double,double):i => -i
AOIU_56:216:double_computeDividedDifference(double,double):x.length => -x.length
AOIU_57:217:double_computeDividedDifference(double,double):n => -n
AOIU_58:221:double_computeDividedDifference(double,double):j => -j
AOIU_59:222:double_computeDividedDifference(double,double):j => -j
AOIU_60:222:double_computeDividedDifference(double,double):denominator => -denominator
AOIU_61:233:double_computeCanberraDistance(double,double):i => -i
AOIU_62:234:double_computeCanberraDistance(double,double):i => -i
AOIU_63:235:double_computeCanberraDistance(double,double):num => -num
AOIU_64:237:double_computeCanberraDistance(double,double):sum => -sum
AOIU_65:242:double_evaluateHoners(double,double):coefficients.length => -coefficients.length
AOIU_66:243:double_evaluateHoners(double,double):n => -n
AOIU_67:245:double_evaluateHoners(double,double):argument => -argument
AOIU_68:247:double_evaluateHoners(double,double):result => -result
AOIU_69:253:double_evaluateInternal(double,double,double):x.length => -x.length
AOIU_70:254:double_evaluateInternal(double,double,double):n => -n
AOIU_71:255:double_evaluateInternal(double,double,double):n => -n
AOIU_72:256:double_evaluateInternal(double,double,double):Double.POSITIVE_INFINITY => -Double.POSITIVE_INFINITY
AOIU_73:258:double_evaluateInternal(double,double,double):i => -i
AOIU_74:259:double_evaluateInternal(double,double,double):i => -i
AOIU_75:260:double_evaluateInternal(double,double,double):z => -z
AOIU_76:262:double_evaluateInternal(double,double,double):i => -i
AOIU_77:263:double_evaluateInternal(double,double,double):dist => -dist
AOIU_78:266:double_evaluateInternal(double,double,double):nearest => -nearest
AOIU_79:269:double_evaluateInternal(double,double,double):j => -j
AOIU_80:270:double_evaluateInternal(double,double,double):i => -i
AOIU_81:271:double_evaluateInternal(double,double,double):j => -j
AOIU_82:272:double_evaluateInternal(double,double,double):j => -j
AOIU_83:272:double_evaluateInternal(double,double,double):divider => -divider
AOIU_84:273:double_evaluateInternal(double,double,double):tc => -tc
AOIU_85:274:double_evaluateInternal(double,double,double):td => -td
AOIU_86:277:double_evaluateInternal(double,double,double):nearest => -nearest
AOIU_87:280:double_evaluateInternal(double,double,double):nearest => -nearest
AOIU_88:283:double_evaluateInternal(double,double,double):value => -value
AOIU_89:288:double_evaluateNewton(double,double,double):c.length => -c.length
AOIU_90:289:double_evaluateNewton(double,double,double):n => -n
AOIU_91:291:double_evaluateNewton(double,double,double):i => -i
AOIU_92:293:double_evaluateNewton(double,double,double):value => -value
AOIU_93:300:double_meanDifference(double,double):i => -i
AOIU_94:302:double_meanDifference(double,double):sumDifference => -sumDifference
AOIU_95:310:double_varianceDifference(double,double):sample1.length => -sample1.length
AOIU_96:313:double_varianceDifference(double,double):i => -i
AOIU_97:315:double_varianceDifference(double,double):sumDifference => -sumDifference
AOIU_98:317:double_varianceDifference(double,double):i => -i
AOIU_99:318:double_varianceDifference(double,double):diff => -diff
AOIU_100:318:double_varianceDifference(double,double):diff => -diff
AOIU_101:319:double_varianceDifference(double,double):diff => -diff
AOIU_102:321:double_varianceDifference(double,double):sum1 => -sum1
AOIU_103:321:double_varianceDifference(double,double):n => -n
AOIU_104:365:double_chiSquare(double,double):i => -i
AOIU_105:366:double_chiSquare(double,double):i => -i
AOIU_106:371:double_chiSquare(double,double):sumObserved => -sumObserved
AOIU_107:377:double_chiSquare(double,double):i => -i
AOIU_108:378:double_chiSquare(double,double):dev => -dev
AOIU_109:378:double_chiSquare(double,double):ratio => -ratio
AOIU_110:378:double_chiSquare(double,double):i => -i
AOIU_111:380:double_chiSquare(double,double):i => -i
AOIU_112:381:double_chiSquare(double,double):dev => -dev
AOIU_113:381:double_chiSquare(double,double):i => -i
AOIU_114:384:double_chiSquare(double,double):sumSq => -sumSq
AOIU_115:390:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):Double.NaN => -Double.NaN
AOIU_116:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => -i
AOIU_117:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => -dev
AOIU_118:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => -sumsq
AOIU_119:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => -length
AOIU_120:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => -sumsq
AOIU_121:415:int_partition(double,int,int,int):pivot => -pivot
AOIU_122:416:int_partition(double,int,int,int):begin => -begin
AOIU_123:417:int_partition(double,int,int,int):begin => -begin
AOIU_124:418:int_partition(double,int,int,int):end => -end
AOIU_125:427:int_partition(double,int,int,int):i => -i
AOIU_126:428:int_partition(double,int,int,int):j => -j
AOIU_127:429:int_partition(double,int,int,int):tmp => -tmp
AOIU_128:435:int_partition(double,int,int,int):i => -i
AOIU_129:436:int_partition(double,int,int,int):value => -value
AOIU_130:437:int_partition(double,int,int,int):i => -i
AOIU_131:442:double_evaluateWeightedProduct(double,double,int,int):Double.NaN => -Double.NaN
AOIU_132:445:double_evaluateWeightedProduct(double,double,int,int):i => -i
AOIU_133:445:double_evaluateWeightedProduct(double,double,int,int):i => -i
AOIU_134:447:double_evaluateWeightedProduct(double,double,int,int):product => -product
AOIS_1:13:double_distance(double,double):i => ++i
AOIS_2:13:double_distance(double,double):i => --i
AOIS_3:13:double_distance(double,double):i => i++
AOIS_4:13:double_distance(double,double):i => i--
AOIS_5:13:double_distance(double,double):p1.length => ++p1.length
AOIS_6:13:double_distance(double,double):p1.length => --p1.length
AOIS_7:13:double_distance(double,double):p1.length => p1.length++
AOIS_8:13:double_distance(double,double):p1.length => p1.length--
AOIS_9:14:double_distance(double,double):i => ++i
AOIS_10:14:double_distance(double,double):i => --i
AOIS_11:14:double_distance(double,double):i => i++
AOIS_12:14:double_distance(double,double):i => i--
AOIS_13:14:double_distance(double,double):i => ++i
AOIS_14:14:double_distance(double,double):i => --i
AOIS_15:14:double_distance(double,double):i => i++
AOIS_16:14:double_distance(double,double):i => i--
AOIS_17:15:double_distance(double,double):dp => ++dp
AOIS_18:15:double_distance(double,double):dp => --dp
AOIS_19:15:double_distance(double,double):dp => dp++
AOIS_20:15:double_distance(double,double):dp => dp--
AOIS_21:15:double_distance(double,double):dp => ++dp
AOIS_22:15:double_distance(double,double):dp => --dp
AOIS_23:15:double_distance(double,double):dp => dp++
AOIS_24:15:double_distance(double,double):dp => dp--
AOIS_25:17:double_distance(double,double):sum => sum++
AOIS_26:17:double_distance(double,double):sum => sum--
AOIS_27:23:double_distance1(double,double):i => ++i
AOIS_28:23:double_distance1(double,double):i => --i
AOIS_29:23:double_distance1(double,double):i => i++
AOIS_30:23:double_distance1(double,double):i => i--
AOIS_31:23:double_distance1(double,double):p1.length => ++p1.length
AOIS_32:23:double_distance1(double,double):p1.length => --p1.length
AOIS_33:23:double_distance1(double,double):p1.length => p1.length++
AOIS_34:23:double_distance1(double,double):p1.length => p1.length--
AOIS_35:24:double_distance1(double,double):i => ++i
AOIS_36:24:double_distance1(double,double):i => --i
AOIS_37:24:double_distance1(double,double):i => i++
AOIS_38:24:double_distance1(double,double):i => i--
AOIS_39:24:double_distance1(double,double):i => ++i
AOIS_40:24:double_distance1(double,double):i => --i
AOIS_41:24:double_distance1(double,double):i => i++
AOIS_42:24:double_distance1(double,double):i => i--
AOIS_43:26:double_distance1(double,double):sum => sum++
AOIS_44:26:double_distance1(double,double):sum => sum--
AOIS_45:32:double_distanceInf(double,double):i => ++i
AOIS_46:32:double_distanceInf(double,double):i => --i
AOIS_47:32:double_distanceInf(double,double):i => i++
AOIS_48:32:double_distanceInf(double,double):i => i--
AOIS_49:32:double_distanceInf(double,double):p1.length => ++p1.length
AOIS_50:32:double_distanceInf(double,double):p1.length => --p1.length
AOIS_51:32:double_distanceInf(double,double):p1.length => p1.length++
AOIS_52:32:double_distanceInf(double,double):p1.length => p1.length--
AOIS_53:33:double_distanceInf(double,double):max => ++max
AOIS_54:33:double_distanceInf(double,double):max => --max
AOIS_55:33:double_distanceInf(double,double):max => max++
AOIS_56:33:double_distanceInf(double,double):max => max--
AOIS_57:33:double_distanceInf(double,double):i => ++i
AOIS_58:33:double_distanceInf(double,double):i => --i
AOIS_59:33:double_distanceInf(double,double):i => i++
AOIS_60:33:double_distanceInf(double,double):i => i--
AOIS_61:33:double_distanceInf(double,double):i => ++i
AOIS_62:33:double_distanceInf(double,double):i => --i
AOIS_63:33:double_distanceInf(double,double):i => i++
AOIS_64:33:double_distanceInf(double,double):i => i--
AOIS_65:35:double_distanceInf(double,double):max => max++
AOIS_66:35:double_distanceInf(double,double):max => max--
AOIS_67:40:double_ebeAdd(double,double):a.length => ++a.length
AOIS_68:40:double_ebeAdd(double,double):a.length => --a.length
AOIS_69:40:double_ebeAdd(double,double):a.length => a.length++
AOIS_70:40:double_ebeAdd(double,double):a.length => a.length--
AOIS_71:40:double_ebeAdd(double,double):b.length => ++b.length
AOIS_72:40:double_ebeAdd(double,double):b.length => --b.length
AOIS_73:40:double_ebeAdd(double,double):b.length => b.length++
AOIS_74:40:double_ebeAdd(double,double):b.length => b.length--
AOIS_75:44:double_ebeAdd(double,double):i => ++i
AOIS_76:44:double_ebeAdd(double,double):i => --i
AOIS_77:44:double_ebeAdd(double,double):i => i++
AOIS_78:44:double_ebeAdd(double,double):i => i--
AOIS_79:44:double_ebeAdd(double,double):a.length => ++a.length
AOIS_80:44:double_ebeAdd(double,double):a.length => --a.length
AOIS_81:44:double_ebeAdd(double,double):a.length => a.length++
AOIS_82:44:double_ebeAdd(double,double):a.length => a.length--
AOIS_83:45:double_ebeAdd(double,double):i => ++i
AOIS_84:45:double_ebeAdd(double,double):i => --i
AOIS_85:45:double_ebeAdd(double,double):i => i++
AOIS_86:45:double_ebeAdd(double,double):i => i--
AOIS_87:52:double_ebeDivide(double,double):a.length => ++a.length
AOIS_88:52:double_ebeDivide(double,double):a.length => --a.length
AOIS_89:52:double_ebeDivide(double,double):a.length => a.length++
AOIS_90:52:double_ebeDivide(double,double):a.length => a.length--
AOIS_91:52:double_ebeDivide(double,double):b.length => ++b.length
AOIS_92:52:double_ebeDivide(double,double):b.length => --b.length
AOIS_93:52:double_ebeDivide(double,double):b.length => b.length++
AOIS_94:52:double_ebeDivide(double,double):b.length => b.length--
AOIS_95:56:double_ebeDivide(double,double):i => ++i
AOIS_96:56:double_ebeDivide(double,double):i => --i
AOIS_97:56:double_ebeDivide(double,double):i => i++
AOIS_98:56:double_ebeDivide(double,double):i => i--
AOIS_99:56:double_ebeDivide(double,double):a.length => ++a.length
AOIS_100:56:double_ebeDivide(double,double):a.length => --a.length
AOIS_101:56:double_ebeDivide(double,double):a.length => a.length++
AOIS_102:56:double_ebeDivide(double,double):a.length => a.length--
AOIS_103:57:double_ebeDivide(double,double):i => ++i
AOIS_104:57:double_ebeDivide(double,double):i => --i
AOIS_105:57:double_ebeDivide(double,double):i => i++
AOIS_106:57:double_ebeDivide(double,double):i => i--
AOIS_107:64:double_ebeMultiply(double,double):a.length => ++a.length
AOIS_108:64:double_ebeMultiply(double,double):a.length => --a.length
AOIS_109:64:double_ebeMultiply(double,double):a.length => a.length++
AOIS_110:64:double_ebeMultiply(double,double):a.length => a.length--
AOIS_111:64:double_ebeMultiply(double,double):b.length => ++b.length
AOIS_112:64:double_ebeMultiply(double,double):b.length => --b.length
AOIS_113:64:double_ebeMultiply(double,double):b.length => b.length++
AOIS_114:64:double_ebeMultiply(double,double):b.length => b.length--
AOIS_115:68:double_ebeMultiply(double,double):i => ++i
AOIS_116:68:double_ebeMultiply(double,double):i => --i
AOIS_117:68:double_ebeMultiply(double,double):i => i++
AOIS_118:68:double_ebeMultiply(double,double):i => i--
AOIS_119:68:double_ebeMultiply(double,double):a.length => ++a.length
AOIS_120:68:double_ebeMultiply(double,double):a.length => --a.length
AOIS_121:68:double_ebeMultiply(double,double):a.length => a.length++
AOIS_122:68:double_ebeMultiply(double,double):a.length => a.length--
AOIS_123:69:double_ebeMultiply(double,double):i => ++i
AOIS_124:69:double_ebeMultiply(double,double):i => --i
AOIS_125:69:double_ebeMultiply(double,double):i => i++
AOIS_126:69:double_ebeMultiply(double,double):i => i--
AOIS_127:76:double_ebeSubtract(double,double):a.length => ++a.length
AOIS_128:76:double_ebeSubtract(double,double):a.length => --a.length
AOIS_129:76:double_ebeSubtract(double,double):a.length => a.length++
AOIS_130:76:double_ebeSubtract(double,double):a.length => a.length--
AOIS_131:76:double_ebeSubtract(double,double):b.length => ++b.length
AOIS_132:76:double_ebeSubtract(double,double):b.length => --b.length
AOIS_133:76:double_ebeSubtract(double,double):b.length => b.length++
AOIS_134:76:double_ebeSubtract(double,double):b.length => b.length--
AOIS_135:80:double_ebeSubtract(double,double):i => ++i
AOIS_136:80:double_ebeSubtract(double,double):i => --i
AOIS_137:80:double_ebeSubtract(double,double):i => i++
AOIS_138:80:double_ebeSubtract(double,double):i => i--
AOIS_139:80:double_ebeSubtract(double,double):a.length => ++a.length
AOIS_140:80:double_ebeSubtract(double,double):a.length => --a.length
AOIS_141:80:double_ebeSubtract(double,double):a.length => a.length++
AOIS_142:80:double_ebeSubtract(double,double):a.length => a.length--
AOIS_143:81:double_ebeSubtract(double,double):i => ++i
AOIS_144:81:double_ebeSubtract(double,double):i => --i
AOIS_145:81:double_ebeSubtract(double,double):i => i++
AOIS_146:81:double_ebeSubtract(double,double):i => i--
AOIS_147:95:double_safeNorm(double):v.length => v.length++
AOIS_148:95:double_safeNorm(double):v.length => v.length--
AOIS_149:96:double_safeNorm(double):rgiant => ++rgiant
AOIS_150:96:double_safeNorm(double):rgiant => --rgiant
AOIS_151:96:double_safeNorm(double):rgiant => rgiant++
AOIS_152:96:double_safeNorm(double):rgiant => rgiant--
AOIS_153:96:double_safeNorm(double):floatn => ++floatn
AOIS_154:96:double_safeNorm(double):floatn => --floatn
AOIS_155:96:double_safeNorm(double):floatn => floatn++
AOIS_156:96:double_safeNorm(double):floatn => floatn--
AOIS_157:97:double_safeNorm(double):i => ++i
AOIS_158:97:double_safeNorm(double):i => --i
AOIS_159:97:double_safeNorm(double):i => i++
AOIS_160:97:double_safeNorm(double):i => i--
AOIS_161:97:double_safeNorm(double):v.length => ++v.length
AOIS_162:97:double_safeNorm(double):v.length => --v.length
AOIS_163:97:double_safeNorm(double):v.length => v.length++
AOIS_164:97:double_safeNorm(double):v.length => v.length--
AOIS_165:98:double_safeNorm(double):i => i++
AOIS_166:98:double_safeNorm(double):i => i--
AOIS_167:99:double_safeNorm(double):xabs => ++xabs
AOIS_168:99:double_safeNorm(double):xabs => --xabs
AOIS_169:99:double_safeNorm(double):xabs => xabs++
AOIS_170:99:double_safeNorm(double):xabs => xabs--
AOIS_171:99:double_safeNorm(double):rdwarf => ++rdwarf
AOIS_172:99:double_safeNorm(double):rdwarf => --rdwarf
AOIS_173:99:double_safeNorm(double):rdwarf => rdwarf++
AOIS_174:99:double_safeNorm(double):rdwarf => rdwarf--
AOIS_175:99:double_safeNorm(double):xabs => ++xabs
AOIS_176:99:double_safeNorm(double):xabs => --xabs
AOIS_177:99:double_safeNorm(double):xabs => xabs++
AOIS_178:99:double_safeNorm(double):xabs => xabs--
AOIS_179:99:double_safeNorm(double):agiant => ++agiant
AOIS_180:99:double_safeNorm(double):agiant => --agiant
AOIS_181:99:double_safeNorm(double):agiant => agiant++
AOIS_182:99:double_safeNorm(double):agiant => agiant--
AOIS_183:100:double_safeNorm(double):xabs => ++xabs
AOIS_184:100:double_safeNorm(double):xabs => --xabs
AOIS_185:100:double_safeNorm(double):xabs => xabs++
AOIS_186:100:double_safeNorm(double):xabs => xabs--
AOIS_187:100:double_safeNorm(double):rdwarf => ++rdwarf
AOIS_188:100:double_safeNorm(double):rdwarf => --rdwarf
AOIS_189:100:double_safeNorm(double):rdwarf => rdwarf++
AOIS_190:100:double_safeNorm(double):rdwarf => rdwarf--
AOIS_191:101:double_safeNorm(double):xabs => ++xabs
AOIS_192:101:double_safeNorm(double):xabs => --xabs
AOIS_193:101:double_safeNorm(double):xabs => xabs++
AOIS_194:101:double_safeNorm(double):xabs => xabs--
AOIS_195:101:double_safeNorm(double):x1max => ++x1max
AOIS_196:101:double_safeNorm(double):x1max => --x1max
AOIS_197:101:double_safeNorm(double):x1max => x1max++
AOIS_198:101:double_safeNorm(double):x1max => x1max--
AOIS_199:102:double_safeNorm(double):x1max => ++x1max
AOIS_200:102:double_safeNorm(double):x1max => --x1max
AOIS_201:102:double_safeNorm(double):x1max => x1max++
AOIS_202:102:double_safeNorm(double):x1max => x1max--
AOIS_203:102:double_safeNorm(double):xabs => ++xabs
AOIS_204:102:double_safeNorm(double):xabs => --xabs
AOIS_205:102:double_safeNorm(double):xabs => xabs++
AOIS_206:102:double_safeNorm(double):xabs => xabs--
AOIS_207:103:double_safeNorm(double):s1 => ++s1
AOIS_208:103:double_safeNorm(double):s1 => --s1
AOIS_209:103:double_safeNorm(double):s1 => s1++
AOIS_210:103:double_safeNorm(double):s1 => s1--
AOIS_211:103:double_safeNorm(double):r => ++r
AOIS_212:103:double_safeNorm(double):r => --r
AOIS_213:103:double_safeNorm(double):r => r++
AOIS_214:103:double_safeNorm(double):r => r--
AOIS_215:103:double_safeNorm(double):r => r++
AOIS_216:103:double_safeNorm(double):r => r--
AOIS_217:104:double_safeNorm(double):xabs => ++xabs
AOIS_218:104:double_safeNorm(double):xabs => --xabs
AOIS_219:104:double_safeNorm(double):xabs => xabs++
AOIS_220:104:double_safeNorm(double):xabs => xabs--
AOIS_221:106:double_safeNorm(double):xabs => ++xabs
AOIS_222:106:double_safeNorm(double):xabs => --xabs
AOIS_223:106:double_safeNorm(double):xabs => xabs++
AOIS_224:106:double_safeNorm(double):xabs => xabs--
AOIS_225:106:double_safeNorm(double):x1max => ++x1max
AOIS_226:106:double_safeNorm(double):x1max => --x1max
AOIS_227:106:double_safeNorm(double):x1max => x1max++
AOIS_228:106:double_safeNorm(double):x1max => x1max--
AOIS_229:107:double_safeNorm(double):r => ++r
AOIS_230:107:double_safeNorm(double):r => --r
AOIS_231:107:double_safeNorm(double):r => r++
AOIS_232:107:double_safeNorm(double):r => r--
AOIS_233:107:double_safeNorm(double):r => ++r
AOIS_234:107:double_safeNorm(double):r => --r
AOIS_235:107:double_safeNorm(double):r => r++
AOIS_236:107:double_safeNorm(double):r => r--
AOIS_237:110:double_safeNorm(double):xabs => ++xabs
AOIS_238:110:double_safeNorm(double):xabs => --xabs
AOIS_239:110:double_safeNorm(double):xabs => xabs++
AOIS_240:110:double_safeNorm(double):xabs => xabs--
AOIS_241:110:double_safeNorm(double):x3max => ++x3max
AOIS_242:110:double_safeNorm(double):x3max => --x3max
AOIS_243:110:double_safeNorm(double):x3max => x3max++
AOIS_244:110:double_safeNorm(double):x3max => x3max--
AOIS_245:111:double_safeNorm(double):x3max => ++x3max
AOIS_246:111:double_safeNorm(double):x3max => --x3max
AOIS_247:111:double_safeNorm(double):x3max => x3max++
AOIS_248:111:double_safeNorm(double):x3max => x3max--
AOIS_249:111:double_safeNorm(double):xabs => ++xabs
AOIS_250:111:double_safeNorm(double):xabs => --xabs
AOIS_251:111:double_safeNorm(double):xabs => xabs++
AOIS_252:111:double_safeNorm(double):xabs => xabs--
AOIS_253:112:double_safeNorm(double):s3 => ++s3
AOIS_254:112:double_safeNorm(double):s3 => --s3
AOIS_255:112:double_safeNorm(double):s3 => s3++
AOIS_256:112:double_safeNorm(double):s3 => s3--
AOIS_257:112:double_safeNorm(double):r => ++r
AOIS_258:112:double_safeNorm(double):r => --r
AOIS_259:112:double_safeNorm(double):r => r++
AOIS_260:112:double_safeNorm(double):r => r--
AOIS_261:112:double_safeNorm(double):r => r++
AOIS_262:112:double_safeNorm(double):r => r--
AOIS_263:113:double_safeNorm(double):xabs => ++xabs
AOIS_264:113:double_safeNorm(double):xabs => --xabs
AOIS_265:113:double_safeNorm(double):xabs => xabs++
AOIS_266:113:double_safeNorm(double):xabs => xabs--
AOIS_267:115:double_safeNorm(double):xabs => ++xabs
AOIS_268:115:double_safeNorm(double):xabs => --xabs
AOIS_269:115:double_safeNorm(double):xabs => xabs++
AOIS_270:115:double_safeNorm(double):xabs => xabs--
AOIS_271:116:double_safeNorm(double):xabs => ++xabs
AOIS_272:116:double_safeNorm(double):xabs => --xabs
AOIS_273:116:double_safeNorm(double):xabs => xabs++
AOIS_274:116:double_safeNorm(double):xabs => xabs--
AOIS_275:116:double_safeNorm(double):x3max => ++x3max
AOIS_276:116:double_safeNorm(double):x3max => --x3max
AOIS_277:116:double_safeNorm(double):x3max => x3max++
AOIS_278:116:double_safeNorm(double):x3max => x3max--
AOIS_279:117:double_safeNorm(double):r => ++r
AOIS_280:117:double_safeNorm(double):r => --r
AOIS_281:117:double_safeNorm(double):r => r++
AOIS_282:117:double_safeNorm(double):r => r--
AOIS_283:117:double_safeNorm(double):r => ++r
AOIS_284:117:double_safeNorm(double):r => --r
AOIS_285:117:double_safeNorm(double):r => r++
AOIS_286:117:double_safeNorm(double):r => r--
AOIS_287:122:double_safeNorm(double):xabs => ++xabs
AOIS_288:122:double_safeNorm(double):xabs => --xabs
AOIS_289:122:double_safeNorm(double):xabs => xabs++
AOIS_290:122:double_safeNorm(double):xabs => xabs--
AOIS_291:122:double_safeNorm(double):xabs => ++xabs
AOIS_292:122:double_safeNorm(double):xabs => --xabs
AOIS_293:122:double_safeNorm(double):xabs => xabs++
AOIS_294:122:double_safeNorm(double):xabs => xabs--
AOIS_295:126:double_safeNorm(double):s1 => ++s1
AOIS_296:126:double_safeNorm(double):s1 => --s1
AOIS_297:126:double_safeNorm(double):s1 => s1++
AOIS_298:126:double_safeNorm(double):s1 => s1--
AOIS_299:127:double_safeNorm(double):x1max => ++x1max
AOIS_300:127:double_safeNorm(double):x1max => --x1max
AOIS_301:127:double_safeNorm(double):x1max => x1max++
AOIS_302:127:double_safeNorm(double):x1max => x1max--
AOIS_303:127:double_safeNorm(double):s1 => ++s1
AOIS_304:127:double_safeNorm(double):s1 => --s1
AOIS_305:127:double_safeNorm(double):s1 => s1++
AOIS_306:127:double_safeNorm(double):s1 => s1--
AOIS_307:127:double_safeNorm(double):s2 => ++s2
AOIS_308:127:double_safeNorm(double):s2 => --s2
AOIS_309:127:double_safeNorm(double):s2 => s2++
AOIS_310:127:double_safeNorm(double):s2 => s2--
AOIS_311:127:double_safeNorm(double):x1max => ++x1max
AOIS_312:127:double_safeNorm(double):x1max => --x1max
AOIS_313:127:double_safeNorm(double):x1max => x1max++
AOIS_314:127:double_safeNorm(double):x1max => x1max--
AOIS_315:127:double_safeNorm(double):x1max => x1max++
AOIS_316:127:double_safeNorm(double):x1max => x1max--
AOIS_317:129:double_safeNorm(double):s2 => ++s2
AOIS_318:129:double_safeNorm(double):s2 => --s2
AOIS_319:129:double_safeNorm(double):s2 => s2++
AOIS_320:129:double_safeNorm(double):s2 => s2--
AOIS_321:130:double_safeNorm(double):x3max => ++x3max
AOIS_322:130:double_safeNorm(double):x3max => --x3max
AOIS_323:130:double_safeNorm(double):x3max => x3max++
AOIS_324:130:double_safeNorm(double):x3max => x3max--
AOIS_325:130:double_safeNorm(double):s3 => ++s3
AOIS_326:130:double_safeNorm(double):s3 => --s3
AOIS_327:130:double_safeNorm(double):s3 => s3++
AOIS_328:130:double_safeNorm(double):s3 => s3--
AOIS_329:132:double_safeNorm(double):s2 => ++s2
AOIS_330:132:double_safeNorm(double):s2 => --s2
AOIS_331:132:double_safeNorm(double):s2 => s2++
AOIS_332:132:double_safeNorm(double):s2 => s2--
AOIS_333:132:double_safeNorm(double):x3max => ++x3max
AOIS_334:132:double_safeNorm(double):x3max => --x3max
AOIS_335:132:double_safeNorm(double):x3max => x3max++
AOIS_336:132:double_safeNorm(double):x3max => x3max--
AOIS_337:133:double_safeNorm(double):s2 => ++s2
AOIS_338:133:double_safeNorm(double):s2 => --s2
AOIS_339:133:double_safeNorm(double):s2 => s2++
AOIS_340:133:double_safeNorm(double):s2 => s2--
AOIS_341:133:double_safeNorm(double):x3max => ++x3max
AOIS_342:133:double_safeNorm(double):x3max => --x3max
AOIS_343:133:double_safeNorm(double):x3max => x3max++
AOIS_344:133:double_safeNorm(double):x3max => x3max--
AOIS_345:133:double_safeNorm(double):s2 => ++s2
AOIS_346:133:double_safeNorm(double):s2 => --s2
AOIS_347:133:double_safeNorm(double):s2 => s2++
AOIS_348:133:double_safeNorm(double):s2 => s2--
AOIS_349:133:double_safeNorm(double):x3max => ++x3max
AOIS_350:133:double_safeNorm(double):x3max => --x3max
AOIS_351:133:double_safeNorm(double):x3max => x3max++
AOIS_352:133:double_safeNorm(double):x3max => x3max--
AOIS_353:133:double_safeNorm(double):s3 => ++s3
AOIS_354:133:double_safeNorm(double):s3 => --s3
AOIS_355:133:double_safeNorm(double):s3 => s3++
AOIS_356:133:double_safeNorm(double):s3 => s3--
AOIS_357:135:double_safeNorm(double):x3max => ++x3max
AOIS_358:135:double_safeNorm(double):x3max => --x3max
AOIS_359:135:double_safeNorm(double):x3max => x3max++
AOIS_360:135:double_safeNorm(double):x3max => x3max--
AOIS_361:135:double_safeNorm(double):s2 => ++s2
AOIS_362:135:double_safeNorm(double):s2 => --s2
AOIS_363:135:double_safeNorm(double):s2 => s2++
AOIS_364:135:double_safeNorm(double):s2 => s2--
AOIS_365:135:double_safeNorm(double):x3max => ++x3max
AOIS_366:135:double_safeNorm(double):x3max => --x3max
AOIS_367:135:double_safeNorm(double):x3max => x3max++
AOIS_368:135:double_safeNorm(double):x3max => x3max--
AOIS_369:135:double_safeNorm(double):x3max => ++x3max
AOIS_370:135:double_safeNorm(double):x3max => --x3max
AOIS_371:135:double_safeNorm(double):x3max => x3max++
AOIS_372:135:double_safeNorm(double):x3max => x3max--
AOIS_373:135:double_safeNorm(double):s3 => ++s3
AOIS_374:135:double_safeNorm(double):s3 => --s3
AOIS_375:135:double_safeNorm(double):s3 => s3++
AOIS_376:135:double_safeNorm(double):s3 => s3--
AOIS_377:139:double_safeNorm(double):norm => norm++
AOIS_378:139:double_safeNorm(double):norm => norm--
AOIS_379:144:double_scale(double,double):arr.length => arr.length++
AOIS_380:144:double_scale(double,double):arr.length => arr.length--
AOIS_381:145:double_scale(double,double):i => ++i
AOIS_382:145:double_scale(double,double):i => --i
AOIS_383:145:double_scale(double,double):i => i++
AOIS_384:145:double_scale(double,double):i => i--
AOIS_385:145:double_scale(double,double):arr.length => ++arr.length
AOIS_386:145:double_scale(double,double):arr.length => --arr.length
AOIS_387:145:double_scale(double,double):arr.length => arr.length++
AOIS_388:145:double_scale(double,double):arr.length => arr.length--
AOIS_389:146:double_scale(double,double):i => ++i
AOIS_390:146:double_scale(double,double):i => --i
AOIS_391:146:double_scale(double,double):i => i++
AOIS_392:146:double_scale(double,double):i => i--
AOIS_393:146:double_scale(double,double):val => ++val
AOIS_394:146:double_scale(double,double):val => --val
AOIS_395:146:double_scale(double,double):val => val++
AOIS_396:146:double_scale(double,double):val => val--
AOIS_397:155:double_entropy(double):i => ++i
AOIS_398:155:double_entropy(double):i => --i
AOIS_399:155:double_entropy(double):i => i++
AOIS_400:155:double_entropy(double):i => i--
AOIS_401:155:double_entropy(double):k.length => ++k.length
AOIS_402:155:double_entropy(double):k.length => --k.length
AOIS_403:155:double_entropy(double):k.length => k.length++
AOIS_404:155:double_entropy(double):k.length => k.length--
AOIS_405:156:double_entropy(double):i => ++i
AOIS_406:156:double_entropy(double):i => --i
AOIS_407:156:double_entropy(double):i => i++
AOIS_408:156:double_entropy(double):i => i--
AOIS_409:158:double_entropy(double):i => ++i
AOIS_410:158:double_entropy(double):i => --i
AOIS_411:158:double_entropy(double):i => i++
AOIS_412:158:double_entropy(double):i => i--
AOIS_413:158:double_entropy(double):k.length => ++k.length
AOIS_414:158:double_entropy(double):k.length => --k.length
AOIS_415:158:double_entropy(double):k.length => k.length++
AOIS_416:158:double_entropy(double):k.length => k.length--
AOIS_417:159:double_entropy(double):i => ++i
AOIS_418:159:double_entropy(double):i => --i
AOIS_419:159:double_entropy(double):i => i++
AOIS_420:159:double_entropy(double):i => i--
AOIS_421:160:double_entropy(double):i => ++i
AOIS_422:160:double_entropy(double):i => --i
AOIS_423:160:double_entropy(double):i => i++
AOIS_424:160:double_entropy(double):i => i--
AOIS_425:160:double_entropy(double):sum_k => ++sum_k
AOIS_426:160:double_entropy(double):sum_k => --sum_k
AOIS_427:160:double_entropy(double):sum_k => sum_k++
AOIS_428:160:double_entropy(double):sum_k => sum_k--
AOIS_429:161:double_entropy(double):p_i => ++p_i
AOIS_430:161:double_entropy(double):p_i => --p_i
AOIS_431:161:double_entropy(double):p_i => p_i++
AOIS_432:161:double_entropy(double):p_i => p_i--
AOIS_433:161:double_entropy(double):p_i => ++p_i
AOIS_434:161:double_entropy(double):p_i => --p_i
AOIS_435:161:double_entropy(double):p_i => p_i++
AOIS_436:161:double_entropy(double):p_i => p_i--
AOIS_437:171:double_g(double,double):i => ++i
AOIS_438:171:double_g(double,double):i => --i
AOIS_439:171:double_g(double,double):i => i++
AOIS_440:171:double_g(double,double):i => i--
AOIS_441:171:double_g(double,double):observed.length => ++observed.length
AOIS_442:171:double_g(double,double):observed.length => --observed.length
AOIS_443:171:double_g(double,double):observed.length => observed.length++
AOIS_444:171:double_g(double,double):observed.length => observed.length--
AOIS_445:172:double_g(double,double):i => ++i
AOIS_446:172:double_g(double,double):i => --i
AOIS_447:172:double_g(double,double):i => i++
AOIS_448:172:double_g(double,double):i => i--
AOIS_449:173:double_g(double,double):i => ++i
AOIS_450:173:double_g(double,double):i => --i
AOIS_451:173:double_g(double,double):i => i++
AOIS_452:173:double_g(double,double):i => i--
AOIS_453:177:double_g(double,double):sumExpected => ++sumExpected
AOIS_454:177:double_g(double,double):sumExpected => --sumExpected
AOIS_455:177:double_g(double,double):sumExpected => sumExpected++
AOIS_456:177:double_g(double,double):sumExpected => sumExpected--
AOIS_457:177:double_g(double,double):sumObserved => ++sumObserved
AOIS_458:177:double_g(double,double):sumObserved => --sumObserved
AOIS_459:177:double_g(double,double):sumObserved => sumObserved++
AOIS_460:177:double_g(double,double):sumObserved => sumObserved--
AOIS_461:178:double_g(double,double):sumObserved => ++sumObserved
AOIS_462:178:double_g(double,double):sumObserved => --sumObserved
AOIS_463:178:double_g(double,double):sumObserved => sumObserved++
AOIS_464:178:double_g(double,double):sumObserved => sumObserved--
AOIS_465:178:double_g(double,double):sumExpected => ++sumExpected
AOIS_466:178:double_g(double,double):sumExpected => --sumExpected
AOIS_467:178:double_g(double,double):sumExpected => sumExpected++
AOIS_468:178:double_g(double,double):sumExpected => sumExpected--
AOIS_469:182:double_g(double,double):i => ++i
AOIS_470:182:double_g(double,double):i => --i
AOIS_471:182:double_g(double,double):i => i++
AOIS_472:182:double_g(double,double):i => i--
AOIS_473:182:double_g(double,double):observed.length => ++observed.length
AOIS_474:182:double_g(double,double):observed.length => --observed.length
AOIS_475:182:double_g(double,double):observed.length => observed.length++
AOIS_476:182:double_g(double,double):observed.length => observed.length--
AOIS_477:183:double_g(double,double):i => ++i
AOIS_478:183:double_g(double,double):i => --i
AOIS_479:183:double_g(double,double):i => i++
AOIS_480:183:double_g(double,double):i => i--
AOIS_481:183:double_g(double,double):ratio => ++ratio
AOIS_482:183:double_g(double,double):ratio => --ratio
AOIS_483:183:double_g(double,double):ratio => ratio++
AOIS_484:183:double_g(double,double):ratio => ratio--
AOIS_485:183:double_g(double,double):i => ++i
AOIS_486:183:double_g(double,double):i => --i
AOIS_487:183:double_g(double,double):i => i++
AOIS_488:183:double_g(double,double):i => i--
AOIS_489:183:double_g(double,double):i => ++i
AOIS_490:183:double_g(double,double):i => --i
AOIS_491:183:double_g(double,double):i => i++
AOIS_492:183:double_g(double,double):i => i--
AOIS_493:183:double_g(double,double):i => ++i
AOIS_494:183:double_g(double,double):i => --i
AOIS_495:183:double_g(double,double):i => i++
AOIS_496:183:double_g(double,double):i => i--
AOIS_497:184:double_g(double,double):i => ++i
AOIS_498:184:double_g(double,double):i => --i
AOIS_499:184:double_g(double,double):i => i++
AOIS_500:184:double_g(double,double):i => i--
AOIS_501:184:double_g(double,double):dev => ++dev
AOIS_502:184:double_g(double,double):dev => --dev
AOIS_503:184:double_g(double,double):dev => dev++
AOIS_504:184:double_g(double,double):dev => dev--
AOIS_505:186:double_g(double,double):sum => ++sum
AOIS_506:186:double_g(double,double):sum => --sum
AOIS_507:186:double_g(double,double):sum => sum++
AOIS_508:186:double_g(double,double):sum => sum--
AOIS_509:194:double_calculateAbsoluteDifferences(double):z.length => ++z.length
AOIS_510:194:double_calculateAbsoluteDifferences(double):z.length => --z.length
AOIS_511:194:double_calculateAbsoluteDifferences(double):z.length => z.length++
AOIS_512:194:double_calculateAbsoluteDifferences(double):z.length => z.length--
AOIS_513:197:double_calculateAbsoluteDifferences(double):z.length => z.length++
AOIS_514:197:double_calculateAbsoluteDifferences(double):z.length => z.length--
AOIS_515:198:double_calculateAbsoluteDifferences(double):i => ++i
AOIS_516:198:double_calculateAbsoluteDifferences(double):i => --i
AOIS_517:198:double_calculateAbsoluteDifferences(double):i => i++
AOIS_518:198:double_calculateAbsoluteDifferences(double):i => i--
AOIS_519:198:double_calculateAbsoluteDifferences(double):z.length => ++z.length
AOIS_520:198:double_calculateAbsoluteDifferences(double):z.length => --z.length
AOIS_521:198:double_calculateAbsoluteDifferences(double):z.length => z.length++
AOIS_522:198:double_calculateAbsoluteDifferences(double):z.length => z.length--
AOIS_523:199:double_calculateAbsoluteDifferences(double):i => ++i
AOIS_524:199:double_calculateAbsoluteDifferences(double):i => --i
AOIS_525:199:double_calculateAbsoluteDifferences(double):i => i++
AOIS_526:199:double_calculateAbsoluteDifferences(double):i => i--
AOIS_527:206:double_calculateDifferences(double,double):x.length => x.length++
AOIS_528:206:double_calculateDifferences(double,double):x.length => x.length--
AOIS_529:207:double_calculateDifferences(double,double):i => ++i
AOIS_530:207:double_calculateDifferences(double,double):i => --i
AOIS_531:207:double_calculateDifferences(double,double):i => i++
AOIS_532:207:double_calculateDifferences(double,double):i => i--
AOIS_533:207:double_calculateDifferences(double,double):x.length => ++x.length
AOIS_534:207:double_calculateDifferences(double,double):x.length => --x.length
AOIS_535:207:double_calculateDifferences(double,double):x.length => x.length++
AOIS_536:207:double_calculateDifferences(double,double):x.length => x.length--
AOIS_537:208:double_calculateDifferences(double,double):i => ++i
AOIS_538:208:double_calculateDifferences(double,double):i => --i
AOIS_539:208:double_calculateDifferences(double,double):i => i++
AOIS_540:208:double_calculateDifferences(double,double):i => i--
AOIS_541:208:double_calculateDifferences(double,double):i => ++i
AOIS_542:208:double_calculateDifferences(double,double):i => --i
AOIS_543:208:double_calculateDifferences(double,double):i => i++
AOIS_544:208:double_calculateDifferences(double,double):i => i--
AOIS_545:216:double_computeDividedDifference(double,double):x.length => x.length++
AOIS_546:216:double_computeDividedDifference(double,double):x.length => x.length--
AOIS_547:217:double_computeDividedDifference(double,double):n => n++
AOIS_548:217:double_computeDividedDifference(double,double):n => n--
AOIS_549:219:double_computeDividedDifference(double,double):i => ++i
AOIS_550:219:double_computeDividedDifference(double,double):i => --i
AOIS_551:219:double_computeDividedDifference(double,double):i => i++
AOIS_552:219:double_computeDividedDifference(double,double):i => i--
AOIS_553:219:double_computeDividedDifference(double,double):n => ++n
AOIS_554:219:double_computeDividedDifference(double,double):n => --n
AOIS_555:219:double_computeDividedDifference(double,double):n => n++
AOIS_556:219:double_computeDividedDifference(double,double):n => n--
AOIS_557:220:double_computeDividedDifference(double,double):j => ++j
AOIS_558:220:double_computeDividedDifference(double,double):j => --j
AOIS_559:220:double_computeDividedDifference(double,double):j => j++
AOIS_560:220:double_computeDividedDifference(double,double):j => j--
AOIS_561:220:double_computeDividedDifference(double,double):n => ++n
AOIS_562:220:double_computeDividedDifference(double,double):n => --n
AOIS_563:220:double_computeDividedDifference(double,double):n => n++
AOIS_564:220:double_computeDividedDifference(double,double):n => n--
AOIS_565:220:double_computeDividedDifference(double,double):i => ++i
AOIS_566:220:double_computeDividedDifference(double,double):i => --i
AOIS_567:220:double_computeDividedDifference(double,double):i => i++
AOIS_568:220:double_computeDividedDifference(double,double):i => i--
AOIS_569:221:double_computeDividedDifference(double,double):j => ++j
AOIS_570:221:double_computeDividedDifference(double,double):j => --j
AOIS_571:221:double_computeDividedDifference(double,double):j => j++
AOIS_572:221:double_computeDividedDifference(double,double):j => j--
AOIS_573:221:double_computeDividedDifference(double,double):i => ++i
AOIS_574:221:double_computeDividedDifference(double,double):i => --i
AOIS_575:221:double_computeDividedDifference(double,double):i => i++
AOIS_576:221:double_computeDividedDifference(double,double):i => i--
AOIS_577:221:double_computeDividedDifference(double,double):j => j++
AOIS_578:221:double_computeDividedDifference(double,double):j => j--
AOIS_579:222:double_computeDividedDifference(double,double):j => ++j
AOIS_580:222:double_computeDividedDifference(double,double):j => --j
AOIS_581:222:double_computeDividedDifference(double,double):j => j++
AOIS_582:222:double_computeDividedDifference(double,double):j => j--
AOIS_583:222:double_computeDividedDifference(double,double):j => j++
AOIS_584:222:double_computeDividedDifference(double,double):j => j--
AOIS_585:222:double_computeDividedDifference(double,double):denominator => denominator++
AOIS_586:222:double_computeDividedDifference(double,double):denominator => denominator--
AOIS_587:232:double_computeCanberraDistance(double,double):i => ++i
AOIS_588:232:double_computeCanberraDistance(double,double):i => --i
AOIS_589:232:double_computeCanberraDistance(double,double):i => i++
AOIS_590:232:double_computeCanberraDistance(double,double):i => i--
AOIS_591:232:double_computeCanberraDistance(double,double):a.length => ++a.length
AOIS_592:232:double_computeCanberraDistance(double,double):a.length => --a.length
AOIS_593:232:double_computeCanberraDistance(double,double):a.length => a.length++
AOIS_594:232:double_computeCanberraDistance(double,double):a.length => a.length--
AOIS_595:233:double_computeCanberraDistance(double,double):i => ++i
AOIS_596:233:double_computeCanberraDistance(double,double):i => --i
AOIS_597:233:double_computeCanberraDistance(double,double):i => i++
AOIS_598:233:double_computeCanberraDistance(double,double):i => i--
AOIS_599:233:double_computeCanberraDistance(double,double):i => ++i
AOIS_600:233:double_computeCanberraDistance(double,double):i => --i
AOIS_601:233:double_computeCanberraDistance(double,double):i => i++
AOIS_602:233:double_computeCanberraDistance(double,double):i => i--
AOIS_603:234:double_computeCanberraDistance(double,double):i => ++i
AOIS_604:234:double_computeCanberraDistance(double,double):i => --i
AOIS_605:234:double_computeCanberraDistance(double,double):i => i++
AOIS_606:234:double_computeCanberraDistance(double,double):i => i--
AOIS_607:234:double_computeCanberraDistance(double,double):i => ++i
AOIS_608:234:double_computeCanberraDistance(double,double):i => --i
AOIS_609:234:double_computeCanberraDistance(double,double):i => i++
AOIS_610:234:double_computeCanberraDistance(double,double):i => i--
AOIS_611:235:double_computeCanberraDistance(double,double):num => ++num
AOIS_612:235:double_computeCanberraDistance(double,double):num => --num
AOIS_613:235:double_computeCanberraDistance(double,double):num => num++
AOIS_614:235:double_computeCanberraDistance(double,double):num => num--
AOIS_615:235:double_computeCanberraDistance(double,double):denom => ++denom
AOIS_616:235:double_computeCanberraDistance(double,double):denom => --denom
AOIS_617:235:double_computeCanberraDistance(double,double):denom => denom++
AOIS_618:235:double_computeCanberraDistance(double,double):denom => denom--
AOIS_619:235:double_computeCanberraDistance(double,double):num => ++num
AOIS_620:235:double_computeCanberraDistance(double,double):num => --num
AOIS_621:235:double_computeCanberraDistance(double,double):num => num++
AOIS_622:235:double_computeCanberraDistance(double,double):num => num--
AOIS_623:235:double_computeCanberraDistance(double,double):denom => ++denom
AOIS_624:235:double_computeCanberraDistance(double,double):denom => --denom
AOIS_625:235:double_computeCanberraDistance(double,double):denom => denom++
AOIS_626:235:double_computeCanberraDistance(double,double):denom => denom--
AOIS_627:237:double_computeCanberraDistance(double,double):sum => sum++
AOIS_628:237:double_computeCanberraDistance(double,double):sum => sum--
AOIS_629:242:double_evaluateHoners(double,double):coefficients.length => coefficients.length++
AOIS_630:242:double_evaluateHoners(double,double):coefficients.length => coefficients.length--
AOIS_631:243:double_evaluateHoners(double,double):n => ++n
AOIS_632:243:double_evaluateHoners(double,double):n => --n
AOIS_633:243:double_evaluateHoners(double,double):n => n++
AOIS_634:243:double_evaluateHoners(double,double):n => n--
AOIS_635:244:double_evaluateHoners(double,double):j => ++j
AOIS_636:244:double_evaluateHoners(double,double):j => --j
AOIS_637:244:double_evaluateHoners(double,double):j => j++
AOIS_638:244:double_evaluateHoners(double,double):j => j--
AOIS_639:245:double_evaluateHoners(double,double):argument => ++argument
AOIS_640:245:double_evaluateHoners(double,double):argument => --argument
AOIS_641:245:double_evaluateHoners(double,double):argument => argument++
AOIS_642:245:double_evaluateHoners(double,double):argument => argument--
AOIS_643:245:double_evaluateHoners(double,double):result => ++result
AOIS_644:245:double_evaluateHoners(double,double):result => --result
AOIS_645:245:double_evaluateHoners(double,double):result => result++
AOIS_646:245:double_evaluateHoners(double,double):result => result--
AOIS_647:245:double_evaluateHoners(double,double):j => j++
AOIS_648:245:double_evaluateHoners(double,double):j => j--
AOIS_649:247:double_evaluateHoners(double,double):result => result++
AOIS_650:247:double_evaluateHoners(double,double):result => result--
AOIS_651:253:double_evaluateInternal(double,double,double):x.length => x.length++
AOIS_652:253:double_evaluateInternal(double,double,double):x.length => x.length--
AOIS_653:254:double_evaluateInternal(double,double,double):n => n++
AOIS_654:254:double_evaluateInternal(double,double,double):n => n--
AOIS_655:255:double_evaluateInternal(double,double,double):n => n++
AOIS_656:255:double_evaluateInternal(double,double,double):n => n--
AOIS_657:256:double_evaluateInternal(double,double,double):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY++
AOIS_658:256:double_evaluateInternal(double,double,double):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY--
AOIS_659:257:double_evaluateInternal(double,double,double):i => ++i
AOIS_660:257:double_evaluateInternal(double,double,double):i => --i
AOIS_661:257:double_evaluateInternal(double,double,double):i => i++
AOIS_662:257:double_evaluateInternal(double,double,double):i => i--
AOIS_663:257:double_evaluateInternal(double,double,double):n => ++n
AOIS_664:257:double_evaluateInternal(double,double,double):n => --n
AOIS_665:257:double_evaluateInternal(double,double,double):n => n++
AOIS_666:257:double_evaluateInternal(double,double,double):n => n--
AOIS_667:258:double_evaluateInternal(double,double,double):i => ++i
AOIS_668:258:double_evaluateInternal(double,double,double):i => --i
AOIS_669:258:double_evaluateInternal(double,double,double):i => i++
AOIS_670:258:double_evaluateInternal(double,double,double):i => i--
AOIS_671:259:double_evaluateInternal(double,double,double):i => ++i
AOIS_672:259:double_evaluateInternal(double,double,double):i => --i
AOIS_673:259:double_evaluateInternal(double,double,double):i => i++
AOIS_674:259:double_evaluateInternal(double,double,double):i => i--
AOIS_675:260:double_evaluateInternal(double,double,double):z => ++z
AOIS_676:260:double_evaluateInternal(double,double,double):z => --z
AOIS_677:260:double_evaluateInternal(double,double,double):z => z++
AOIS_678:260:double_evaluateInternal(double,double,double):z => z--
AOIS_679:260:double_evaluateInternal(double,double,double):i => ++i
AOIS_680:260:double_evaluateInternal(double,double,double):i => --i
AOIS_681:260:double_evaluateInternal(double,double,double):i => i++
AOIS_682:260:double_evaluateInternal(double,double,double):i => i--
AOIS_683:261:double_evaluateInternal(double,double,double):dist => ++dist
AOIS_684:261:double_evaluateInternal(double,double,double):dist => --dist
AOIS_685:261:double_evaluateInternal(double,double,double):dist => dist++
AOIS_686:261:double_evaluateInternal(double,double,double):dist => dist--
AOIS_687:261:double_evaluateInternal(double,double,double):min_dist => ++min_dist
AOIS_688:261:double_evaluateInternal(double,double,double):min_dist => --min_dist
AOIS_689:261:double_evaluateInternal(double,double,double):min_dist => min_dist++
AOIS_690:261:double_evaluateInternal(double,double,double):min_dist => min_dist--
AOIS_691:262:double_evaluateInternal(double,double,double):i => ++i
AOIS_692:262:double_evaluateInternal(double,double,double):i => --i
AOIS_693:262:double_evaluateInternal(double,double,double):i => i++
AOIS_694:262:double_evaluateInternal(double,double,double):i => i--
AOIS_695:263:double_evaluateInternal(double,double,double):dist => ++dist
AOIS_696:263:double_evaluateInternal(double,double,double):dist => --dist
AOIS_697:263:double_evaluateInternal(double,double,double):dist => dist++
AOIS_698:263:double_evaluateInternal(double,double,double):dist => dist--
AOIS_699:266:double_evaluateInternal(double,double,double):nearest => nearest++
AOIS_700:266:double_evaluateInternal(double,double,double):nearest => nearest--
AOIS_701:267:double_evaluateInternal(double,double,double):i => ++i
AOIS_702:267:double_evaluateInternal(double,double,double):i => --i
AOIS_703:267:double_evaluateInternal(double,double,double):i => i++
AOIS_704:267:double_evaluateInternal(double,double,double):i => i--
AOIS_705:267:double_evaluateInternal(double,double,double):n => ++n
AOIS_706:267:double_evaluateInternal(double,double,double):n => --n
AOIS_707:267:double_evaluateInternal(double,double,double):n => n++
AOIS_708:267:double_evaluateInternal(double,double,double):n => n--
AOIS_709:268:double_evaluateInternal(double,double,double):j => ++j
AOIS_710:268:double_evaluateInternal(double,double,double):j => --j
AOIS_711:268:double_evaluateInternal(double,double,double):j => j++
AOIS_712:268:double_evaluateInternal(double,double,double):j => j--
AOIS_713:268:double_evaluateInternal(double,double,double):n => ++n
AOIS_714:268:double_evaluateInternal(double,double,double):n => --n
AOIS_715:268:double_evaluateInternal(double,double,double):n => n++
AOIS_716:268:double_evaluateInternal(double,double,double):n => n--
AOIS_717:268:double_evaluateInternal(double,double,double):i => ++i
AOIS_718:268:double_evaluateInternal(double,double,double):i => --i
AOIS_719:268:double_evaluateInternal(double,double,double):i => i++
AOIS_720:268:double_evaluateInternal(double,double,double):i => i--
AOIS_721:269:double_evaluateInternal(double,double,double):j => ++j
AOIS_722:269:double_evaluateInternal(double,double,double):j => --j
AOIS_723:269:double_evaluateInternal(double,double,double):j => j++
AOIS_724:269:double_evaluateInternal(double,double,double):j => j--
AOIS_725:269:double_evaluateInternal(double,double,double):z => ++z
AOIS_726:269:double_evaluateInternal(double,double,double):z => --z
AOIS_727:269:double_evaluateInternal(double,double,double):z => z++
AOIS_728:269:double_evaluateInternal(double,double,double):z => z--
AOIS_729:270:double_evaluateInternal(double,double,double):i => ++i
AOIS_730:270:double_evaluateInternal(double,double,double):i => --i
AOIS_731:270:double_evaluateInternal(double,double,double):i => i++
AOIS_732:270:double_evaluateInternal(double,double,double):i => i--
AOIS_733:270:double_evaluateInternal(double,double,double):j => ++j
AOIS_734:270:double_evaluateInternal(double,double,double):j => --j
AOIS_735:270:double_evaluateInternal(double,double,double):j => j++
AOIS_736:270:double_evaluateInternal(double,double,double):j => j--
AOIS_737:270:double_evaluateInternal(double,double,double):z => z++
AOIS_738:270:double_evaluateInternal(double,double,double):z => z--
AOIS_739:271:double_evaluateInternal(double,double,double):j => ++j
AOIS_740:271:double_evaluateInternal(double,double,double):j => --j
AOIS_741:271:double_evaluateInternal(double,double,double):j => j++
AOIS_742:271:double_evaluateInternal(double,double,double):j => j--
AOIS_743:271:double_evaluateInternal(double,double,double):i => ++i
AOIS_744:271:double_evaluateInternal(double,double,double):i => --i
AOIS_745:271:double_evaluateInternal(double,double,double):i => i++
AOIS_746:271:double_evaluateInternal(double,double,double):i => i--
AOIS_747:271:double_evaluateInternal(double,double,double):j => ++j
AOIS_748:271:double_evaluateInternal(double,double,double):j => --j
AOIS_749:271:double_evaluateInternal(double,double,double):j => j++
AOIS_750:271:double_evaluateInternal(double,double,double):j => j--
AOIS_751:272:double_evaluateInternal(double,double,double):j => ++j
AOIS_752:272:double_evaluateInternal(double,double,double):j => --j
AOIS_753:272:double_evaluateInternal(double,double,double):j => j++
AOIS_754:272:double_evaluateInternal(double,double,double):j => j--
AOIS_755:272:double_evaluateInternal(double,double,double):j => j++
AOIS_756:272:double_evaluateInternal(double,double,double):j => j--
AOIS_757:272:double_evaluateInternal(double,double,double):divider => divider++
AOIS_758:272:double_evaluateInternal(double,double,double):divider => divider--
AOIS_759:273:double_evaluateInternal(double,double,double):tc => ++tc
AOIS_760:273:double_evaluateInternal(double,double,double):tc => --tc
AOIS_761:273:double_evaluateInternal(double,double,double):tc => tc++
AOIS_762:273:double_evaluateInternal(double,double,double):tc => tc--
AOIS_763:273:double_evaluateInternal(double,double,double):w => ++w
AOIS_764:273:double_evaluateInternal(double,double,double):w => --w
AOIS_765:273:double_evaluateInternal(double,double,double):w => w++
AOIS_766:273:double_evaluateInternal(double,double,double):w => w--
AOIS_767:274:double_evaluateInternal(double,double,double):td => ++td
AOIS_768:274:double_evaluateInternal(double,double,double):td => --td
AOIS_769:274:double_evaluateInternal(double,double,double):td => td++
AOIS_770:274:double_evaluateInternal(double,double,double):td => td--
AOIS_771:274:double_evaluateInternal(double,double,double):w => ++w
AOIS_772:274:double_evaluateInternal(double,double,double):w => --w
AOIS_773:274:double_evaluateInternal(double,double,double):w => w++
AOIS_774:274:double_evaluateInternal(double,double,double):w => w--
AOIS_775:276:double_evaluateInternal(double,double,double):nearest => ++nearest
AOIS_776:276:double_evaluateInternal(double,double,double):nearest => --nearest
AOIS_777:276:double_evaluateInternal(double,double,double):nearest => nearest++
AOIS_778:276:double_evaluateInternal(double,double,double):nearest => nearest--
AOIS_779:276:double_evaluateInternal(double,double,double):n => ++n
AOIS_780:276:double_evaluateInternal(double,double,double):n => --n
AOIS_781:276:double_evaluateInternal(double,double,double):n => n++
AOIS_782:276:double_evaluateInternal(double,double,double):n => n--
AOIS_783:276:double_evaluateInternal(double,double,double):i => ++i
AOIS_784:276:double_evaluateInternal(double,double,double):i => --i
AOIS_785:276:double_evaluateInternal(double,double,double):i => i++
AOIS_786:276:double_evaluateInternal(double,double,double):i => i--
AOIS_787:277:double_evaluateInternal(double,double,double):nearest => ++nearest
AOIS_788:277:double_evaluateInternal(double,double,double):nearest => --nearest
AOIS_789:277:double_evaluateInternal(double,double,double):nearest => nearest++
AOIS_790:277:double_evaluateInternal(double,double,double):nearest => nearest--
AOIS_791:280:double_evaluateInternal(double,double,double):nearest => ++nearest
AOIS_792:280:double_evaluateInternal(double,double,double):nearest => --nearest
AOIS_793:280:double_evaluateInternal(double,double,double):nearest => nearest++
AOIS_794:280:double_evaluateInternal(double,double,double):nearest => nearest--
AOIS_795:283:double_evaluateInternal(double,double,double):value => value++
AOIS_796:283:double_evaluateInternal(double,double,double):value => value--
AOIS_797:288:double_evaluateNewton(double,double,double):c.length => ++c.length
AOIS_798:288:double_evaluateNewton(double,double,double):c.length => --c.length
AOIS_799:288:double_evaluateNewton(double,double,double):c.length => c.length++
AOIS_800:288:double_evaluateNewton(double,double,double):c.length => c.length--
AOIS_801:289:double_evaluateNewton(double,double,double):n => n++
AOIS_802:289:double_evaluateNewton(double,double,double):n => n--
AOIS_803:290:double_evaluateNewton(double,double,double):i => ++i
AOIS_804:290:double_evaluateNewton(double,double,double):i => --i
AOIS_805:290:double_evaluateNewton(double,double,double):i => i++
AOIS_806:290:double_evaluateNewton(double,double,double):i => i--
AOIS_807:291:double_evaluateNewton(double,double,double):i => ++i
AOIS_808:291:double_evaluateNewton(double,double,double):i => --i
AOIS_809:291:double_evaluateNewton(double,double,double):i => i++
AOIS_810:291:double_evaluateNewton(double,double,double):i => i--
AOIS_811:291:double_evaluateNewton(double,double,double):z => ++z
AOIS_812:291:double_evaluateNewton(double,double,double):z => --z
AOIS_813:291:double_evaluateNewton(double,double,double):z => z++
AOIS_814:291:double_evaluateNewton(double,double,double):z => z--
AOIS_815:291:double_evaluateNewton(double,double,double):i => ++i
AOIS_816:291:double_evaluateNewton(double,double,double):i => --i
AOIS_817:291:double_evaluateNewton(double,double,double):i => i++
AOIS_818:291:double_evaluateNewton(double,double,double):i => i--
AOIS_819:291:double_evaluateNewton(double,double,double):value => value++
AOIS_820:291:double_evaluateNewton(double,double,double):value => value--
AOIS_821:293:double_evaluateNewton(double,double,double):value => value++
AOIS_822:293:double_evaluateNewton(double,double,double):value => value--
AOIS_823:299:double_meanDifference(double,double):i => ++i
AOIS_824:299:double_meanDifference(double,double):i => --i
AOIS_825:299:double_meanDifference(double,double):i => i++
AOIS_826:299:double_meanDifference(double,double):i => i--
AOIS_827:299:double_meanDifference(double,double):sample1.length => ++sample1.length
AOIS_828:299:double_meanDifference(double,double):sample1.length => --sample1.length
AOIS_829:299:double_meanDifference(double,double):sample1.length => sample1.length++
AOIS_830:299:double_meanDifference(double,double):sample1.length => sample1.length--
AOIS_831:300:double_meanDifference(double,double):i => ++i
AOIS_832:300:double_meanDifference(double,double):i => --i
AOIS_833:300:double_meanDifference(double,double):i => i++
AOIS_834:300:double_meanDifference(double,double):i => i--
AOIS_835:300:double_meanDifference(double,double):i => ++i
AOIS_836:300:double_meanDifference(double,double):i => --i
AOIS_837:300:double_meanDifference(double,double):i => i++
AOIS_838:300:double_meanDifference(double,double):i => i--
AOIS_839:302:double_meanDifference(double,double):sumDifference => ++sumDifference
AOIS_840:302:double_meanDifference(double,double):sumDifference => --sumDifference
AOIS_841:302:double_meanDifference(double,double):sumDifference => sumDifference++
AOIS_842:302:double_meanDifference(double,double):sumDifference => sumDifference--
AOIS_843:302:double_meanDifference(double,double):sample1.length => ++sample1.length
AOIS_844:302:double_meanDifference(double,double):sample1.length => --sample1.length
AOIS_845:302:double_meanDifference(double,double):sample1.length => sample1.length++
AOIS_846:302:double_meanDifference(double,double):sample1.length => sample1.length--
AOIS_847:310:double_varianceDifference(double,double):sample1.length => sample1.length++
AOIS_848:310:double_varianceDifference(double,double):sample1.length => sample1.length--
AOIS_849:312:double_varianceDifference(double,double):i => ++i
AOIS_850:312:double_varianceDifference(double,double):i => --i
AOIS_851:312:double_varianceDifference(double,double):i => i++
AOIS_852:312:double_varianceDifference(double,double):i => i--
AOIS_853:312:double_varianceDifference(double,double):n => ++n
AOIS_854:312:double_varianceDifference(double,double):n => --n
AOIS_855:312:double_varianceDifference(double,double):n => n++
AOIS_856:312:double_varianceDifference(double,double):n => n--
AOIS_857:313:double_varianceDifference(double,double):i => ++i
AOIS_858:313:double_varianceDifference(double,double):i => --i
AOIS_859:313:double_varianceDifference(double,double):i => i++
AOIS_860:313:double_varianceDifference(double,double):i => i--
AOIS_861:313:double_varianceDifference(double,double):i => ++i
AOIS_862:313:double_varianceDifference(double,double):i => --i
AOIS_863:313:double_varianceDifference(double,double):i => i++
AOIS_864:313:double_varianceDifference(double,double):i => i--
AOIS_865:315:double_varianceDifference(double,double):sumDifference => ++sumDifference
AOIS_866:315:double_varianceDifference(double,double):sumDifference => --sumDifference
AOIS_867:315:double_varianceDifference(double,double):sumDifference => sumDifference++
AOIS_868:315:double_varianceDifference(double,double):sumDifference => sumDifference--
AOIS_869:315:double_varianceDifference(double,double):n => ++n
AOIS_870:315:double_varianceDifference(double,double):n => --n
AOIS_871:315:double_varianceDifference(double,double):n => n++
AOIS_872:315:double_varianceDifference(double,double):n => n--
AOIS_873:316:double_varianceDifference(double,double):i => ++i
AOIS_874:316:double_varianceDifference(double,double):i => --i
AOIS_875:316:double_varianceDifference(double,double):i => i++
AOIS_876:316:double_varianceDifference(double,double):i => i--
AOIS_877:316:double_varianceDifference(double,double):n => ++n
AOIS_878:316:double_varianceDifference(double,double):n => --n
AOIS_879:316:double_varianceDifference(double,double):n => n++
AOIS_880:316:double_varianceDifference(double,double):n => n--
AOIS_881:317:double_varianceDifference(double,double):i => ++i
AOIS_882:317:double_varianceDifference(double,double):i => --i
AOIS_883:317:double_varianceDifference(double,double):i => i++
AOIS_884:317:double_varianceDifference(double,double):i => i--
AOIS_885:317:double_varianceDifference(double,double):i => ++i
AOIS_886:317:double_varianceDifference(double,double):i => --i
AOIS_887:317:double_varianceDifference(double,double):i => i++
AOIS_888:317:double_varianceDifference(double,double):i => i--
AOIS_889:318:double_varianceDifference(double,double):diff => ++diff
AOIS_890:318:double_varianceDifference(double,double):diff => --diff
AOIS_891:318:double_varianceDifference(double,double):diff => diff++
AOIS_892:318:double_varianceDifference(double,double):diff => diff--
AOIS_893:318:double_varianceDifference(double,double):meanDifference => ++meanDifference
AOIS_894:318:double_varianceDifference(double,double):meanDifference => --meanDifference
AOIS_895:318:double_varianceDifference(double,double):meanDifference => meanDifference++
AOIS_896:318:double_varianceDifference(double,double):meanDifference => meanDifference--
AOIS_897:318:double_varianceDifference(double,double):diff => ++diff
AOIS_898:318:double_varianceDifference(double,double):diff => --diff
AOIS_899:318:double_varianceDifference(double,double):diff => diff++
AOIS_900:318:double_varianceDifference(double,double):diff => diff--
AOIS_901:318:double_varianceDifference(double,double):meanDifference => ++meanDifference
AOIS_902:318:double_varianceDifference(double,double):meanDifference => --meanDifference
AOIS_903:318:double_varianceDifference(double,double):meanDifference => meanDifference++
AOIS_904:318:double_varianceDifference(double,double):meanDifference => meanDifference--
AOIS_905:319:double_varianceDifference(double,double):diff => ++diff
AOIS_906:319:double_varianceDifference(double,double):diff => --diff
AOIS_907:319:double_varianceDifference(double,double):diff => diff++
AOIS_908:319:double_varianceDifference(double,double):diff => diff--
AOIS_909:319:double_varianceDifference(double,double):meanDifference => ++meanDifference
AOIS_910:319:double_varianceDifference(double,double):meanDifference => --meanDifference
AOIS_911:319:double_varianceDifference(double,double):meanDifference => meanDifference++
AOIS_912:319:double_varianceDifference(double,double):meanDifference => meanDifference--
AOIS_913:321:double_varianceDifference(double,double):sum1 => ++sum1
AOIS_914:321:double_varianceDifference(double,double):sum1 => --sum1
AOIS_915:321:double_varianceDifference(double,double):sum1 => sum1++
AOIS_916:321:double_varianceDifference(double,double):sum1 => sum1--
AOIS_917:321:double_varianceDifference(double,double):sum2 => ++sum2
AOIS_918:321:double_varianceDifference(double,double):sum2 => --sum2
AOIS_919:321:double_varianceDifference(double,double):sum2 => sum2++
AOIS_920:321:double_varianceDifference(double,double):sum2 => sum2--
AOIS_921:321:double_varianceDifference(double,double):sum2 => ++sum2
AOIS_922:321:double_varianceDifference(double,double):sum2 => --sum2
AOIS_923:321:double_varianceDifference(double,double):sum2 => sum2++
AOIS_924:321:double_varianceDifference(double,double):sum2 => sum2--
AOIS_925:321:double_varianceDifference(double,double):n => n++
AOIS_926:321:double_varianceDifference(double,double):n => n--
AOIS_927:321:double_varianceDifference(double,double):n => ++n
AOIS_928:321:double_varianceDifference(double,double):n => --n
AOIS_929:321:double_varianceDifference(double,double):n => n++
AOIS_930:321:double_varianceDifference(double,double):n => n--
AOIS_931:329:boolean_equals(double,double):x.length => ++x.length
AOIS_932:329:boolean_equals(double,double):x.length => --x.length
AOIS_933:329:boolean_equals(double,double):x.length => x.length++
AOIS_934:329:boolean_equals(double,double):x.length => x.length--
AOIS_935:329:boolean_equals(double,double):y.length => ++y.length
AOIS_936:329:boolean_equals(double,double):y.length => --y.length
AOIS_937:329:boolean_equals(double,double):y.length => y.length++
AOIS_938:329:boolean_equals(double,double):y.length => y.length--
AOIS_939:332:boolean_equals(double,double):i => ++i
AOIS_940:332:boolean_equals(double,double):i => --i
AOIS_941:332:boolean_equals(double,double):i => i++
AOIS_942:332:boolean_equals(double,double):i => i--
AOIS_943:332:boolean_equals(double,double):x.length => ++x.length
AOIS_944:332:boolean_equals(double,double):x.length => --x.length
AOIS_945:332:boolean_equals(double,double):x.length => x.length++
AOIS_946:332:boolean_equals(double,double):x.length => x.length--
AOIS_947:333:boolean_equals(double,double):i => ++i
AOIS_948:333:boolean_equals(double,double):i => --i
AOIS_949:333:boolean_equals(double,double):i => i++
AOIS_950:333:boolean_equals(double,double):i => i--
AOIS_951:333:boolean_equals(double,double):i => ++i
AOIS_952:333:boolean_equals(double,double):i => --i
AOIS_953:333:boolean_equals(double,double):i => i++
AOIS_954:333:boolean_equals(double,double):i => i--
AOIS_955:342:boolean_checkNonNegative(double):i => ++i
AOIS_956:342:boolean_checkNonNegative(double):i => --i
AOIS_957:342:boolean_checkNonNegative(double):i => i++
AOIS_958:342:boolean_checkNonNegative(double):i => i--
AOIS_959:342:boolean_checkNonNegative(double):in.length => ++in.length
AOIS_960:342:boolean_checkNonNegative(double):in.length => --in.length
AOIS_961:342:boolean_checkNonNegative(double):in.length => in.length++
AOIS_962:342:boolean_checkNonNegative(double):in.length => in.length--
AOIS_963:343:boolean_checkNonNegative(double):i => ++i
AOIS_964:343:boolean_checkNonNegative(double):i => --i
AOIS_965:343:boolean_checkNonNegative(double):i => i++
AOIS_966:343:boolean_checkNonNegative(double):i => i--
AOIS_967:352:boolean_checkPositive(double):i => ++i
AOIS_968:352:boolean_checkPositive(double):i => --i
AOIS_969:352:boolean_checkPositive(double):i => i++
AOIS_970:352:boolean_checkPositive(double):i => i--
AOIS_971:352:boolean_checkPositive(double):in.length => ++in.length
AOIS_972:352:boolean_checkPositive(double):in.length => --in.length
AOIS_973:352:boolean_checkPositive(double):in.length => in.length++
AOIS_974:352:boolean_checkPositive(double):in.length => in.length--
AOIS_975:353:boolean_checkPositive(double):i => ++i
AOIS_976:353:boolean_checkPositive(double):i => --i
AOIS_977:353:boolean_checkPositive(double):i => i++
AOIS_978:353:boolean_checkPositive(double):i => i--
AOIS_979:364:double_chiSquare(double,double):i => ++i
AOIS_980:364:double_chiSquare(double,double):i => --i
AOIS_981:364:double_chiSquare(double,double):i => i++
AOIS_982:364:double_chiSquare(double,double):i => i--
AOIS_983:364:double_chiSquare(double,double):observed.length => ++observed.length
AOIS_984:364:double_chiSquare(double,double):observed.length => --observed.length
AOIS_985:364:double_chiSquare(double,double):observed.length => observed.length++
AOIS_986:364:double_chiSquare(double,double):observed.length => observed.length--
AOIS_987:365:double_chiSquare(double,double):i => ++i
AOIS_988:365:double_chiSquare(double,double):i => --i
AOIS_989:365:double_chiSquare(double,double):i => i++
AOIS_990:365:double_chiSquare(double,double):i => i--
AOIS_991:366:double_chiSquare(double,double):i => ++i
AOIS_992:366:double_chiSquare(double,double):i => --i
AOIS_993:366:double_chiSquare(double,double):i => i++
AOIS_994:366:double_chiSquare(double,double):i => i--
AOIS_995:370:double_chiSquare(double,double):sumExpected => ++sumExpected
AOIS_996:370:double_chiSquare(double,double):sumExpected => --sumExpected
AOIS_997:370:double_chiSquare(double,double):sumExpected => sumExpected++
AOIS_998:370:double_chiSquare(double,double):sumExpected => sumExpected--
AOIS_999:370:double_chiSquare(double,double):sumObserved => ++sumObserved
AOIS_1000:370:double_chiSquare(double,double):sumObserved => --sumObserved
AOIS_1001:370:double_chiSquare(double,double):sumObserved => sumObserved++
AOIS_1002:370:double_chiSquare(double,double):sumObserved => sumObserved--
AOIS_1003:371:double_chiSquare(double,double):sumObserved => ++sumObserved
AOIS_1004:371:double_chiSquare(double,double):sumObserved => --sumObserved
AOIS_1005:371:double_chiSquare(double,double):sumObserved => sumObserved++
AOIS_1006:371:double_chiSquare(double,double):sumObserved => sumObserved--
AOIS_1007:371:double_chiSquare(double,double):sumExpected => ++sumExpected
AOIS_1008:371:double_chiSquare(double,double):sumExpected => --sumExpected
AOIS_1009:371:double_chiSquare(double,double):sumExpected => sumExpected++
AOIS_1010:371:double_chiSquare(double,double):sumExpected => sumExpected--
AOIS_1011:375:double_chiSquare(double,double):i => ++i
AOIS_1012:375:double_chiSquare(double,double):i => --i
AOIS_1013:375:double_chiSquare(double,double):i => i++
AOIS_1014:375:double_chiSquare(double,double):i => i--
AOIS_1015:375:double_chiSquare(double,double):observed.length => ++observed.length
AOIS_1016:375:double_chiSquare(double,double):observed.length => --observed.length
AOIS_1017:375:double_chiSquare(double,double):observed.length => observed.length++
AOIS_1018:375:double_chiSquare(double,double):observed.length => observed.length--
AOIS_1019:377:double_chiSquare(double,double):i => ++i
AOIS_1020:377:double_chiSquare(double,double):i => --i
AOIS_1021:377:double_chiSquare(double,double):i => i++
AOIS_1022:377:double_chiSquare(double,double):i => i--
AOIS_1023:377:double_chiSquare(double,double):ratio => ++ratio
AOIS_1024:377:double_chiSquare(double,double):ratio => --ratio
AOIS_1025:377:double_chiSquare(double,double):ratio => ratio++
AOIS_1026:377:double_chiSquare(double,double):ratio => ratio--
AOIS_1027:377:double_chiSquare(double,double):i => ++i
AOIS_1028:377:double_chiSquare(double,double):i => --i
AOIS_1029:377:double_chiSquare(double,double):i => i++
AOIS_1030:377:double_chiSquare(double,double):i => i--
AOIS_1031:378:double_chiSquare(double,double):dev => ++dev
AOIS_1032:378:double_chiSquare(double,double):dev => --dev
AOIS_1033:378:double_chiSquare(double,double):dev => dev++
AOIS_1034:378:double_chiSquare(double,double):dev => dev--
AOIS_1035:378:double_chiSquare(double,double):dev => ++dev
AOIS_1036:378:double_chiSquare(double,double):dev => --dev
AOIS_1037:378:double_chiSquare(double,double):dev => dev++
AOIS_1038:378:double_chiSquare(double,double):dev => dev--
AOIS_1039:378:double_chiSquare(double,double):ratio => ++ratio
AOIS_1040:378:double_chiSquare(double,double):ratio => --ratio
AOIS_1041:378:double_chiSquare(double,double):ratio => ratio++
AOIS_1042:378:double_chiSquare(double,double):ratio => ratio--
AOIS_1043:378:double_chiSquare(double,double):i => ++i
AOIS_1044:378:double_chiSquare(double,double):i => --i
AOIS_1045:378:double_chiSquare(double,double):i => i++
AOIS_1046:378:double_chiSquare(double,double):i => i--
AOIS_1047:380:double_chiSquare(double,double):i => ++i
AOIS_1048:380:double_chiSquare(double,double):i => --i
AOIS_1049:380:double_chiSquare(double,double):i => i++
AOIS_1050:380:double_chiSquare(double,double):i => i--
AOIS_1051:380:double_chiSquare(double,double):i => ++i
AOIS_1052:380:double_chiSquare(double,double):i => --i
AOIS_1053:380:double_chiSquare(double,double):i => i++
AOIS_1054:380:double_chiSquare(double,double):i => i--
AOIS_1055:381:double_chiSquare(double,double):dev => ++dev
AOIS_1056:381:double_chiSquare(double,double):dev => --dev
AOIS_1057:381:double_chiSquare(double,double):dev => dev++
AOIS_1058:381:double_chiSquare(double,double):dev => dev--
AOIS_1059:381:double_chiSquare(double,double):dev => ++dev
AOIS_1060:381:double_chiSquare(double,double):dev => --dev
AOIS_1061:381:double_chiSquare(double,double):dev => dev++
AOIS_1062:381:double_chiSquare(double,double):dev => dev--
AOIS_1063:381:double_chiSquare(double,double):i => i++
AOIS_1064:381:double_chiSquare(double,double):i => i--
AOIS_1065:384:double_chiSquare(double,double):sumSq => sumSq++
AOIS_1066:384:double_chiSquare(double,double):sumSq => sumSq--
AOIS_1067:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => ++values.length
AOIS_1068:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => --values.length
AOIS_1069:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => values.length++
AOIS_1070:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => values.length--
AOIS_1071:390:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):Double.NaN => Double.NaN++
AOIS_1072:390:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):Double.NaN => Double.NaN--
AOIS_1073:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => ++values.length
AOIS_1074:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => --values.length
AOIS_1075:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => values.length++
AOIS_1076:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => values.length--
AOIS_1077:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ++i
AOIS_1078:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => --i
AOIS_1079:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => i++
AOIS_1080:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => i--
AOIS_1081:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => ++length
AOIS_1082:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => --length
AOIS_1083:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => length++
AOIS_1084:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => length--
AOIS_1085:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ++i
AOIS_1086:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => --i
AOIS_1087:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => i++
AOIS_1088:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => i--
AOIS_1089:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => ++cutoff
AOIS_1090:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => --cutoff
AOIS_1091:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => cutoff++
AOIS_1092:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => cutoff--
AOIS_1093:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ++i
AOIS_1094:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => --i
AOIS_1095:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => i++
AOIS_1096:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => i--
AOIS_1097:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => ++cutoff
AOIS_1098:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => --cutoff
AOIS_1099:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => cutoff++
AOIS_1100:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => cutoff--
AOIS_1101:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => ++dev
AOIS_1102:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => --dev
AOIS_1103:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => dev++
AOIS_1104:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => dev--
AOIS_1105:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => ++dev
AOIS_1106:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => --dev
AOIS_1107:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => dev++
AOIS_1108:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => dev--
AOIS_1109:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => ++sumsq
AOIS_1110:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => --sumsq
AOIS_1111:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => sumsq++
AOIS_1112:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => sumsq--
AOIS_1113:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => ++length
AOIS_1114:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => --length
AOIS_1115:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => length++
AOIS_1116:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => length--
AOIS_1117:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => ++sumsq
AOIS_1118:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => --sumsq
AOIS_1119:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => sumsq++
AOIS_1120:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => sumsq--
AOIS_1121:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => ++length
AOIS_1122:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => --length
AOIS_1123:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => length++
AOIS_1124:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => length--
AOIS_1125:415:int_partition(double,int,int,int):pivot => pivot++
AOIS_1126:415:int_partition(double,int,int,int):pivot => pivot--
AOIS_1127:416:int_partition(double,int,int,int):begin => ++begin
AOIS_1128:416:int_partition(double,int,int,int):begin => --begin
AOIS_1129:416:int_partition(double,int,int,int):begin => begin++
AOIS_1130:416:int_partition(double,int,int,int):begin => begin--
AOIS_1131:417:int_partition(double,int,int,int):begin => ++begin
AOIS_1132:417:int_partition(double,int,int,int):begin => --begin
AOIS_1133:417:int_partition(double,int,int,int):begin => begin++
AOIS_1134:417:int_partition(double,int,int,int):begin => begin--
AOIS_1135:418:int_partition(double,int,int,int):end => ++end
AOIS_1136:418:int_partition(double,int,int,int):end => --end
AOIS_1137:418:int_partition(double,int,int,int):end => end++
AOIS_1138:418:int_partition(double,int,int,int):end => end--
AOIS_1139:419:int_partition(double,int,int,int):i => ++i
AOIS_1140:419:int_partition(double,int,int,int):i => --i
AOIS_1141:419:int_partition(double,int,int,int):i => i++
AOIS_1142:419:int_partition(double,int,int,int):i => i--
AOIS_1143:419:int_partition(double,int,int,int):j => ++j
AOIS_1144:419:int_partition(double,int,int,int):j => --j
AOIS_1145:419:int_partition(double,int,int,int):j => j++
AOIS_1146:419:int_partition(double,int,int,int):j => j--
AOIS_1147:420:int_partition(double,int,int,int):i => ++i
AOIS_1148:420:int_partition(double,int,int,int):i => --i
AOIS_1149:420:int_partition(double,int,int,int):i => i++
AOIS_1150:420:int_partition(double,int,int,int):i => i--
AOIS_1151:420:int_partition(double,int,int,int):j => ++j
AOIS_1152:420:int_partition(double,int,int,int):j => --j
AOIS_1153:420:int_partition(double,int,int,int):j => j++
AOIS_1154:420:int_partition(double,int,int,int):j => j--
AOIS_1155:420:int_partition(double,int,int,int):j => ++j
AOIS_1156:420:int_partition(double,int,int,int):j => --j
AOIS_1157:420:int_partition(double,int,int,int):j => j++
AOIS_1158:420:int_partition(double,int,int,int):j => j--
AOIS_1159:420:int_partition(double,int,int,int):value => ++value
AOIS_1160:420:int_partition(double,int,int,int):value => --value
AOIS_1161:420:int_partition(double,int,int,int):value => value++
AOIS_1162:420:int_partition(double,int,int,int):value => value--
AOIS_1163:423:int_partition(double,int,int,int):i => ++i
AOIS_1164:423:int_partition(double,int,int,int):i => --i
AOIS_1165:423:int_partition(double,int,int,int):i => i++
AOIS_1166:423:int_partition(double,int,int,int):i => i--
AOIS_1167:423:int_partition(double,int,int,int):j => ++j
AOIS_1168:423:int_partition(double,int,int,int):j => --j
AOIS_1169:423:int_partition(double,int,int,int):j => j++
AOIS_1170:423:int_partition(double,int,int,int):j => j--
AOIS_1171:423:int_partition(double,int,int,int):i => ++i
AOIS_1172:423:int_partition(double,int,int,int):i => --i
AOIS_1173:423:int_partition(double,int,int,int):i => i++
AOIS_1174:423:int_partition(double,int,int,int):i => i--
AOIS_1175:423:int_partition(double,int,int,int):value => ++value
AOIS_1176:423:int_partition(double,int,int,int):value => --value
AOIS_1177:423:int_partition(double,int,int,int):value => value++
AOIS_1178:423:int_partition(double,int,int,int):value => value--
AOIS_1179:426:int_partition(double,int,int,int):i => ++i
AOIS_1180:426:int_partition(double,int,int,int):i => --i
AOIS_1181:426:int_partition(double,int,int,int):i => i++
AOIS_1182:426:int_partition(double,int,int,int):i => i--
AOIS_1183:426:int_partition(double,int,int,int):j => ++j
AOIS_1184:426:int_partition(double,int,int,int):j => --j
AOIS_1185:426:int_partition(double,int,int,int):j => j++
AOIS_1186:426:int_partition(double,int,int,int):j => j--
AOIS_1187:427:int_partition(double,int,int,int):i => i++
AOIS_1188:427:int_partition(double,int,int,int):i => i--
AOIS_1189:428:int_partition(double,int,int,int):j => ++j
AOIS_1190:428:int_partition(double,int,int,int):j => --j
AOIS_1191:428:int_partition(double,int,int,int):j => j++
AOIS_1192:428:int_partition(double,int,int,int):j => j--
AOIS_1193:429:int_partition(double,int,int,int):tmp => ++tmp
AOIS_1194:429:int_partition(double,int,int,int):tmp => --tmp
AOIS_1195:429:int_partition(double,int,int,int):tmp => tmp++
AOIS_1196:429:int_partition(double,int,int,int):tmp => tmp--
AOIS_1197:432:int_partition(double,int,int,int):i => ++i
AOIS_1198:432:int_partition(double,int,int,int):i => --i
AOIS_1199:432:int_partition(double,int,int,int):i => i++
AOIS_1200:432:int_partition(double,int,int,int):i => i--
AOIS_1201:432:int_partition(double,int,int,int):end => ++end
AOIS_1202:432:int_partition(double,int,int,int):end => --end
AOIS_1203:432:int_partition(double,int,int,int):end => end++
AOIS_1204:432:int_partition(double,int,int,int):end => end--
AOIS_1205:432:int_partition(double,int,int,int):i => ++i
AOIS_1206:432:int_partition(double,int,int,int):i => --i
AOIS_1207:432:int_partition(double,int,int,int):i => i++
AOIS_1208:432:int_partition(double,int,int,int):i => i--
AOIS_1209:432:int_partition(double,int,int,int):value => ++value
AOIS_1210:432:int_partition(double,int,int,int):value => --value
AOIS_1211:432:int_partition(double,int,int,int):value => value++
AOIS_1212:432:int_partition(double,int,int,int):value => value--
AOIS_1213:435:int_partition(double,int,int,int):i => ++i
AOIS_1214:435:int_partition(double,int,int,int):i => --i
AOIS_1215:435:int_partition(double,int,int,int):i => i++
AOIS_1216:435:int_partition(double,int,int,int):i => i--
AOIS_1217:436:int_partition(double,int,int,int):value => ++value
AOIS_1218:436:int_partition(double,int,int,int):value => --value
AOIS_1219:436:int_partition(double,int,int,int):value => value++
AOIS_1220:436:int_partition(double,int,int,int):value => value--
AOIS_1221:437:int_partition(double,int,int,int):i => i++
AOIS_1222:437:int_partition(double,int,int,int):i => i--
AOIS_1223:442:double_evaluateWeightedProduct(double,double,int,int):Double.NaN => Double.NaN++
AOIS_1224:442:double_evaluateWeightedProduct(double,double,int,int):Double.NaN => Double.NaN--
AOIS_1225:444:double_evaluateWeightedProduct(double,double,int,int):i => ++i
AOIS_1226:444:double_evaluateWeightedProduct(double,double,int,int):i => --i
AOIS_1227:444:double_evaluateWeightedProduct(double,double,int,int):i => i++
AOIS_1228:444:double_evaluateWeightedProduct(double,double,int,int):i => i--
AOIS_1229:444:double_evaluateWeightedProduct(double,double,int,int):begin => ++begin
AOIS_1230:444:double_evaluateWeightedProduct(double,double,int,int):begin => --begin
AOIS_1231:444:double_evaluateWeightedProduct(double,double,int,int):begin => begin++
AOIS_1232:444:double_evaluateWeightedProduct(double,double,int,int):begin => begin--
AOIS_1233:444:double_evaluateWeightedProduct(double,double,int,int):length => ++length
AOIS_1234:444:double_evaluateWeightedProduct(double,double,int,int):length => --length
AOIS_1235:444:double_evaluateWeightedProduct(double,double,int,int):length => length++
AOIS_1236:444:double_evaluateWeightedProduct(double,double,int,int):length => length--
AOIS_1237:445:double_evaluateWeightedProduct(double,double,int,int):i => ++i
AOIS_1238:445:double_evaluateWeightedProduct(double,double,int,int):i => --i
AOIS_1239:445:double_evaluateWeightedProduct(double,double,int,int):i => i++
AOIS_1240:445:double_evaluateWeightedProduct(double,double,int,int):i => i--
AOIS_1241:445:double_evaluateWeightedProduct(double,double,int,int):i => ++i
AOIS_1242:445:double_evaluateWeightedProduct(double,double,int,int):i => --i
AOIS_1243:445:double_evaluateWeightedProduct(double,double,int,int):i => i++
AOIS_1244:445:double_evaluateWeightedProduct(double,double,int,int):i => i--
AOIS_1245:447:double_evaluateWeightedProduct(double,double,int,int):product => product++
AOIS_1246:447:double_evaluateWeightedProduct(double,double,int,int):product => product--
ROR_1:13:double_distance(double,double): i < p1.length  =>   i > p1.length
ROR_2:13:double_distance(double,double): i < p1.length  =>   i >= p1.length
ROR_3:13:double_distance(double,double): i < p1.length  =>   i <= p1.length
ROR_4:13:double_distance(double,double): i < p1.length  =>   i == p1.length
ROR_5:13:double_distance(double,double): i < p1.length  =>   i != p1.length
ROR_6:13:double_distance(double,double): i < p1.length  =>   true
ROR_7:13:double_distance(double,double): i < p1.length  =>   false
ROR_8:23:double_distance1(double,double): i < p1.length  =>   i > p1.length
ROR_9:23:double_distance1(double,double): i < p1.length  =>   i >= p1.length
ROR_10:23:double_distance1(double,double): i < p1.length  =>   i <= p1.length
ROR_11:23:double_distance1(double,double): i < p1.length  =>   i == p1.length
ROR_12:23:double_distance1(double,double): i < p1.length  =>   i != p1.length
ROR_13:23:double_distance1(double,double): i < p1.length  =>   true
ROR_14:23:double_distance1(double,double): i < p1.length  =>   false
ROR_15:32:double_distanceInf(double,double): i < p1.length  =>   i > p1.length
ROR_16:32:double_distanceInf(double,double): i < p1.length  =>   i >= p1.length
ROR_17:32:double_distanceInf(double,double): i < p1.length  =>   i <= p1.length
ROR_18:32:double_distanceInf(double,double): i < p1.length  =>   i == p1.length
ROR_19:32:double_distanceInf(double,double): i < p1.length  =>   i != p1.length
ROR_20:32:double_distanceInf(double,double): i < p1.length  =>   true
ROR_21:32:double_distanceInf(double,double): i < p1.length  =>   false
ROR_22:40:double_ebeAdd(double,double): a.length != b.length  =>   a.length > b.length
ROR_23:40:double_ebeAdd(double,double): a.length != b.length  =>   a.length >= b.length
ROR_24:40:double_ebeAdd(double,double): a.length != b.length  =>   a.length < b.length
ROR_25:40:double_ebeAdd(double,double): a.length != b.length  =>   a.length <= b.length
ROR_26:40:double_ebeAdd(double,double): a.length != b.length  =>   a.length == b.length
ROR_27:40:double_ebeAdd(double,double): a.length != b.length  =>   true
ROR_28:40:double_ebeAdd(double,double): a.length != b.length  =>   false
ROR_29:44:double_ebeAdd(double,double): i < a.length  =>   i > a.length
ROR_30:44:double_ebeAdd(double,double): i < a.length  =>   i >= a.length
ROR_31:44:double_ebeAdd(double,double): i < a.length  =>   i <= a.length
ROR_32:44:double_ebeAdd(double,double): i < a.length  =>   i == a.length
ROR_33:44:double_ebeAdd(double,double): i < a.length  =>   i != a.length
ROR_34:44:double_ebeAdd(double,double): i < a.length  =>   true
ROR_35:44:double_ebeAdd(double,double): i < a.length  =>   false
ROR_36:52:double_ebeDivide(double,double): a.length != b.length  =>   a.length > b.length
ROR_37:52:double_ebeDivide(double,double): a.length != b.length  =>   a.length >= b.length
ROR_38:52:double_ebeDivide(double,double): a.length != b.length  =>   a.length < b.length
ROR_39:52:double_ebeDivide(double,double): a.length != b.length  =>   a.length <= b.length
ROR_40:52:double_ebeDivide(double,double): a.length != b.length  =>   a.length == b.length
ROR_41:52:double_ebeDivide(double,double): a.length != b.length  =>   true
ROR_42:52:double_ebeDivide(double,double): a.length != b.length  =>   false
ROR_43:56:double_ebeDivide(double,double): i < a.length  =>   i > a.length
ROR_44:56:double_ebeDivide(double,double): i < a.length  =>   i >= a.length
ROR_45:56:double_ebeDivide(double,double): i < a.length  =>   i <= a.length
ROR_46:56:double_ebeDivide(double,double): i < a.length  =>   i == a.length
ROR_47:56:double_ebeDivide(double,double): i < a.length  =>   i != a.length
ROR_48:56:double_ebeDivide(double,double): i < a.length  =>   true
ROR_49:56:double_ebeDivide(double,double): i < a.length  =>   false
ROR_50:64:double_ebeMultiply(double,double): a.length != b.length  =>   a.length > b.length
ROR_51:64:double_ebeMultiply(double,double): a.length != b.length  =>   a.length >= b.length
ROR_52:64:double_ebeMultiply(double,double): a.length != b.length  =>   a.length < b.length
ROR_53:64:double_ebeMultiply(double,double): a.length != b.length  =>   a.length <= b.length
ROR_54:64:double_ebeMultiply(double,double): a.length != b.length  =>   a.length == b.length
ROR_55:64:double_ebeMultiply(double,double): a.length != b.length  =>   true
ROR_56:64:double_ebeMultiply(double,double): a.length != b.length  =>   false
ROR_57:68:double_ebeMultiply(double,double): i < a.length  =>   i > a.length
ROR_58:68:double_ebeMultiply(double,double): i < a.length  =>   i >= a.length
ROR_59:68:double_ebeMultiply(double,double): i < a.length  =>   i <= a.length
ROR_60:68:double_ebeMultiply(double,double): i < a.length  =>   i == a.length
ROR_61:68:double_ebeMultiply(double,double): i < a.length  =>   i != a.length
ROR_62:68:double_ebeMultiply(double,double): i < a.length  =>   true
ROR_63:68:double_ebeMultiply(double,double): i < a.length  =>   false
ROR_64:76:double_ebeSubtract(double,double): a.length != b.length  =>   a.length > b.length
ROR_65:76:double_ebeSubtract(double,double): a.length != b.length  =>   a.length >= b.length
ROR_66:76:double_ebeSubtract(double,double): a.length != b.length  =>   a.length < b.length
ROR_67:76:double_ebeSubtract(double,double): a.length != b.length  =>   a.length <= b.length
ROR_68:76:double_ebeSubtract(double,double): a.length != b.length  =>   a.length == b.length
ROR_69:76:double_ebeSubtract(double,double): a.length != b.length  =>   true
ROR_70:76:double_ebeSubtract(double,double): a.length != b.length  =>   false
ROR_71:80:double_ebeSubtract(double,double): i < a.length  =>   i > a.length
ROR_72:80:double_ebeSubtract(double,double): i < a.length  =>   i >= a.length
ROR_73:80:double_ebeSubtract(double,double): i < a.length  =>   i <= a.length
ROR_74:80:double_ebeSubtract(double,double): i < a.length  =>   i == a.length
ROR_75:80:double_ebeSubtract(double,double): i < a.length  =>   i != a.length
ROR_76:80:double_ebeSubtract(double,double): i < a.length  =>   true
ROR_77:80:double_ebeSubtract(double,double): i < a.length  =>   false
ROR_78:97:double_safeNorm(double): i < v.length  =>   i > v.length
ROR_79:97:double_safeNorm(double): i < v.length  =>   i >= v.length
ROR_80:97:double_safeNorm(double): i < v.length  =>   i <= v.length
ROR_81:97:double_safeNorm(double): i < v.length  =>   i == v.length
ROR_82:97:double_safeNorm(double): i < v.length  =>   i != v.length
ROR_83:97:double_safeNorm(double): i < v.length  =>   true
ROR_84:97:double_safeNorm(double): i < v.length  =>   false
ROR_85:99:double_safeNorm(double): xabs < rdwarf  =>   xabs > rdwarf
ROR_86:99:double_safeNorm(double): xabs < rdwarf  =>   xabs >= rdwarf
ROR_87:99:double_safeNorm(double): xabs < rdwarf  =>   xabs <= rdwarf
ROR_88:99:double_safeNorm(double): xabs < rdwarf  =>   xabs == rdwarf
ROR_89:99:double_safeNorm(double): xabs < rdwarf  =>   xabs != rdwarf
ROR_90:99:double_safeNorm(double): xabs < rdwarf  =>   true
ROR_91:99:double_safeNorm(double): xabs < rdwarf  =>   false
ROR_92:99:double_safeNorm(double): xabs > agiant  =>   xabs >= agiant
ROR_93:99:double_safeNorm(double): xabs > agiant  =>   xabs < agiant
ROR_94:99:double_safeNorm(double): xabs > agiant  =>   xabs <= agiant
ROR_95:99:double_safeNorm(double): xabs > agiant  =>   xabs == agiant
ROR_96:99:double_safeNorm(double): xabs > agiant  =>   xabs != agiant
ROR_97:99:double_safeNorm(double): xabs > agiant  =>   true
ROR_98:99:double_safeNorm(double): xabs > agiant  =>   false
ROR_99:100:double_safeNorm(double): xabs > rdwarf  =>   xabs >= rdwarf
ROR_100:100:double_safeNorm(double): xabs > rdwarf  =>   xabs < rdwarf
ROR_101:100:double_safeNorm(double): xabs > rdwarf  =>   xabs <= rdwarf
ROR_102:100:double_safeNorm(double): xabs > rdwarf  =>   xabs == rdwarf
ROR_103:100:double_safeNorm(double): xabs > rdwarf  =>   xabs != rdwarf
ROR_104:100:double_safeNorm(double): xabs > rdwarf  =>   true
ROR_105:100:double_safeNorm(double): xabs > rdwarf  =>   false
ROR_106:101:double_safeNorm(double): xabs > x1max  =>   xabs >= x1max
ROR_107:101:double_safeNorm(double): xabs > x1max  =>   xabs < x1max
ROR_108:101:double_safeNorm(double): xabs > x1max  =>   xabs <= x1max
ROR_109:101:double_safeNorm(double): xabs > x1max  =>   xabs == x1max
ROR_110:101:double_safeNorm(double): xabs > x1max  =>   xabs != x1max
ROR_111:101:double_safeNorm(double): xabs > x1max  =>   true
ROR_112:101:double_safeNorm(double): xabs > x1max  =>   false
ROR_113:110:double_safeNorm(double): xabs > x3max  =>   xabs >= x3max
ROR_114:110:double_safeNorm(double): xabs > x3max  =>   xabs < x3max
ROR_115:110:double_safeNorm(double): xabs > x3max  =>   xabs <= x3max
ROR_116:110:double_safeNorm(double): xabs > x3max  =>   xabs == x3max
ROR_117:110:double_safeNorm(double): xabs > x3max  =>   xabs != x3max
ROR_118:110:double_safeNorm(double): xabs > x3max  =>   true
ROR_119:110:double_safeNorm(double): xabs > x3max  =>   false
ROR_120:115:double_safeNorm(double): xabs != 0  =>   xabs > 0
ROR_121:115:double_safeNorm(double): xabs != 0  =>   xabs >= 0
ROR_122:115:double_safeNorm(double): xabs != 0  =>   xabs < 0
ROR_123:115:double_safeNorm(double): xabs != 0  =>   xabs <= 0
ROR_124:115:double_safeNorm(double): xabs != 0  =>   xabs == 0
ROR_125:115:double_safeNorm(double): xabs != 0  =>   true
ROR_126:115:double_safeNorm(double): xabs != 0  =>   false
ROR_127:126:double_safeNorm(double): s1 != 0  =>   s1 > 0
ROR_128:126:double_safeNorm(double): s1 != 0  =>   s1 >= 0
ROR_129:126:double_safeNorm(double): s1 != 0  =>   s1 < 0
ROR_130:126:double_safeNorm(double): s1 != 0  =>   s1 <= 0
ROR_131:126:double_safeNorm(double): s1 != 0  =>   s1 == 0
ROR_132:126:double_safeNorm(double): s1 != 0  =>   true
ROR_133:126:double_safeNorm(double): s1 != 0  =>   false
ROR_134:129:double_safeNorm(double): s2 == 0  =>   s2 > 0
ROR_135:129:double_safeNorm(double): s2 == 0  =>   s2 >= 0
ROR_136:129:double_safeNorm(double): s2 == 0  =>   s2 < 0
ROR_137:129:double_safeNorm(double): s2 == 0  =>   s2 <= 0
ROR_138:129:double_safeNorm(double): s2 == 0  =>   s2 != 0
ROR_139:129:double_safeNorm(double): s2 == 0  =>   true
ROR_140:129:double_safeNorm(double): s2 == 0  =>   false
ROR_141:132:double_safeNorm(double): s2 >= x3max  =>   s2 > x3max
ROR_142:132:double_safeNorm(double): s2 >= x3max  =>   s2 < x3max
ROR_143:132:double_safeNorm(double): s2 >= x3max  =>   s2 <= x3max
ROR_144:132:double_safeNorm(double): s2 >= x3max  =>   s2 == x3max
ROR_145:132:double_safeNorm(double): s2 >= x3max  =>   s2 != x3max
ROR_146:132:double_safeNorm(double): s2 >= x3max  =>   true
ROR_147:132:double_safeNorm(double): s2 >= x3max  =>   false
ROR_148:145:double_scale(double,double): i < arr.length  =>   i > arr.length
ROR_149:145:double_scale(double,double): i < arr.length  =>   i >= arr.length
ROR_150:145:double_scale(double,double): i < arr.length  =>   i <= arr.length
ROR_151:145:double_scale(double,double): i < arr.length  =>   i == arr.length
ROR_152:145:double_scale(double,double): i < arr.length  =>   i != arr.length
ROR_153:145:double_scale(double,double): i < arr.length  =>   true
ROR_154:145:double_scale(double,double): i < arr.length  =>   false
ROR_155:155:double_entropy(double): i < k.length  =>   i > k.length
ROR_156:155:double_entropy(double): i < k.length  =>   i >= k.length
ROR_157:155:double_entropy(double): i < k.length  =>   i <= k.length
ROR_158:155:double_entropy(double): i < k.length  =>   i == k.length
ROR_159:155:double_entropy(double): i < k.length  =>   i != k.length
ROR_160:155:double_entropy(double): i < k.length  =>   true
ROR_161:155:double_entropy(double): i < k.length  =>   false
ROR_162:158:double_entropy(double): i < k.length  =>   i > k.length
ROR_163:158:double_entropy(double): i < k.length  =>   i >= k.length
ROR_164:158:double_entropy(double): i < k.length  =>   i <= k.length
ROR_165:158:double_entropy(double): i < k.length  =>   i == k.length
ROR_166:158:double_entropy(double): i < k.length  =>   i != k.length
ROR_167:158:double_entropy(double): i < k.length  =>   true
ROR_168:158:double_entropy(double): i < k.length  =>   false
ROR_169:159:double_entropy(double): k[i] != 0  =>   k[i] > 0
ROR_170:159:double_entropy(double): k[i] != 0  =>   k[i] >= 0
ROR_171:159:double_entropy(double): k[i] != 0  =>   k[i] < 0
ROR_172:159:double_entropy(double): k[i] != 0  =>   k[i] <= 0
ROR_173:159:double_entropy(double): k[i] != 0  =>   k[i] == 0
ROR_174:159:double_entropy(double): k[i] != 0  =>   true
ROR_175:159:double_entropy(double): k[i] != 0  =>   false
ROR_176:171:double_g(double,double): i < observed.length  =>   i > observed.length
ROR_177:171:double_g(double,double): i < observed.length  =>   i >= observed.length
ROR_178:171:double_g(double,double): i < observed.length  =>   i <= observed.length
ROR_179:171:double_g(double,double): i < observed.length  =>   i == observed.length
ROR_180:171:double_g(double,double): i < observed.length  =>   i != observed.length
ROR_181:171:double_g(double,double): i < observed.length  =>   true
ROR_182:171:double_g(double,double): i < observed.length  =>   false
ROR_183:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) >= 10E-6
ROR_184:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) < 10E-6
ROR_185:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) <= 10E-6
ROR_186:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) == 10E-6
ROR_187:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) != 10E-6
ROR_188:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   true
ROR_189:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   false
ROR_190:182:double_g(double,double): i < observed.length  =>   i > observed.length
ROR_191:182:double_g(double,double): i < observed.length  =>   i >= observed.length
ROR_192:182:double_g(double,double): i < observed.length  =>   i <= observed.length
ROR_193:182:double_g(double,double): i < observed.length  =>   i == observed.length
ROR_194:182:double_g(double,double): i < observed.length  =>   i != observed.length
ROR_195:182:double_g(double,double): i < observed.length  =>   true
ROR_196:182:double_g(double,double): i < observed.length  =>   false
ROR_197:191:double_calculateAbsoluteDifferences(double): z == null  =>   z != null
ROR_198:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   z.length > 0
ROR_199:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   z.length >= 0
ROR_200:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   z.length < 0
ROR_201:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   z.length <= 0
ROR_202:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   z.length != 0
ROR_203:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   true
ROR_204:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>   false
ROR_205:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   i > z.length
ROR_206:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   i >= z.length
ROR_207:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   i <= z.length
ROR_208:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   i == z.length
ROR_209:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   i != z.length
ROR_210:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   true
ROR_211:198:double_calculateAbsoluteDifferences(double): i < z.length  =>   false
ROR_212:207:double_calculateDifferences(double,double): i < x.length  =>   i > x.length
ROR_213:207:double_calculateDifferences(double,double): i < x.length  =>   i >= x.length
ROR_214:207:double_calculateDifferences(double,double): i < x.length  =>   i <= x.length
ROR_215:207:double_calculateDifferences(double,double): i < x.length  =>   i == x.length
ROR_216:207:double_calculateDifferences(double,double): i < x.length  =>   i != x.length
ROR_217:207:double_calculateDifferences(double,double): i < x.length  =>   true
ROR_218:207:double_calculateDifferences(double,double): i < x.length  =>   false
ROR_219:219:double_computeDividedDifference(double,double): i < n  =>   i > n
ROR_220:219:double_computeDividedDifference(double,double): i < n  =>   i >= n
ROR_221:219:double_computeDividedDifference(double,double): i < n  =>   i <= n
ROR_222:219:double_computeDividedDifference(double,double): i < n  =>   i == n
ROR_223:219:double_computeDividedDifference(double,double): i < n  =>   i != n
ROR_224:219:double_computeDividedDifference(double,double): i < n  =>   true
ROR_225:219:double_computeDividedDifference(double,double): i < n  =>   false
ROR_226:220:double_computeDividedDifference(double,double): j < n - i  =>   j > n - i
ROR_227:220:double_computeDividedDifference(double,double): j < n - i  =>   j >= n - i
ROR_228:220:double_computeDividedDifference(double,double): j < n - i  =>   j <= n - i
ROR_229:220:double_computeDividedDifference(double,double): j < n - i  =>   j == n - i
ROR_230:220:double_computeDividedDifference(double,double): j < n - i  =>   j != n - i
ROR_231:220:double_computeDividedDifference(double,double): j < n - i  =>   true
ROR_232:220:double_computeDividedDifference(double,double): j < n - i  =>   false
ROR_233:232:double_computeCanberraDistance(double,double): i < a.length  =>   i > a.length
ROR_234:232:double_computeCanberraDistance(double,double): i < a.length  =>   i >= a.length
ROR_235:232:double_computeCanberraDistance(double,double): i < a.length  =>   i <= a.length
ROR_236:232:double_computeCanberraDistance(double,double): i < a.length  =>   i == a.length
ROR_237:232:double_computeCanberraDistance(double,double): i < a.length  =>   i != a.length
ROR_238:232:double_computeCanberraDistance(double,double): i < a.length  =>   true
ROR_239:232:double_computeCanberraDistance(double,double): i < a.length  =>   false
ROR_240:235:double_computeCanberraDistance(double,double): num == 0.0  =>   num > 0.0
ROR_241:235:double_computeCanberraDistance(double,double): num == 0.0  =>   num >= 0.0
ROR_242:235:double_computeCanberraDistance(double,double): num == 0.0  =>   num < 0.0
ROR_243:235:double_computeCanberraDistance(double,double): num == 0.0  =>   num <= 0.0
ROR_244:235:double_computeCanberraDistance(double,double): num == 0.0  =>   num != 0.0
ROR_245:235:double_computeCanberraDistance(double,double): num == 0.0  =>   true
ROR_246:235:double_computeCanberraDistance(double,double): num == 0.0  =>   false
ROR_247:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   denom > 0.0
ROR_248:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   denom >= 0.0
ROR_249:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   denom < 0.0
ROR_250:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   denom <= 0.0
ROR_251:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   denom != 0.0
ROR_252:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   true
ROR_253:235:double_computeCanberraDistance(double,double): denom == 0.0  =>   false
ROR_254:244:double_evaluateHoners(double,double): j >= 0  =>   j > 0
ROR_255:244:double_evaluateHoners(double,double): j >= 0  =>   j < 0
ROR_256:244:double_evaluateHoners(double,double): j >= 0  =>   j <= 0
ROR_257:244:double_evaluateHoners(double,double): j >= 0  =>   j == 0
ROR_258:244:double_evaluateHoners(double,double): j >= 0  =>   j != 0
ROR_259:244:double_evaluateHoners(double,double): j >= 0  =>   true
ROR_260:244:double_evaluateHoners(double,double): j >= 0  =>   false
ROR_261:257:double_evaluateInternal(double,double,double): i < n  =>   i > n
ROR_262:257:double_evaluateInternal(double,double,double): i < n  =>   i >= n
ROR_263:257:double_evaluateInternal(double,double,double): i < n  =>   i <= n
ROR_264:257:double_evaluateInternal(double,double,double): i < n  =>   i == n
ROR_265:257:double_evaluateInternal(double,double,double): i < n  =>   i != n
ROR_266:257:double_evaluateInternal(double,double,double): i < n  =>   true
ROR_267:257:double_evaluateInternal(double,double,double): i < n  =>   false
ROR_268:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   dist > min_dist
ROR_269:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   dist >= min_dist
ROR_270:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   dist <= min_dist
ROR_271:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   dist == min_dist
ROR_272:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   dist != min_dist
ROR_273:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   true
ROR_274:261:double_evaluateInternal(double,double,double): dist < min_dist  =>   false
ROR_275:267:double_evaluateInternal(double,double,double): i < n  =>   i > n
ROR_276:267:double_evaluateInternal(double,double,double): i < n  =>   i >= n
ROR_277:267:double_evaluateInternal(double,double,double): i < n  =>   i <= n
ROR_278:267:double_evaluateInternal(double,double,double): i < n  =>   i == n
ROR_279:267:double_evaluateInternal(double,double,double): i < n  =>   i != n
ROR_280:267:double_evaluateInternal(double,double,double): i < n  =>   true
ROR_281:267:double_evaluateInternal(double,double,double): i < n  =>   false
ROR_282:268:double_evaluateInternal(double,double,double): j < n - i  =>   j > n - i
ROR_283:268:double_evaluateInternal(double,double,double): j < n - i  =>   j >= n - i
ROR_284:268:double_evaluateInternal(double,double,double): j < n - i  =>   j <= n - i
ROR_285:268:double_evaluateInternal(double,double,double): j < n - i  =>   j == n - i
ROR_286:268:double_evaluateInternal(double,double,double): j < n - i  =>   j != n - i
ROR_287:268:double_evaluateInternal(double,double,double): j < n - i  =>   true
ROR_288:268:double_evaluateInternal(double,double,double): j < n - i  =>   false
ROR_289:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   nearest > 0.5 * (n - i + 1)
ROR_290:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   nearest >= 0.5 * (n - i + 1)
ROR_291:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   nearest <= 0.5 * (n - i + 1)
ROR_292:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   nearest == 0.5 * (n - i + 1)
ROR_293:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   nearest != 0.5 * (n - i + 1)
ROR_294:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   true
ROR_295:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>   false
ROR_296:290:double_evaluateNewton(double,double,double): i >= 0  =>   i > 0
ROR_297:290:double_evaluateNewton(double,double,double): i >= 0  =>   i < 0
ROR_298:290:double_evaluateNewton(double,double,double): i >= 0  =>   i <= 0
ROR_299:290:double_evaluateNewton(double,double,double): i >= 0  =>   i == 0
ROR_300:290:double_evaluateNewton(double,double,double): i >= 0  =>   i != 0
ROR_301:290:double_evaluateNewton(double,double,double): i >= 0  =>   true
ROR_302:290:double_evaluateNewton(double,double,double): i >= 0  =>   false
ROR_303:299:double_meanDifference(double,double): i < sample1.length  =>   i > sample1.length
ROR_304:299:double_meanDifference(double,double): i < sample1.length  =>   i >= sample1.length
ROR_305:299:double_meanDifference(double,double): i < sample1.length  =>   i <= sample1.length
ROR_306:299:double_meanDifference(double,double): i < sample1.length  =>   i == sample1.length
ROR_307:299:double_meanDifference(double,double): i < sample1.length  =>   i != sample1.length
ROR_308:299:double_meanDifference(double,double): i < sample1.length  =>   true
ROR_309:299:double_meanDifference(double,double): i < sample1.length  =>   false
ROR_310:312:double_varianceDifference(double,double): i < n  =>   i > n
ROR_311:312:double_varianceDifference(double,double): i < n  =>   i >= n
ROR_312:312:double_varianceDifference(double,double): i < n  =>   i <= n
ROR_313:312:double_varianceDifference(double,double): i < n  =>   i == n
ROR_314:312:double_varianceDifference(double,double): i < n  =>   i != n
ROR_315:312:double_varianceDifference(double,double): i < n  =>   true
ROR_316:312:double_varianceDifference(double,double): i < n  =>   false
ROR_317:316:double_varianceDifference(double,double): i < n  =>   i > n
ROR_318:316:double_varianceDifference(double,double): i < n  =>   i >= n
ROR_319:316:double_varianceDifference(double,double): i < n  =>   i <= n
ROR_320:316:double_varianceDifference(double,double): i < n  =>   i == n
ROR_321:316:double_varianceDifference(double,double): i < n  =>   i != n
ROR_322:316:double_varianceDifference(double,double): i < n  =>   true
ROR_323:316:double_varianceDifference(double,double): i < n  =>   false
ROR_324:326:boolean_equals(double,double): x == null  =>   x != null
ROR_325:326:boolean_equals(double,double): y == null  =>   y != null
ROR_326:327:boolean_equals(double,double): x == null  =>   x != null
ROR_327:327:boolean_equals(double,double): y == null  =>   y != null
ROR_328:329:boolean_equals(double,double): x.length != y.length  =>   x.length > y.length
ROR_329:329:boolean_equals(double,double): x.length != y.length  =>   x.length >= y.length
ROR_330:329:boolean_equals(double,double): x.length != y.length  =>   x.length < y.length
ROR_331:329:boolean_equals(double,double): x.length != y.length  =>   x.length <= y.length
ROR_332:329:boolean_equals(double,double): x.length != y.length  =>   x.length == y.length
ROR_333:329:boolean_equals(double,double): x.length != y.length  =>   true
ROR_334:329:boolean_equals(double,double): x.length != y.length  =>   false
ROR_335:332:boolean_equals(double,double): i < x.length  =>   i > x.length
ROR_336:332:boolean_equals(double,double): i < x.length  =>   i >= x.length
ROR_337:332:boolean_equals(double,double): i < x.length  =>   i <= x.length
ROR_338:332:boolean_equals(double,double): i < x.length  =>   i == x.length
ROR_339:332:boolean_equals(double,double): i < x.length  =>   i != x.length
ROR_340:332:boolean_equals(double,double): i < x.length  =>   true
ROR_341:332:boolean_equals(double,double): i < x.length  =>   false
ROR_342:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   Math.abs( y[i] - x[i] ) >= 0.0001
ROR_343:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   Math.abs( y[i] - x[i] ) < 0.0001
ROR_344:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   Math.abs( y[i] - x[i] ) <= 0.0001
ROR_345:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   Math.abs( y[i] - x[i] ) == 0.0001
ROR_346:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   Math.abs( y[i] - x[i] ) != 0.0001
ROR_347:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   true
ROR_348:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>   false
ROR_349:342:boolean_checkNonNegative(double): i < in.length  =>   i > in.length
ROR_350:342:boolean_checkNonNegative(double): i < in.length  =>   i >= in.length
ROR_351:342:boolean_checkNonNegative(double): i < in.length  =>   i <= in.length
ROR_352:342:boolean_checkNonNegative(double): i < in.length  =>   i == in.length
ROR_353:342:boolean_checkNonNegative(double): i < in.length  =>   i != in.length
ROR_354:342:boolean_checkNonNegative(double): i < in.length  =>   true
ROR_355:342:boolean_checkNonNegative(double): i < in.length  =>   false
ROR_356:343:boolean_checkNonNegative(double): in[i] < 0  =>   in[i] > 0
ROR_357:343:boolean_checkNonNegative(double): in[i] < 0  =>   in[i] >= 0
ROR_358:343:boolean_checkNonNegative(double): in[i] < 0  =>   in[i] <= 0
ROR_359:343:boolean_checkNonNegative(double): in[i] < 0  =>   in[i] == 0
ROR_360:343:boolean_checkNonNegative(double): in[i] < 0  =>   in[i] != 0
ROR_361:343:boolean_checkNonNegative(double): in[i] < 0  =>   true
ROR_362:343:boolean_checkNonNegative(double): in[i] < 0  =>   false
ROR_363:352:boolean_checkPositive(double): i < in.length  =>   i > in.length
ROR_364:352:boolean_checkPositive(double): i < in.length  =>   i >= in.length
ROR_365:352:boolean_checkPositive(double): i < in.length  =>   i <= in.length
ROR_366:352:boolean_checkPositive(double): i < in.length  =>   i == in.length
ROR_367:352:boolean_checkPositive(double): i < in.length  =>   i != in.length
ROR_368:352:boolean_checkPositive(double): i < in.length  =>   true
ROR_369:352:boolean_checkPositive(double): i < in.length  =>   false
ROR_370:353:boolean_checkPositive(double): in[i] <= 0  =>   in[i] > 0
ROR_371:353:boolean_checkPositive(double): in[i] <= 0  =>   in[i] >= 0
ROR_372:353:boolean_checkPositive(double): in[i] <= 0  =>   in[i] < 0
ROR_373:353:boolean_checkPositive(double): in[i] <= 0  =>   in[i] == 0
ROR_374:353:boolean_checkPositive(double): in[i] <= 0  =>   in[i] != 0
ROR_375:353:boolean_checkPositive(double): in[i] <= 0  =>   true
ROR_376:353:boolean_checkPositive(double): in[i] <= 0  =>   false
ROR_377:364:double_chiSquare(double,double): i < observed.length  =>   i > observed.length
ROR_378:364:double_chiSquare(double,double): i < observed.length  =>   i >= observed.length
ROR_379:364:double_chiSquare(double,double): i < observed.length  =>   i <= observed.length
ROR_380:364:double_chiSquare(double,double): i < observed.length  =>   i == observed.length
ROR_381:364:double_chiSquare(double,double): i < observed.length  =>   i != observed.length
ROR_382:364:double_chiSquare(double,double): i < observed.length  =>   true
ROR_383:364:double_chiSquare(double,double): i < observed.length  =>   false
ROR_384:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) >= 10E-6
ROR_385:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) < 10E-6
ROR_386:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) <= 10E-6
ROR_387:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) == 10E-6
ROR_388:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   Math.abs( sumExpected - sumObserved ) != 10E-6
ROR_389:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   true
ROR_390:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>   false
ROR_391:375:double_chiSquare(double,double): i < observed.length  =>   i > observed.length
ROR_392:375:double_chiSquare(double,double): i < observed.length  =>   i >= observed.length
ROR_393:375:double_chiSquare(double,double): i < observed.length  =>   i <= observed.length
ROR_394:375:double_chiSquare(double,double): i < observed.length  =>   i == observed.length
ROR_395:375:double_chiSquare(double,double): i < observed.length  =>   i != observed.length
ROR_396:375:double_chiSquare(double,double): i < observed.length  =>   true
ROR_397:375:double_chiSquare(double,double): i < observed.length  =>   false
ROR_398:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   values.length > 0
ROR_399:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   values.length >= 0
ROR_400:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   values.length < 0
ROR_401:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   values.length <= 0
ROR_402:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   values.length != 0
ROR_403:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   true
ROR_404:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>   false
ROR_405:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   values.length > 1
ROR_406:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   values.length >= 1
ROR_407:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   values.length < 1
ROR_408:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   values.length <= 1
ROR_409:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   values.length != 1
ROR_410:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   true
ROR_411:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>   false
ROR_412:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   i > length
ROR_413:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   i >= length
ROR_414:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   i <= length
ROR_415:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   i == length
ROR_416:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   i != length
ROR_417:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   true
ROR_418:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>   false
ROR_419:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   values[i] >= cutoff
ROR_420:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   values[i] < cutoff
ROR_421:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   values[i] <= cutoff
ROR_422:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   values[i] == cutoff
ROR_423:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   values[i] != cutoff
ROR_424:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   true
ROR_425:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>   false
ROR_426:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff == booleanDirection  =>   values[i] > cutoff != booleanDirection
ROR_427:419:int_partition(double,int,int,int): i < j  =>   i > j
ROR_428:419:int_partition(double,int,int,int): i < j  =>   i >= j
ROR_429:419:int_partition(double,int,int,int): i < j  =>   i <= j
ROR_430:419:int_partition(double,int,int,int): i < j  =>   i == j
ROR_431:419:int_partition(double,int,int,int): i < j  =>   i != j
ROR_432:419:int_partition(double,int,int,int): i < j  =>   true
ROR_433:419:int_partition(double,int,int,int): i < j  =>   false
ROR_434:420:int_partition(double,int,int,int): i < j  =>   i > j
ROR_435:420:int_partition(double,int,int,int): i < j  =>   i >= j
ROR_436:420:int_partition(double,int,int,int): i < j  =>   i <= j
ROR_437:420:int_partition(double,int,int,int): i < j  =>   i == j
ROR_438:420:int_partition(double,int,int,int): i < j  =>   i != j
ROR_439:420:int_partition(double,int,int,int): i < j  =>   true
ROR_440:420:int_partition(double,int,int,int): i < j  =>   false
ROR_441:420:int_partition(double,int,int,int): work[j] > value  =>   work[j] >= value
ROR_442:420:int_partition(double,int,int,int): work[j] > value  =>   work[j] < value
ROR_443:420:int_partition(double,int,int,int): work[j] > value  =>   work[j] <= value
ROR_444:420:int_partition(double,int,int,int): work[j] > value  =>   work[j] == value
ROR_445:420:int_partition(double,int,int,int): work[j] > value  =>   work[j] != value
ROR_446:420:int_partition(double,int,int,int): work[j] > value  =>   true
ROR_447:420:int_partition(double,int,int,int): work[j] > value  =>   false
ROR_448:423:int_partition(double,int,int,int): i < j  =>   i > j
ROR_449:423:int_partition(double,int,int,int): i < j  =>   i >= j
ROR_450:423:int_partition(double,int,int,int): i < j  =>   i <= j
ROR_451:423:int_partition(double,int,int,int): i < j  =>   i == j
ROR_452:423:int_partition(double,int,int,int): i < j  =>   i != j
ROR_453:423:int_partition(double,int,int,int): i < j  =>   true
ROR_454:423:int_partition(double,int,int,int): i < j  =>   false
ROR_455:423:int_partition(double,int,int,int): work[i] < value  =>   work[i] > value
ROR_456:423:int_partition(double,int,int,int): work[i] < value  =>   work[i] >= value
ROR_457:423:int_partition(double,int,int,int): work[i] < value  =>   work[i] <= value
ROR_458:423:int_partition(double,int,int,int): work[i] < value  =>   work[i] == value
ROR_459:423:int_partition(double,int,int,int): work[i] < value  =>   work[i] != value
ROR_460:423:int_partition(double,int,int,int): work[i] < value  =>   true
ROR_461:423:int_partition(double,int,int,int): work[i] < value  =>   false
ROR_462:426:int_partition(double,int,int,int): i < j  =>   i > j
ROR_463:426:int_partition(double,int,int,int): i < j  =>   i >= j
ROR_464:426:int_partition(double,int,int,int): i < j  =>   i <= j
ROR_465:426:int_partition(double,int,int,int): i < j  =>   i == j
ROR_466:426:int_partition(double,int,int,int): i < j  =>   i != j
ROR_467:426:int_partition(double,int,int,int): i < j  =>   true
ROR_468:426:int_partition(double,int,int,int): i < j  =>   false
ROR_469:432:int_partition(double,int,int,int): i >= end  =>   i > end
ROR_470:432:int_partition(double,int,int,int): i >= end  =>   i < end
ROR_471:432:int_partition(double,int,int,int): i >= end  =>   i <= end
ROR_472:432:int_partition(double,int,int,int): i >= end  =>   i == end
ROR_473:432:int_partition(double,int,int,int): i >= end  =>   i != end
ROR_474:432:int_partition(double,int,int,int): i >= end  =>   true
ROR_475:432:int_partition(double,int,int,int): i >= end  =>   false
ROR_476:432:int_partition(double,int,int,int): work[i] > value  =>   work[i] >= value
ROR_477:432:int_partition(double,int,int,int): work[i] > value  =>   work[i] < value
ROR_478:432:int_partition(double,int,int,int): work[i] > value  =>   work[i] <= value
ROR_479:432:int_partition(double,int,int,int): work[i] > value  =>   work[i] == value
ROR_480:432:int_partition(double,int,int,int): work[i] > value  =>   work[i] != value
ROR_481:432:int_partition(double,int,int,int): work[i] > value  =>   true
ROR_482:432:int_partition(double,int,int,int): work[i] > value  =>   false
ROR_483:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   i > begin + length
ROR_484:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   i >= begin + length
ROR_485:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   i <= begin + length
ROR_486:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   i == begin + length
ROR_487:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   i != begin + length
ROR_488:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   true
ROR_489:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>   false
COR_1:99:double_safeNorm(double): xabs < rdwarf || xabs > agiant  =>   xabs < rdwarf && xabs > agiant
COR_2:99:double_safeNorm(double): xabs < rdwarf || xabs > agiant  =>   xabs < rdwarf ^ xabs > agiant
COR_3:235:double_computeCanberraDistance(double,double): num == 0.0 && denom == 0.0  =>   num == 0.0 || denom == 0.0
COR_4:235:double_computeCanberraDistance(double,double): num == 0.0 && denom == 0.0  =>   num == 0.0 ^ denom == 0.0
COR_5:326:boolean_equals(double,double): x == null || y == null  =>   x == null && y == null
COR_6:326:boolean_equals(double,double): x == null || y == null  =>   x == null ^ y == null
COR_7:327:boolean_equals(double,double): x == null ^ y == null  =>   x == null && y == null
COR_8:327:boolean_equals(double,double): x == null ^ y == null  =>   x == null || y == null
COR_9:420:int_partition(double,int,int,int): i < j && work[j] > value  =>   i < j || work[j] > value
COR_10:420:int_partition(double,int,int,int): i < j && work[j] > value  =>   i < j ^ work[j] > value
COR_11:423:int_partition(double,int,int,int): i < j && work[i] < value  =>   i < j || work[i] < value
COR_12:423:int_partition(double,int,int,int): i < j && work[i] < value  =>   i < j ^ work[i] < value
COR_13:432:int_partition(double,int,int,int): i >= end || work[i] > value  =>   i >= end && work[i] > value
COR_14:432:int_partition(double,int,int,int): i >= end || work[i] > value  =>   i >= end ^ work[i] > value
COD_1:327:boolean_equals(double,double):!(x == null ^ y == null) => x == null ^ y == null
COI_1:13:double_distance(double,double): i < p1.length  =>  !(i < p1.length)
COI_2:23:double_distance1(double,double): i < p1.length  =>  !(i < p1.length)
COI_3:32:double_distanceInf(double,double): i < p1.length  =>  !(i < p1.length)
COI_4:40:double_ebeAdd(double,double): a.length != b.length  =>  !(a.length != b.length)
COI_5:44:double_ebeAdd(double,double): i < a.length  =>  !(i < a.length)
COI_6:52:double_ebeDivide(double,double): a.length != b.length  =>  !(a.length != b.length)
COI_7:56:double_ebeDivide(double,double): i < a.length  =>  !(i < a.length)
COI_8:64:double_ebeMultiply(double,double): a.length != b.length  =>  !(a.length != b.length)
COI_9:68:double_ebeMultiply(double,double): i < a.length  =>  !(i < a.length)
COI_10:76:double_ebeSubtract(double,double): a.length != b.length  =>  !(a.length != b.length)
COI_11:80:double_ebeSubtract(double,double): i < a.length  =>  !(i < a.length)
COI_12:97:double_safeNorm(double): i < v.length  =>  !(i < v.length)
COI_13:99:double_safeNorm(double): xabs < rdwarf  =>  !(xabs < rdwarf)
COI_14:99:double_safeNorm(double): xabs > agiant  =>  !(xabs > agiant)
COI_15:99:double_safeNorm(double): xabs < rdwarf || xabs > agiant  =>  !(xabs < rdwarf || xabs > agiant)
COI_16:100:double_safeNorm(double): xabs > rdwarf  =>  !(xabs > rdwarf)
COI_17:101:double_safeNorm(double): xabs > x1max  =>  !(xabs > x1max)
COI_18:110:double_safeNorm(double): xabs > x3max  =>  !(xabs > x3max)
COI_19:115:double_safeNorm(double): xabs != 0  =>  !(xabs != 0)
COI_20:126:double_safeNorm(double): s1 != 0  =>  !(s1 != 0)
COI_21:129:double_safeNorm(double): s2 == 0  =>  !(s2 == 0)
COI_22:132:double_safeNorm(double): s2 >= x3max  =>  !(s2 >= x3max)
COI_23:145:double_scale(double,double): i < arr.length  =>  !(i < arr.length)
COI_24:155:double_entropy(double): i < k.length  =>  !(i < k.length)
COI_25:158:double_entropy(double): i < k.length  =>  !(i < k.length)
COI_26:159:double_entropy(double): k[i] != 0  =>  !(k[i] != 0)
COI_27:171:double_g(double,double): i < observed.length  =>  !(i < observed.length)
COI_28:177:double_g(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>  !(Math.abs( sumExpected - sumObserved ) > 10E-6)
COI_29:179:double_g(double,double): rescale  =>  !rescale
COI_30:182:double_g(double,double): i < observed.length  =>  !(i < observed.length)
COI_31:183:double_g(double,double): rescale  =>  !rescale
COI_32:191:double_calculateAbsoluteDifferences(double): z == null  =>  !(z == null)
COI_33:194:double_calculateAbsoluteDifferences(double): z.length == 0  =>  !(z.length == 0)
COI_34:198:double_calculateAbsoluteDifferences(double): i < z.length  =>  !(i < z.length)
COI_35:207:double_calculateDifferences(double,double): i < x.length  =>  !(i < x.length)
COI_36:219:double_computeDividedDifference(double,double): i < n  =>  !(i < n)
COI_37:220:double_computeDividedDifference(double,double): j < n - i  =>  !(j < n - i)
COI_38:232:double_computeCanberraDistance(double,double): i < a.length  =>  !(i < a.length)
COI_39:235:double_computeCanberraDistance(double,double): num == 0.0  =>  !(num == 0.0)
COI_40:235:double_computeCanberraDistance(double,double): denom == 0.0  =>  !(denom == 0.0)
COI_41:235:double_computeCanberraDistance(double,double): num == 0.0 && denom == 0.0  =>  !(num == 0.0 && denom == 0.0)
COI_42:244:double_evaluateHoners(double,double): j >= 0  =>  !(j >= 0)
COI_43:257:double_evaluateInternal(double,double,double): i < n  =>  !(i < n)
COI_44:261:double_evaluateInternal(double,double,double): dist < min_dist  =>  !(dist < min_dist)
COI_45:267:double_evaluateInternal(double,double,double): i < n  =>  !(i < n)
COI_46:268:double_evaluateInternal(double,double,double): j < n - i  =>  !(j < n - i)
COI_47:276:double_evaluateInternal(double,double,double): nearest < 0.5 * (n - i + 1)  =>  !(nearest < 0.5 * (n - i + 1))
COI_48:290:double_evaluateNewton(double,double,double): i >= 0  =>  !(i >= 0)
COI_49:299:double_meanDifference(double,double): i < sample1.length  =>  !(i < sample1.length)
COI_50:312:double_varianceDifference(double,double): i < n  =>  !(i < n)
COI_51:316:double_varianceDifference(double,double): i < n  =>  !(i < n)
COI_52:326:boolean_equals(double,double): x == null  =>  !(x == null)
COI_53:326:boolean_equals(double,double): y == null  =>  !(y == null)
COI_54:326:boolean_equals(double,double): x == null || y == null  =>  !(x == null || y == null)
COI_55:329:boolean_equals(double,double): x.length != y.length  =>  !(x.length != y.length)
COI_56:332:boolean_equals(double,double): i < x.length  =>  !(i < x.length)
COI_57:333:boolean_equals(double,double): Math.abs( y[i] - x[i] ) > 0.0001  =>  !(Math.abs( y[i] - x[i] ) > 0.0001)
COI_58:342:boolean_checkNonNegative(double): i < in.length  =>  !(i < in.length)
COI_59:343:boolean_checkNonNegative(double): in[i] < 0  =>  !(in[i] < 0)
COI_60:352:boolean_checkPositive(double): i < in.length  =>  !(i < in.length)
COI_61:353:boolean_checkPositive(double): in[i] <= 0  =>  !(in[i] <= 0)
COI_62:364:double_chiSquare(double,double): i < observed.length  =>  !(i < observed.length)
COI_63:370:double_chiSquare(double,double): Math.abs( sumExpected - sumObserved ) > 10E-6  =>  !(Math.abs( sumExpected - sumObserved ) > 10E-6)
COI_64:372:double_chiSquare(double,double): rescale  =>  !rescale
COI_65:375:double_chiSquare(double,double): i < observed.length  =>  !(i < observed.length)
COI_66:376:double_chiSquare(double,double): rescale  =>  !rescale
COI_67:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 0  =>  !(values.length == 0)
COI_68:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values.length == 1  =>  !(values.length == 1)
COI_69:395:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): direction  =>  !direction
COI_70:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): i < length  =>  !(i < length)
COI_71:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff  =>  !(values[i] > cutoff)
COI_72:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): booleanDirection  =>  !booleanDirection
COI_73:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): values[i] > cutoff == booleanDirection  =>  !(values[i] > cutoff == booleanDirection)
COI_74:404:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): corrected  =>  !corrected
COI_75:419:int_partition(double,int,int,int): i < j  =>  !(i < j)
COI_76:420:int_partition(double,int,int,int): i < j  =>  !(i < j)
COI_77:420:int_partition(double,int,int,int): work[j] > value  =>  !(work[j] > value)
COI_78:420:int_partition(double,int,int,int): i < j && work[j] > value  =>  !(i < j && work[j] > value)
COI_79:423:int_partition(double,int,int,int): i < j  =>  !(i < j)
COI_80:423:int_partition(double,int,int,int): work[i] < value  =>  !(work[i] < value)
COI_81:423:int_partition(double,int,int,int): i < j && work[i] < value  =>  !(i < j && work[i] < value)
COI_82:426:int_partition(double,int,int,int): i < j  =>  !(i < j)
COI_83:432:int_partition(double,int,int,int): i >= end  =>  !(i >= end)
COI_84:432:int_partition(double,int,int,int): work[i] > value  =>  !(work[i] > value)
COI_85:432:int_partition(double,int,int,int): i >= end || work[i] > value  =>  !(i >= end || work[i] > value)
COI_86:444:double_evaluateWeightedProduct(double,double,int,int): i < begin + length  =>  !(i < begin + length)
LOI_1:13:double_distance(double,double):i => ~i
LOI_2:13:double_distance(double,double):p1.length => ~p1.length
LOI_3:13:double_distance(double,double):i => ~i
LOI_4:14:double_distance(double,double):i => ~i
LOI_5:14:double_distance(double,double):i => ~i
LOI_6:15:double_distance(double,double):dp => ~dp
LOI_7:15:double_distance(double,double):dp => ~dp
LOI_8:17:double_distance(double,double):sum => ~sum
LOI_9:23:double_distance1(double,double):i => ~i
LOI_10:23:double_distance1(double,double):p1.length => ~p1.length
LOI_11:23:double_distance1(double,double):i => ~i
LOI_12:24:double_distance1(double,double):i => ~i
LOI_13:24:double_distance1(double,double):i => ~i
LOI_14:26:double_distance1(double,double):sum => ~sum
LOI_15:32:double_distanceInf(double,double):i => ~i
LOI_16:32:double_distanceInf(double,double):p1.length => ~p1.length
LOI_17:32:double_distanceInf(double,double):i => ~i
LOI_18:33:double_distanceInf(double,double):max => ~max
LOI_19:33:double_distanceInf(double,double):i => ~i
LOI_20:33:double_distanceInf(double,double):i => ~i
LOI_21:35:double_distanceInf(double,double):max => ~max
LOI_22:40:double_ebeAdd(double,double):a.length => ~a.length
LOI_23:40:double_ebeAdd(double,double):b.length => ~b.length
LOI_24:44:double_ebeAdd(double,double):i => ~i
LOI_25:44:double_ebeAdd(double,double):a.length => ~a.length
LOI_26:44:double_ebeAdd(double,double):i => ~i
LOI_27:45:double_ebeAdd(double,double):i => ~i
LOI_28:45:double_ebeAdd(double,double):i => ~i
LOI_29:52:double_ebeDivide(double,double):a.length => ~a.length
LOI_30:52:double_ebeDivide(double,double):b.length => ~b.length
LOI_31:56:double_ebeDivide(double,double):i => ~i
LOI_32:56:double_ebeDivide(double,double):a.length => ~a.length
LOI_33:56:double_ebeDivide(double,double):i => ~i
LOI_34:57:double_ebeDivide(double,double):i => ~i
LOI_35:57:double_ebeDivide(double,double):i => ~i
LOI_36:64:double_ebeMultiply(double,double):a.length => ~a.length
LOI_37:64:double_ebeMultiply(double,double):b.length => ~b.length
LOI_38:68:double_ebeMultiply(double,double):i => ~i
LOI_39:68:double_ebeMultiply(double,double):a.length => ~a.length
LOI_40:68:double_ebeMultiply(double,double):i => ~i
LOI_41:69:double_ebeMultiply(double,double):i => ~i
LOI_42:69:double_ebeMultiply(double,double):i => ~i
LOI_43:76:double_ebeSubtract(double,double):a.length => ~a.length
LOI_44:76:double_ebeSubtract(double,double):b.length => ~b.length
LOI_45:80:double_ebeSubtract(double,double):i => ~i
LOI_46:80:double_ebeSubtract(double,double):a.length => ~a.length
LOI_47:80:double_ebeSubtract(double,double):i => ~i
LOI_48:81:double_ebeSubtract(double,double):i => ~i
LOI_49:81:double_ebeSubtract(double,double):i => ~i
LOI_50:95:double_safeNorm(double):v.length => ~v.length
LOI_51:96:double_safeNorm(double):rgiant => ~rgiant
LOI_52:96:double_safeNorm(double):floatn => ~floatn
LOI_53:97:double_safeNorm(double):i => ~i
LOI_54:97:double_safeNorm(double):v.length => ~v.length
LOI_55:97:double_safeNorm(double):i => ~i
LOI_56:98:double_safeNorm(double):i => ~i
LOI_57:99:double_safeNorm(double):xabs => ~xabs
LOI_58:99:double_safeNorm(double):rdwarf => ~rdwarf
LOI_59:99:double_safeNorm(double):xabs => ~xabs
LOI_60:99:double_safeNorm(double):agiant => ~agiant
LOI_61:100:double_safeNorm(double):xabs => ~xabs
LOI_62:100:double_safeNorm(double):rdwarf => ~rdwarf
LOI_63:101:double_safeNorm(double):xabs => ~xabs
LOI_64:101:double_safeNorm(double):x1max => ~x1max
LOI_65:102:double_safeNorm(double):x1max => ~x1max
LOI_66:102:double_safeNorm(double):xabs => ~xabs
LOI_67:103:double_safeNorm(double):s1 => ~s1
LOI_68:103:double_safeNorm(double):r => ~r
LOI_69:103:double_safeNorm(double):r => ~r
LOI_70:104:double_safeNorm(double):xabs => ~xabs
LOI_71:106:double_safeNorm(double):xabs => ~xabs
LOI_72:106:double_safeNorm(double):x1max => ~x1max
LOI_73:107:double_safeNorm(double):r => ~r
LOI_74:107:double_safeNorm(double):r => ~r
LOI_75:110:double_safeNorm(double):xabs => ~xabs
LOI_76:110:double_safeNorm(double):x3max => ~x3max
LOI_77:111:double_safeNorm(double):x3max => ~x3max
LOI_78:111:double_safeNorm(double):xabs => ~xabs
LOI_79:112:double_safeNorm(double):s3 => ~s3
LOI_80:112:double_safeNorm(double):r => ~r
LOI_81:112:double_safeNorm(double):r => ~r
LOI_82:113:double_safeNorm(double):xabs => ~xabs
LOI_83:115:double_safeNorm(double):xabs => ~xabs
LOI_84:116:double_safeNorm(double):xabs => ~xabs
LOI_85:116:double_safeNorm(double):x3max => ~x3max
LOI_86:117:double_safeNorm(double):r => ~r
LOI_87:117:double_safeNorm(double):r => ~r
LOI_88:122:double_safeNorm(double):xabs => ~xabs
LOI_89:122:double_safeNorm(double):xabs => ~xabs
LOI_90:126:double_safeNorm(double):s1 => ~s1
LOI_91:127:double_safeNorm(double):x1max => ~x1max
LOI_92:127:double_safeNorm(double):s1 => ~s1
LOI_93:127:double_safeNorm(double):s2 => ~s2
LOI_94:127:double_safeNorm(double):x1max => ~x1max
LOI_95:127:double_safeNorm(double):x1max => ~x1max
LOI_96:129:double_safeNorm(double):s2 => ~s2
LOI_97:130:double_safeNorm(double):x3max => ~x3max
LOI_98:130:double_safeNorm(double):s3 => ~s3
LOI_99:132:double_safeNorm(double):s2 => ~s2
LOI_100:132:double_safeNorm(double):x3max => ~x3max
LOI_101:133:double_safeNorm(double):s2 => ~s2
LOI_102:133:double_safeNorm(double):x3max => ~x3max
LOI_103:133:double_safeNorm(double):s2 => ~s2
LOI_104:133:double_safeNorm(double):x3max => ~x3max
LOI_105:133:double_safeNorm(double):s3 => ~s3
LOI_106:135:double_safeNorm(double):x3max => ~x3max
LOI_107:135:double_safeNorm(double):s2 => ~s2
LOI_108:135:double_safeNorm(double):x3max => ~x3max
LOI_109:135:double_safeNorm(double):x3max => ~x3max
LOI_110:135:double_safeNorm(double):s3 => ~s3
LOI_111:139:double_safeNorm(double):norm => ~norm
LOI_112:144:double_scale(double,double):arr.length => ~arr.length
LOI_113:145:double_scale(double,double):i => ~i
LOI_114:145:double_scale(double,double):arr.length => ~arr.length
LOI_115:145:double_scale(double,double):i => ~i
LOI_116:146:double_scale(double,double):i => ~i
LOI_117:146:double_scale(double,double):i => ~i
LOI_118:146:double_scale(double,double):val => ~val
LOI_119:155:double_entropy(double):i => ~i
LOI_120:155:double_entropy(double):k.length => ~k.length
LOI_121:155:double_entropy(double):i => ~i
LOI_122:156:double_entropy(double):i => ~i
LOI_123:158:double_entropy(double):i => ~i
LOI_124:158:double_entropy(double):k.length => ~k.length
LOI_125:158:double_entropy(double):i => ~i
LOI_126:159:double_entropy(double):i => ~i
LOI_127:160:double_entropy(double):i => ~i
LOI_128:160:double_entropy(double):sum_k => ~sum_k
LOI_129:161:double_entropy(double):p_i => ~p_i
LOI_130:161:double_entropy(double):p_i => ~p_i
LOI_131:164:double_entropy(double):h => ~h
LOI_132:171:double_g(double,double):i => ~i
LOI_133:171:double_g(double,double):observed.length => ~observed.length
LOI_134:171:double_g(double,double):i => ~i
LOI_135:172:double_g(double,double):i => ~i
LOI_136:173:double_g(double,double):i => ~i
LOI_137:177:double_g(double,double):sumExpected => ~sumExpected
LOI_138:177:double_g(double,double):sumObserved => ~sumObserved
LOI_139:178:double_g(double,double):sumObserved => ~sumObserved
LOI_140:178:double_g(double,double):sumExpected => ~sumExpected
LOI_141:182:double_g(double,double):i => ~i
LOI_142:182:double_g(double,double):observed.length => ~observed.length
LOI_143:182:double_g(double,double):i => ~i
LOI_144:183:double_g(double,double):i => ~i
LOI_145:183:double_g(double,double):ratio => ~ratio
LOI_146:183:double_g(double,double):i => ~i
LOI_147:183:double_g(double,double):i => ~i
LOI_148:183:double_g(double,double):i => ~i
LOI_149:184:double_g(double,double):i => ~i
LOI_150:184:double_g(double,double):dev => ~dev
LOI_151:186:double_g(double,double):sum => ~sum
LOI_152:194:double_calculateAbsoluteDifferences(double):z.length => ~z.length
LOI_153:197:double_calculateAbsoluteDifferences(double):z.length => ~z.length
LOI_154:198:double_calculateAbsoluteDifferences(double):i => ~i
LOI_155:198:double_calculateAbsoluteDifferences(double):z.length => ~z.length
LOI_156:198:double_calculateAbsoluteDifferences(double):i => ~i
LOI_157:199:double_calculateAbsoluteDifferences(double):i => ~i
LOI_158:199:double_calculateAbsoluteDifferences(double):i => ~i
LOI_159:206:double_calculateDifferences(double,double):x.length => ~x.length
LOI_160:207:double_calculateDifferences(double,double):i => ~i
LOI_161:207:double_calculateDifferences(double,double):x.length => ~x.length
LOI_162:207:double_calculateDifferences(double,double):i => ~i
LOI_163:208:double_calculateDifferences(double,double):i => ~i
LOI_164:208:double_calculateDifferences(double,double):i => ~i
LOI_165:208:double_calculateDifferences(double,double):i => ~i
LOI_166:216:double_computeDividedDifference(double,double):x.length => ~x.length
LOI_167:217:double_computeDividedDifference(double,double):n => ~n
LOI_168:219:double_computeDividedDifference(double,double):i => ~i
LOI_169:219:double_computeDividedDifference(double,double):n => ~n
LOI_170:219:double_computeDividedDifference(double,double):i => ~i
LOI_171:220:double_computeDividedDifference(double,double):j => ~j
LOI_172:220:double_computeDividedDifference(double,double):n => ~n
LOI_173:220:double_computeDividedDifference(double,double):i => ~i
LOI_174:220:double_computeDividedDifference(double,double):j => ~j
LOI_175:221:double_computeDividedDifference(double,double):j => ~j
LOI_176:221:double_computeDividedDifference(double,double):i => ~i
LOI_177:221:double_computeDividedDifference(double,double):j => ~j
LOI_178:222:double_computeDividedDifference(double,double):j => ~j
LOI_179:222:double_computeDividedDifference(double,double):j => ~j
LOI_180:222:double_computeDividedDifference(double,double):j => ~j
LOI_181:222:double_computeDividedDifference(double,double):denominator => ~denominator
LOI_182:224:double_computeDividedDifference(double,double):i => ~i
LOI_183:232:double_computeCanberraDistance(double,double):i => ~i
LOI_184:232:double_computeCanberraDistance(double,double):a.length => ~a.length
LOI_185:232:double_computeCanberraDistance(double,double):i => ~i
LOI_186:233:double_computeCanberraDistance(double,double):i => ~i
LOI_187:233:double_computeCanberraDistance(double,double):i => ~i
LOI_188:234:double_computeCanberraDistance(double,double):i => ~i
LOI_189:234:double_computeCanberraDistance(double,double):i => ~i
LOI_190:235:double_computeCanberraDistance(double,double):num => ~num
LOI_191:235:double_computeCanberraDistance(double,double):denom => ~denom
LOI_192:235:double_computeCanberraDistance(double,double):num => ~num
LOI_193:235:double_computeCanberraDistance(double,double):denom => ~denom
LOI_194:237:double_computeCanberraDistance(double,double):sum => ~sum
LOI_195:242:double_evaluateHoners(double,double):coefficients.length => ~coefficients.length
LOI_196:243:double_evaluateHoners(double,double):n => ~n
LOI_197:244:double_evaluateHoners(double,double):j => ~j
LOI_198:244:double_evaluateHoners(double,double):j => ~j
LOI_199:245:double_evaluateHoners(double,double):argument => ~argument
LOI_200:245:double_evaluateHoners(double,double):result => ~result
LOI_201:245:double_evaluateHoners(double,double):j => ~j
LOI_202:247:double_evaluateHoners(double,double):result => ~result
LOI_203:253:double_evaluateInternal(double,double,double):x.length => ~x.length
LOI_204:254:double_evaluateInternal(double,double,double):n => ~n
LOI_205:255:double_evaluateInternal(double,double,double):n => ~n
LOI_206:256:double_evaluateInternal(double,double,double):Double.POSITIVE_INFINITY => ~Double.POSITIVE_INFINITY
LOI_207:257:double_evaluateInternal(double,double,double):i => ~i
LOI_208:257:double_evaluateInternal(double,double,double):n => ~n
LOI_209:257:double_evaluateInternal(double,double,double):i => ~i
LOI_210:258:double_evaluateInternal(double,double,double):i => ~i
LOI_211:258:double_evaluateInternal(double,double,double):i => ~i
LOI_212:259:double_evaluateInternal(double,double,double):i => ~i
LOI_213:259:double_evaluateInternal(double,double,double):i => ~i
LOI_214:260:double_evaluateInternal(double,double,double):z => ~z
LOI_215:260:double_evaluateInternal(double,double,double):i => ~i
LOI_216:261:double_evaluateInternal(double,double,double):dist => ~dist
LOI_217:261:double_evaluateInternal(double,double,double):min_dist => ~min_dist
LOI_218:262:double_evaluateInternal(double,double,double):i => ~i
LOI_219:263:double_evaluateInternal(double,double,double):dist => ~dist
LOI_220:266:double_evaluateInternal(double,double,double):nearest => ~nearest
LOI_221:267:double_evaluateInternal(double,double,double):i => ~i
LOI_222:267:double_evaluateInternal(double,double,double):n => ~n
LOI_223:267:double_evaluateInternal(double,double,double):i => ~i
LOI_224:268:double_evaluateInternal(double,double,double):j => ~j
LOI_225:268:double_evaluateInternal(double,double,double):n => ~n
LOI_226:268:double_evaluateInternal(double,double,double):i => ~i
LOI_227:268:double_evaluateInternal(double,double,double):j => ~j
LOI_228:269:double_evaluateInternal(double,double,double):j => ~j
LOI_229:269:double_evaluateInternal(double,double,double):z => ~z
LOI_230:270:double_evaluateInternal(double,double,double):i => ~i
LOI_231:270:double_evaluateInternal(double,double,double):j => ~j
LOI_232:270:double_evaluateInternal(double,double,double):z => ~z
LOI_233:271:double_evaluateInternal(double,double,double):j => ~j
LOI_234:271:double_evaluateInternal(double,double,double):i => ~i
LOI_235:271:double_evaluateInternal(double,double,double):j => ~j
LOI_236:272:double_evaluateInternal(double,double,double):j => ~j
LOI_237:272:double_evaluateInternal(double,double,double):j => ~j
LOI_238:272:double_evaluateInternal(double,double,double):divider => ~divider
LOI_239:273:double_evaluateInternal(double,double,double):j => ~j
LOI_240:273:double_evaluateInternal(double,double,double):tc => ~tc
LOI_241:273:double_evaluateInternal(double,double,double):w => ~w
LOI_242:274:double_evaluateInternal(double,double,double):j => ~j
LOI_243:274:double_evaluateInternal(double,double,double):td => ~td
LOI_244:274:double_evaluateInternal(double,double,double):w => ~w
LOI_245:276:double_evaluateInternal(double,double,double):nearest => ~nearest
LOI_246:276:double_evaluateInternal(double,double,double):n => ~n
LOI_247:276:double_evaluateInternal(double,double,double):i => ~i
LOI_248:277:double_evaluateInternal(double,double,double):nearest => ~nearest
LOI_249:279:double_evaluateInternal(double,double,double):nearest => ~nearest
LOI_250:280:double_evaluateInternal(double,double,double):nearest => ~nearest
LOI_251:283:double_evaluateInternal(double,double,double):value => ~value
LOI_252:288:double_evaluateNewton(double,double,double):c.length => ~c.length
LOI_253:289:double_evaluateNewton(double,double,double):n => ~n
LOI_254:290:double_evaluateNewton(double,double,double):i => ~i
LOI_255:290:double_evaluateNewton(double,double,double):i => ~i
LOI_256:291:double_evaluateNewton(double,double,double):i => ~i
LOI_257:291:double_evaluateNewton(double,double,double):z => ~z
LOI_258:291:double_evaluateNewton(double,double,double):i => ~i
LOI_259:291:double_evaluateNewton(double,double,double):value => ~value
LOI_260:293:double_evaluateNewton(double,double,double):value => ~value
LOI_261:299:double_meanDifference(double,double):i => ~i
LOI_262:299:double_meanDifference(double,double):sample1.length => ~sample1.length
LOI_263:299:double_meanDifference(double,double):i => ~i
LOI_264:300:double_meanDifference(double,double):i => ~i
LOI_265:300:double_meanDifference(double,double):i => ~i
LOI_266:302:double_meanDifference(double,double):sumDifference => ~sumDifference
LOI_267:302:double_meanDifference(double,double):sample1.length => ~sample1.length
LOI_268:310:double_varianceDifference(double,double):sample1.length => ~sample1.length
LOI_269:312:double_varianceDifference(double,double):i => ~i
LOI_270:312:double_varianceDifference(double,double):n => ~n
LOI_271:312:double_varianceDifference(double,double):i => ~i
LOI_272:313:double_varianceDifference(double,double):i => ~i
LOI_273:313:double_varianceDifference(double,double):i => ~i
LOI_274:315:double_varianceDifference(double,double):sumDifference => ~sumDifference
LOI_275:315:double_varianceDifference(double,double):n => ~n
LOI_276:316:double_varianceDifference(double,double):i => ~i
LOI_277:316:double_varianceDifference(double,double):n => ~n
LOI_278:316:double_varianceDifference(double,double):i => ~i
LOI_279:317:double_varianceDifference(double,double):i => ~i
LOI_280:317:double_varianceDifference(double,double):i => ~i
LOI_281:318:double_varianceDifference(double,double):diff => ~diff
LOI_282:318:double_varianceDifference(double,double):meanDifference => ~meanDifference
LOI_283:318:double_varianceDifference(double,double):diff => ~diff
LOI_284:318:double_varianceDifference(double,double):meanDifference => ~meanDifference
LOI_285:319:double_varianceDifference(double,double):diff => ~diff
LOI_286:319:double_varianceDifference(double,double):meanDifference => ~meanDifference
LOI_287:321:double_varianceDifference(double,double):sum1 => ~sum1
LOI_288:321:double_varianceDifference(double,double):sum2 => ~sum2
LOI_289:321:double_varianceDifference(double,double):sum2 => ~sum2
LOI_290:321:double_varianceDifference(double,double):n => ~n
LOI_291:321:double_varianceDifference(double,double):n => ~n
LOI_292:329:boolean_equals(double,double):x.length => ~x.length
LOI_293:329:boolean_equals(double,double):y.length => ~y.length
LOI_294:332:boolean_equals(double,double):i => ~i
LOI_295:332:boolean_equals(double,double):x.length => ~x.length
LOI_296:332:boolean_equals(double,double):i => ~i
LOI_297:333:boolean_equals(double,double):i => ~i
LOI_298:333:boolean_equals(double,double):i => ~i
LOI_299:342:boolean_checkNonNegative(double):i => ~i
LOI_300:342:boolean_checkNonNegative(double):in.length => ~in.length
LOI_301:342:boolean_checkNonNegative(double):i => ~i
LOI_302:343:boolean_checkNonNegative(double):i => ~i
LOI_303:352:boolean_checkPositive(double):i => ~i
LOI_304:352:boolean_checkPositive(double):in.length => ~in.length
LOI_305:352:boolean_checkPositive(double):i => ~i
LOI_306:353:boolean_checkPositive(double):i => ~i
LOI_307:364:double_chiSquare(double,double):i => ~i
LOI_308:364:double_chiSquare(double,double):observed.length => ~observed.length
LOI_309:364:double_chiSquare(double,double):i => ~i
LOI_310:365:double_chiSquare(double,double):i => ~i
LOI_311:366:double_chiSquare(double,double):i => ~i
LOI_312:370:double_chiSquare(double,double):sumExpected => ~sumExpected
LOI_313:370:double_chiSquare(double,double):sumObserved => ~sumObserved
LOI_314:371:double_chiSquare(double,double):sumObserved => ~sumObserved
LOI_315:371:double_chiSquare(double,double):sumExpected => ~sumExpected
LOI_316:375:double_chiSquare(double,double):i => ~i
LOI_317:375:double_chiSquare(double,double):observed.length => ~observed.length
LOI_318:375:double_chiSquare(double,double):i => ~i
LOI_319:377:double_chiSquare(double,double):i => ~i
LOI_320:377:double_chiSquare(double,double):ratio => ~ratio
LOI_321:377:double_chiSquare(double,double):i => ~i
LOI_322:378:double_chiSquare(double,double):dev => ~dev
LOI_323:378:double_chiSquare(double,double):dev => ~dev
LOI_324:378:double_chiSquare(double,double):ratio => ~ratio
LOI_325:378:double_chiSquare(double,double):i => ~i
LOI_326:380:double_chiSquare(double,double):i => ~i
LOI_327:380:double_chiSquare(double,double):i => ~i
LOI_328:381:double_chiSquare(double,double):dev => ~dev
LOI_329:381:double_chiSquare(double,double):dev => ~dev
LOI_330:381:double_chiSquare(double,double):i => ~i
LOI_331:384:double_chiSquare(double,double):sumSq => ~sumSq
LOI_332:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => ~values.length
LOI_333:390:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):Double.NaN => ~Double.NaN
LOI_334:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length => ~values.length
LOI_335:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ~i
LOI_336:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => ~length
LOI_337:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ~i
LOI_338:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ~i
LOI_339:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => ~cutoff
LOI_340:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i => ~i
LOI_341:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):cutoff => ~cutoff
LOI_342:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => ~dev
LOI_343:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev => ~dev
LOI_344:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => ~sumsq
LOI_345:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => ~length
LOI_346:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq => ~sumsq
LOI_347:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length => ~length
LOI_348:415:int_partition(double,int,int,int):pivot => ~pivot
LOI_349:416:int_partition(double,int,int,int):pivot => ~pivot
LOI_350:416:int_partition(double,int,int,int):begin => ~begin
LOI_351:417:int_partition(double,int,int,int):begin => ~begin
LOI_352:418:int_partition(double,int,int,int):end => ~end
LOI_353:419:int_partition(double,int,int,int):i => ~i
LOI_354:419:int_partition(double,int,int,int):j => ~j
LOI_355:420:int_partition(double,int,int,int):i => ~i
LOI_356:420:int_partition(double,int,int,int):j => ~j
LOI_357:420:int_partition(double,int,int,int):j => ~j
LOI_358:420:int_partition(double,int,int,int):value => ~value
LOI_359:421:int_partition(double,int,int,int):j => ~j
LOI_360:423:int_partition(double,int,int,int):i => ~i
LOI_361:423:int_partition(double,int,int,int):j => ~j
LOI_362:423:int_partition(double,int,int,int):i => ~i
LOI_363:423:int_partition(double,int,int,int):value => ~value
LOI_364:424:int_partition(double,int,int,int):i => ~i
LOI_365:426:int_partition(double,int,int,int):i => ~i
LOI_366:426:int_partition(double,int,int,int):j => ~j
LOI_367:427:int_partition(double,int,int,int):i => ~i
LOI_368:428:int_partition(double,int,int,int):i => ~i
LOI_369:428:int_partition(double,int,int,int):j => ~j
LOI_370:429:int_partition(double,int,int,int):j => ~j
LOI_371:429:int_partition(double,int,int,int):tmp => ~tmp
LOI_372:432:int_partition(double,int,int,int):i => ~i
LOI_373:432:int_partition(double,int,int,int):end => ~end
LOI_374:432:int_partition(double,int,int,int):i => ~i
LOI_375:432:int_partition(double,int,int,int):value => ~value
LOI_376:433:int_partition(double,int,int,int):i => ~i
LOI_377:435:int_partition(double,int,int,int):begin => ~begin
LOI_378:435:int_partition(double,int,int,int):i => ~i
LOI_379:436:int_partition(double,int,int,int):i => ~i
LOI_380:436:int_partition(double,int,int,int):value => ~value
LOI_381:437:int_partition(double,int,int,int):i => ~i
LOI_382:442:double_evaluateWeightedProduct(double,double,int,int):Double.NaN => ~Double.NaN
LOI_383:444:double_evaluateWeightedProduct(double,double,int,int):i => ~i
LOI_384:444:double_evaluateWeightedProduct(double,double,int,int):begin => ~begin
LOI_385:444:double_evaluateWeightedProduct(double,double,int,int):length => ~length
LOI_386:444:double_evaluateWeightedProduct(double,double,int,int):i => ~i
LOI_387:445:double_evaluateWeightedProduct(double,double,int,int):i => ~i
LOI_388:445:double_evaluateWeightedProduct(double,double,int,int):i => ~i
LOI_389:447:double_evaluateWeightedProduct(double,double,int,int):product => ~product
ASRS_1:15:double_distance(double,double):sum += dp * dp => sum /= dp * dp
ASRS_2:15:double_distance(double,double):sum += dp * dp => sum *= dp * dp
ASRS_3:15:double_distance(double,double):sum += dp * dp => sum -= dp * dp
ASRS_4:15:double_distance(double,double):sum += dp * dp => sum %= dp * dp
ASRS_5:24:double_distance1(double,double):sum += Math.abs( p1[i] - p2[i] ) => sum /= Math.abs( p1[i] - p2[i] )
ASRS_6:24:double_distance1(double,double):sum += Math.abs( p1[i] - p2[i] ) => sum *= Math.abs( p1[i] - p2[i] )
ASRS_7:24:double_distance1(double,double):sum += Math.abs( p1[i] - p2[i] ) => sum -= Math.abs( p1[i] - p2[i] )
ASRS_8:24:double_distance1(double,double):sum += Math.abs( p1[i] - p2[i] ) => sum %= Math.abs( p1[i] - p2[i] )
ASRS_9:45:double_ebeAdd(double,double):result[i] += b[i] => result[i] /= b[i]
ASRS_10:45:double_ebeAdd(double,double):result[i] += b[i] => result[i] *= b[i]
ASRS_11:45:double_ebeAdd(double,double):result[i] += b[i] => result[i] -= b[i]
ASRS_12:45:double_ebeAdd(double,double):result[i] += b[i] => result[i] %= b[i]
ASRS_13:57:double_ebeDivide(double,double):result[i] /= b[i] => result[i] += b[i]
ASRS_14:57:double_ebeDivide(double,double):result[i] /= b[i] => result[i] *= b[i]
ASRS_15:57:double_ebeDivide(double,double):result[i] /= b[i] => result[i] -= b[i]
ASRS_16:57:double_ebeDivide(double,double):result[i] /= b[i] => result[i] %= b[i]
ASRS_17:69:double_ebeMultiply(double,double):result[i] *= b[i] => result[i] += b[i]
ASRS_18:69:double_ebeMultiply(double,double):result[i] *= b[i] => result[i] /= b[i]
ASRS_19:69:double_ebeMultiply(double,double):result[i] *= b[i] => result[i] -= b[i]
ASRS_20:69:double_ebeMultiply(double,double):result[i] *= b[i] => result[i] %= b[i]
ASRS_21:81:double_ebeSubtract(double,double):result[i] -= b[i] => result[i] += b[i]
ASRS_22:81:double_ebeSubtract(double,double):result[i] -= b[i] => result[i] /= b[i]
ASRS_23:81:double_ebeSubtract(double,double):result[i] -= b[i] => result[i] *= b[i]
ASRS_24:81:double_ebeSubtract(double,double):result[i] -= b[i] => result[i] %= b[i]
ASRS_25:107:double_safeNorm(double):s1 += r * r => s1 /= r * r
ASRS_26:107:double_safeNorm(double):s1 += r * r => s1 *= r * r
ASRS_27:107:double_safeNorm(double):s1 += r * r => s1 -= r * r
ASRS_28:107:double_safeNorm(double):s1 += r * r => s1 %= r * r
ASRS_29:117:double_safeNorm(double):s3 += r * r => s3 /= r * r
ASRS_30:117:double_safeNorm(double):s3 += r * r => s3 *= r * r
ASRS_31:117:double_safeNorm(double):s3 += r * r => s3 -= r * r
ASRS_32:117:double_safeNorm(double):s3 += r * r => s3 %= r * r
ASRS_33:122:double_safeNorm(double):s2 += xabs * xabs => s2 /= xabs * xabs
ASRS_34:122:double_safeNorm(double):s2 += xabs * xabs => s2 *= xabs * xabs
ASRS_35:122:double_safeNorm(double):s2 += xabs * xabs => s2 -= xabs * xabs
ASRS_36:122:double_safeNorm(double):s2 += xabs * xabs => s2 %= xabs * xabs
ASRS_37:156:double_entropy(double):sum_k += (double) k[i] => sum_k /= (double) k[i]
ASRS_38:156:double_entropy(double):sum_k += (double) k[i] => sum_k *= (double) k[i]
ASRS_39:156:double_entropy(double):sum_k += (double) k[i] => sum_k -= (double) k[i]
ASRS_40:156:double_entropy(double):sum_k += (double) k[i] => sum_k %= (double) k[i]
ASRS_41:161:double_entropy(double):h += p_i * Math.log( p_i ) => h /= p_i * Math.log( p_i )
ASRS_42:161:double_entropy(double):h += p_i * Math.log( p_i ) => h *= p_i * Math.log( p_i )
ASRS_43:161:double_entropy(double):h += p_i * Math.log( p_i ) => h -= p_i * Math.log( p_i )
ASRS_44:161:double_entropy(double):h += p_i * Math.log( p_i ) => h %= p_i * Math.log( p_i )
ASRS_45:172:double_g(double,double):sumExpected += expected[i] => sumExpected /= expected[i]
ASRS_46:172:double_g(double,double):sumExpected += expected[i] => sumExpected *= expected[i]
ASRS_47:172:double_g(double,double):sumExpected += expected[i] => sumExpected -= expected[i]
ASRS_48:172:double_g(double,double):sumExpected += expected[i] => sumExpected %= expected[i]
ASRS_49:173:double_g(double,double):sumObserved += observed[i] => sumObserved /= observed[i]
ASRS_50:173:double_g(double,double):sumObserved += observed[i] => sumObserved *= observed[i]
ASRS_51:173:double_g(double,double):sumObserved += observed[i] => sumObserved -= observed[i]
ASRS_52:173:double_g(double,double):sumObserved += observed[i] => sumObserved %= observed[i]
ASRS_53:184:double_g(double,double):sum += (double) observed[i] * dev => sum /= (double) observed[i] * dev
ASRS_54:184:double_g(double,double):sum += (double) observed[i] * dev => sum *= (double) observed[i] * dev
ASRS_55:184:double_g(double,double):sum += (double) observed[i] * dev => sum -= (double) observed[i] * dev
ASRS_56:184:double_g(double,double):sum += (double) observed[i] * dev => sum %= (double) observed[i] * dev
ASRS_57:235:double_computeCanberraDistance(double,double):sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom => sum /= num == 0.0 && denom == 0.0 ? 0.0 : num / denom
ASRS_58:235:double_computeCanberraDistance(double,double):sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom => sum *= num == 0.0 && denom == 0.0 ? 0.0 : num / denom
ASRS_59:235:double_computeCanberraDistance(double,double):sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom => sum -= num == 0.0 && denom == 0.0 ? 0.0 : num / denom
ASRS_60:235:double_computeCanberraDistance(double,double):sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom => sum %= num == 0.0 && denom == 0.0 ? 0.0 : num / denom
ASRS_61:277:double_evaluateInternal(double,double,double):value += c[nearest] => value /= c[nearest]
ASRS_62:277:double_evaluateInternal(double,double,double):value += c[nearest] => value *= c[nearest]
ASRS_63:277:double_evaluateInternal(double,double,double):value += c[nearest] => value -= c[nearest]
ASRS_64:277:double_evaluateInternal(double,double,double):value += c[nearest] => value %= c[nearest]
ASRS_65:280:double_evaluateInternal(double,double,double):value += d[nearest] => value /= d[nearest]
ASRS_66:280:double_evaluateInternal(double,double,double):value += d[nearest] => value *= d[nearest]
ASRS_67:280:double_evaluateInternal(double,double,double):value += d[nearest] => value -= d[nearest]
ASRS_68:280:double_evaluateInternal(double,double,double):value += d[nearest] => value %= d[nearest]
ASRS_69:300:double_meanDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference /= sample1[i] - sample2[i]
ASRS_70:300:double_meanDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference *= sample1[i] - sample2[i]
ASRS_71:300:double_meanDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference -= sample1[i] - sample2[i]
ASRS_72:300:double_meanDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference %= sample1[i] - sample2[i]
ASRS_73:313:double_varianceDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference /= sample1[i] - sample2[i]
ASRS_74:313:double_varianceDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference *= sample1[i] - sample2[i]
ASRS_75:313:double_varianceDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference -= sample1[i] - sample2[i]
ASRS_76:313:double_varianceDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference %= sample1[i] - sample2[i]
ASRS_77:318:double_varianceDifference(double,double):sum1 += (diff - meanDifference) * (diff - meanDifference) => sum1 /= (diff - meanDifference) * (diff - meanDifference)
ASRS_78:318:double_varianceDifference(double,double):sum1 += (diff - meanDifference) * (diff - meanDifference) => sum1 *= (diff - meanDifference) * (diff - meanDifference)
ASRS_79:318:double_varianceDifference(double,double):sum1 += (diff - meanDifference) * (diff - meanDifference) => sum1 -= (diff - meanDifference) * (diff - meanDifference)
ASRS_80:318:double_varianceDifference(double,double):sum1 += (diff - meanDifference) * (diff - meanDifference) => sum1 %= (diff - meanDifference) * (diff - meanDifference)
ASRS_81:319:double_varianceDifference(double,double):sum2 += diff - meanDifference => sum2 /= diff - meanDifference
ASRS_82:319:double_varianceDifference(double,double):sum2 += diff - meanDifference => sum2 *= diff - meanDifference
ASRS_83:319:double_varianceDifference(double,double):sum2 += diff - meanDifference => sum2 -= diff - meanDifference
ASRS_84:319:double_varianceDifference(double,double):sum2 += diff - meanDifference => sum2 %= diff - meanDifference
ASRS_85:365:double_chiSquare(double,double):sumExpected += expected[i] => sumExpected /= expected[i]
ASRS_86:365:double_chiSquare(double,double):sumExpected += expected[i] => sumExpected *= expected[i]
ASRS_87:365:double_chiSquare(double,double):sumExpected += expected[i] => sumExpected -= expected[i]
ASRS_88:365:double_chiSquare(double,double):sumExpected += expected[i] => sumExpected %= expected[i]
ASRS_89:366:double_chiSquare(double,double):sumObserved += observed[i] => sumObserved /= observed[i]
ASRS_90:366:double_chiSquare(double,double):sumObserved += observed[i] => sumObserved *= observed[i]
ASRS_91:366:double_chiSquare(double,double):sumObserved += observed[i] => sumObserved -= observed[i]
ASRS_92:366:double_chiSquare(double,double):sumObserved += observed[i] => sumObserved %= observed[i]
ASRS_93:378:double_chiSquare(double,double):sumSq += dev * dev / (ratio * expected[i]) => sumSq /= dev * dev / (ratio * expected[i])
ASRS_94:378:double_chiSquare(double,double):sumSq += dev * dev / (ratio * expected[i]) => sumSq *= dev * dev / (ratio * expected[i])
ASRS_95:378:double_chiSquare(double,double):sumSq += dev * dev / (ratio * expected[i]) => sumSq -= dev * dev / (ratio * expected[i])
ASRS_96:378:double_chiSquare(double,double):sumSq += dev * dev / (ratio * expected[i]) => sumSq %= dev * dev / (ratio * expected[i])
ASRS_97:381:double_chiSquare(double,double):sumSq += dev * dev / expected[i] => sumSq /= dev * dev / expected[i]
ASRS_98:381:double_chiSquare(double,double):sumSq += dev * dev / expected[i] => sumSq *= dev * dev / expected[i]
ASRS_99:381:double_chiSquare(double,double):sumSq += dev * dev / expected[i] => sumSq -= dev * dev / expected[i]
ASRS_100:381:double_chiSquare(double,double):sumSq += dev * dev / expected[i] => sumSq %= dev * dev / expected[i]
ASRS_101:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq += dev * dev => sumsq /= dev * dev
ASRS_102:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq += dev * dev => sumsq *= dev * dev
ASRS_103:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq += dev * dev => sumsq -= dev * dev
ASRS_104:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq += dev * dev => sumsq %= dev * dev
ASRS_105:445:double_evaluateWeightedProduct(double,double,int,int):product *= Math.pow( values[i], weights[i] ) => product += Math.pow( values[i], weights[i] )
ASRS_106:445:double_evaluateWeightedProduct(double,double,int,int):product *= Math.pow( values[i], weights[i] ) => product /= Math.pow( values[i], weights[i] )
ASRS_107:445:double_evaluateWeightedProduct(double,double,int,int):product *= Math.pow( values[i], weights[i] ) => product -= Math.pow( values[i], weights[i] )
ASRS_108:445:double_evaluateWeightedProduct(double,double,int,int):product *= Math.pow( values[i], weights[i] ) => product %= Math.pow( values[i], weights[i] )
SDL_1:14:double_distance(double,double): double sum = 0; for (int i = 0; i < p1.length; i++) {     final double dp = p1[i] - p2[i];     sum += dp * dp; } return Math.sqrt( sum );  =>   double sum = 0; return Math.sqrt( sum );
SDL_2:15:double_distance(double,double): final double dp = p1[i] - p2[i]; sum += dp * dp;  =>   final double dp = p1[i] - p2[i];
SDL_3:17:double_distance(double,double): for (int i = 0; i < p1.length; i++) {     final double dp = p1[i] - p2[i];     sum += dp * dp; }  =>   for (int i = 0;; i++) {     final double dp = p1[i] - p2[i];     sum += dp * dp; }
SDL_4:17:double_distance(double,double): for (int i = 0; i < p1.length; i++) {     final double dp = p1[i] - p2[i];     sum += dp * dp; }  =>   for (int i = 0; i < p1.length;) {     final double dp = p1[i] - p2[i];     sum += dp * dp; }
SDL_5:18:double_distance(double,double): return Math.sqrt( sum );  =>   return 0;
SDL_6:24:double_distance1(double,double): double sum = 0; for (int i = 0; i < p1.length; i++) {     sum += Math.abs( p1[i] - p2[i] ); } return sum;  =>   double sum = 0; return sum;
SDL_7:24:double_distance1(double,double): sum += Math.abs( p1[i] - p2[i] );  =>  
SDL_8:26:double_distance1(double,double): for (int i = 0; i < p1.length; i++) {     sum += Math.abs( p1[i] - p2[i] ); }  =>   for (int i = 0;; i++) {     sum += Math.abs( p1[i] - p2[i] ); }
SDL_9:26:double_distance1(double,double): for (int i = 0; i < p1.length; i++) {     sum += Math.abs( p1[i] - p2[i] ); }  =>   for (int i = 0; i < p1.length;) {     sum += Math.abs( p1[i] - p2[i] ); }
SDL_10:27:double_distance1(double,double): return sum;  =>   return 0;
SDL_11:33:double_distanceInf(double,double): double max = 0; for (int i = 0; i < p1.length; i++) {     max = Math.max( max, Math.abs( p1[i] - p2[i] ) ); } return max;  =>   double max = 0; return max;
SDL_12:33:double_distanceInf(double,double): max = Math.max( max, Math.abs( p1[i] - p2[i] ) );  =>  
SDL_13:35:double_distanceInf(double,double): for (int i = 0; i < p1.length; i++) {     max = Math.max( max, Math.abs( p1[i] - p2[i] ) ); }  =>   for (int i = 0;; i++) {     max = Math.max( max, Math.abs( p1[i] - p2[i] ) ); }
SDL_14:35:double_distanceInf(double,double): for (int i = 0; i < p1.length; i++) {     max = Math.max( max, Math.abs( p1[i] - p2[i] ) ); }  =>   for (int i = 0; i < p1.length;) {     max = Math.max( max, Math.abs( p1[i] - p2[i] ) ); }
SDL_15:36:double_distanceInf(double,double): return max;  =>   return 0;
SDL_16:45:double_ebeAdd(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] += b[i]; } return result;  =>   final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] += b[i]; } return result;
SDL_17:45:double_ebeAdd(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] += b[i]; } return result;  =>   if (a.length != b.length) {     return null; } final double[] result = a.clone(); return result;
SDL_18:43:double_ebeAdd(double,double): if (a.length != b.length) {     return null; }  =>   if (true) {     return null; }
SDL_19:42:double_ebeAdd(double,double): return null;  =>   return 0;
SDL_20:45:double_ebeAdd(double,double): result[i] += b[i];  =>  
SDL_21:47:double_ebeAdd(double,double): for (int i = 0; i < a.length; i++) {     result[i] += b[i]; }  =>   for (int i = 0;; i++) {     result[i] += b[i]; }
SDL_22:47:double_ebeAdd(double,double): for (int i = 0; i < a.length; i++) {     result[i] += b[i]; }  =>   for (int i = 0; i < a.length;) {     result[i] += b[i]; }
SDL_23:48:double_ebeAdd(double,double): return result;  =>   return 0;
SDL_24:57:double_ebeDivide(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] /= b[i]; } return result;  =>   final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] /= b[i]; } return result;
SDL_25:57:double_ebeDivide(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] /= b[i]; } return result;  =>   if (a.length != b.length) {     return null; } final double[] result = a.clone(); return result;
SDL_26:55:double_ebeDivide(double,double): if (a.length != b.length) {     return null; }  =>   if (true) {     return null; }
SDL_27:54:double_ebeDivide(double,double): return null;  =>   return 0;
SDL_28:57:double_ebeDivide(double,double): result[i] /= b[i];  =>  
SDL_29:59:double_ebeDivide(double,double): for (int i = 0; i < a.length; i++) {     result[i] /= b[i]; }  =>   for (int i = 0;; i++) {     result[i] /= b[i]; }
SDL_30:59:double_ebeDivide(double,double): for (int i = 0; i < a.length; i++) {     result[i] /= b[i]; }  =>   for (int i = 0; i < a.length;) {     result[i] /= b[i]; }
SDL_31:60:double_ebeDivide(double,double): return result;  =>   return 0;
SDL_32:69:double_ebeMultiply(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] *= b[i]; } return result;  =>   final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] *= b[i]; } return result;
SDL_33:69:double_ebeMultiply(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] *= b[i]; } return result;  =>   if (a.length != b.length) {     return null; } final double[] result = a.clone(); return result;
SDL_34:67:double_ebeMultiply(double,double): if (a.length != b.length) {     return null; }  =>   if (true) {     return null; }
SDL_35:66:double_ebeMultiply(double,double): return null;  =>   return 0;
SDL_36:69:double_ebeMultiply(double,double): result[i] *= b[i];  =>  
SDL_37:71:double_ebeMultiply(double,double): for (int i = 0; i < a.length; i++) {     result[i] *= b[i]; }  =>   for (int i = 0;; i++) {     result[i] *= b[i]; }
SDL_38:71:double_ebeMultiply(double,double): for (int i = 0; i < a.length; i++) {     result[i] *= b[i]; }  =>   for (int i = 0; i < a.length;) {     result[i] *= b[i]; }
SDL_39:72:double_ebeMultiply(double,double): return result;  =>   return 0;
SDL_40:81:double_ebeSubtract(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] -= b[i]; } return result;  =>   final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] -= b[i]; } return result;
SDL_41:81:double_ebeSubtract(double,double): if (a.length != b.length) {     return null; } final double[] result = a.clone(); for (int i = 0; i < a.length; i++) {     result[i] -= b[i]; } return result;  =>   if (a.length != b.length) {     return null; } final double[] result = a.clone(); return result;
SDL_42:79:double_ebeSubtract(double,double): if (a.length != b.length) {     return null; }  =>   if (true) {     return null; }
SDL_43:78:double_ebeSubtract(double,double): return null;  =>   return 0;
SDL_44:81:double_ebeSubtract(double,double): result[i] -= b[i];  =>  
SDL_45:83:double_ebeSubtract(double,double): for (int i = 0; i < a.length; i++) {     result[i] -= b[i]; }  =>   for (int i = 0;; i++) {     result[i] -= b[i]; }
SDL_46:83:double_ebeSubtract(double,double): for (int i = 0; i < a.length; i++) {     result[i] -= b[i]; }  =>   for (int i = 0; i < a.length;) {     result[i] -= b[i]; }
SDL_47:84:double_ebeSubtract(double,double): return result;  =>   return 0;
SDL_48:112:double_safeNorm(double): double rdwarf = 3.834e-20; double rgiant = 1.304e+19; double s1 = 0; double s2 = 0; double s3 = 0; double x1max = 0; double x3max = 0; double floatn = v.length; double agiant = rgiant / floatn; for (int i = 0; i < v.length; i++) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } } double norm; if (s1 != 0) {     norm = x1max * Math.sqrt( s1 + s2 / x1max / x1max ); } else {     if (s2 == 0) {         norm = x3max * Math.sqrt( s3 );     } else {         if (s2 >= x3max) {             norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );         } else {             norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );         }     } } return norm;  =>   double rdwarf = 3.834e-20; double rgiant = 1.304e+19; double s1 = 0; double s2 = 0; double s3 = 0; double x1max = 0; double x3max = 0; double floatn = v.length; double agiant = rgiant / floatn; double norm; if (s1 != 0) {     norm = x1max * Math.sqrt( s1 + s2 / x1max / x1max ); } else {     if (s2 == 0) {         norm = x3max * Math.sqrt( s3 );     } else {         if (s2 >= x3max) {             norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );         } else {             norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );         }     } } return norm;
SDL_49:127:double_safeNorm(double): double rdwarf = 3.834e-20; double rgiant = 1.304e+19; double s1 = 0; double s2 = 0; double s3 = 0; double x1max = 0; double x3max = 0; double floatn = v.length; double agiant = rgiant / floatn; for (int i = 0; i < v.length; i++) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } } double norm; if (s1 != 0) {     norm = x1max * Math.sqrt( s1 + s2 / x1max / x1max ); } else {     if (s2 == 0) {         norm = x3max * Math.sqrt( s3 );     } else {         if (s2 >= x3max) {             norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );         } else {             norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );         }     } } return norm;  =>   double rdwarf = 3.834e-20; double rgiant = 1.304e+19; double s1 = 0; double s2 = 0; double s3 = 0; double x1max = 0; double x3max = 0; double floatn = v.length; double agiant = rgiant / floatn; for (int i = 0; i < v.length; i++) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } } double norm; return norm;
SDL_50:99:double_safeNorm(double): double xabs = Math.abs( v[i] ); if (xabs < rdwarf || xabs > agiant) {     if (xabs > rdwarf) {         if (xabs > x1max) {             double r = x1max / xabs;             s1 = 1 + s1 * r * r;             x1max = xabs;         } else {             double r = xabs / x1max;             s1 += r * r;         }     } else {         if (xabs > x3max) {             double r = x3max / xabs;             s3 = 1 + s3 * r * r;             x3max = xabs;         } else {             if (xabs != 0) {                 double r = xabs / x3max;                 s3 += r * r;             }         }     } } else {     s2 += xabs * xabs; }  =>   double xabs = Math.abs( v[i] );
SDL_51:125:double_safeNorm(double): for (int i = 0; i < v.length; i++) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } }  =>   for (int i = 0;; i++) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } }
SDL_52:125:double_safeNorm(double): for (int i = 0; i < v.length; i++) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } }  =>   for (int i = 0; i < v.length;) {     double xabs = Math.abs( v[i] );     if (xabs < rdwarf || xabs > agiant) {         if (xabs > rdwarf) {             if (xabs > x1max) {                 double r = x1max / xabs;                 s1 = 1 + s1 * r * r;                 x1max = xabs;             } else {                 double r = xabs / x1max;                 s1 += r * r;             }         } else {             if (xabs > x3max) {                 double r = x3max / xabs;                 s3 = 1 + s3 * r * r;                 x3max = xabs;             } else {                 if (xabs != 0) {                     double r = xabs / x3max;                     s3 += r * r;                 }             }         }     } else {         s2 += xabs * xabs;     } }
SDL_53:100:double_safeNorm(double): if (xabs > rdwarf) {     if (xabs > x1max) {         double r = x1max / xabs;         s1 = 1 + s1 * r * r;         x1max = xabs;     } else {         double r = xabs / x1max;         s1 += r * r;     } } else {     if (xabs > x3max) {         double r = x3max / xabs;         s3 = 1 + s3 * r * r;         x3max = xabs;     } else {         if (xabs != 0) {             double r = xabs / x3max;             s3 += r * r;         }     } }  =>  
SDL_54:124:double_safeNorm(double): if (xabs < rdwarf || xabs > agiant) {     if (xabs > rdwarf) {         if (xabs > x1max) {             double r = x1max / xabs;             s1 = 1 + s1 * r * r;             x1max = xabs;         } else {             double r = xabs / x1max;             s1 += r * r;         }     } else {         if (xabs > x3max) {             double r = x3max / xabs;             s3 = 1 + s3 * r * r;             x3max = xabs;         } else {             if (xabs != 0) {                 double r = xabs / x3max;                 s3 += r * r;             }         }     } } else {     s2 += xabs * xabs; }  =>   if (true) {     if (xabs > rdwarf) {         if (xabs > x1max) {             double r = x1max / xabs;             s1 = 1 + s1 * r * r;             x1max = xabs;         } else {             double r = xabs / x1max;             s1 += r * r;         }     } else {         if (xabs > x3max) {             double r = x3max / xabs;             s3 = 1 + s3 * r * r;             x3max = xabs;         } else {             if (xabs != 0) {                 double r = xabs / x3max;                 s3 += r * r;             }         }     } } else {     s2 += xabs * xabs; }
SDL_55:122:double_safeNorm(double): s2 += xabs * xabs;  =>  
SDL_56:101:double_safeNorm(double): if (xabs > x1max) {     double r = x1max / xabs;     s1 = 1 + s1 * r * r;     x1max = xabs; } else {     double r = xabs / x1max;     s1 += r * r; }  =>  
SDL_57:121:double_safeNorm(double): if (xabs > rdwarf) {     if (xabs > x1max) {         double r = x1max / xabs;         s1 = 1 + s1 * r * r;         x1max = xabs;     } else {         double r = xabs / x1max;         s1 += r * r;     } } else {     if (xabs > x3max) {         double r = x3max / xabs;         s3 = 1 + s3 * r * r;         x3max = xabs;     } else {         if (xabs != 0) {             double r = xabs / x3max;             s3 += r * r;         }     } }  =>   if (true) {     if (xabs > x1max) {         double r = x1max / xabs;         s1 = 1 + s1 * r * r;         x1max = xabs;     } else {         double r = xabs / x1max;         s1 += r * r;     } } else {     if (xabs > x3max) {         double r = x3max / xabs;         s3 = 1 + s3 * r * r;         x3max = xabs;     } else {         if (xabs != 0) {             double r = xabs / x3max;             s3 += r * r;         }     } }
SDL_58:110:double_safeNorm(double): if (xabs > x3max) {     double r = x3max / xabs;     s3 = 1 + s3 * r * r;     x3max = xabs; } else {     if (xabs != 0) {         double r = xabs / x3max;         s3 += r * r;     } }  =>  
SDL_59:104:double_safeNorm(double): double r = x1max / xabs; s1 = 1 + s1 * r * r; x1max = xabs;  =>   double r = x1max / xabs; x1max = xabs;
SDL_60:104:double_safeNorm(double): double r = x1max / xabs; s1 = 1 + s1 * r * r; x1max = xabs;  =>   double r = x1max / xabs; s1 = 1 + s1 * r * r;
SDL_61:109:double_safeNorm(double): if (xabs > x1max) {     double r = x1max / xabs;     s1 = 1 + s1 * r * r;     x1max = xabs; } else {     double r = xabs / x1max;     s1 += r * r; }  =>   if (true) {     double r = x1max / xabs;     s1 = 1 + s1 * r * r;     x1max = xabs; } else {     double r = xabs / x1max;     s1 += r * r; }
SDL_62:107:double_safeNorm(double): double r = xabs / x1max; s1 += r * r;  =>   double r = xabs / x1max;
SDL_63:113:double_safeNorm(double): double r = x3max / xabs; s3 = 1 + s3 * r * r; x3max = xabs;  =>   double r = x3max / xabs; x3max = xabs;
SDL_64:113:double_safeNorm(double): double r = x3max / xabs; s3 = 1 + s3 * r * r; x3max = xabs;  =>   double r = x3max / xabs; s3 = 1 + s3 * r * r;
SDL_65:120:double_safeNorm(double): if (xabs > x3max) {     double r = x3max / xabs;     s3 = 1 + s3 * r * r;     x3max = xabs; } else {     if (xabs != 0) {         double r = xabs / x3max;         s3 += r * r;     } }  =>   if (true) {     double r = x3max / xabs;     s3 = 1 + s3 * r * r;     x3max = xabs; } else {     if (xabs != 0) {         double r = xabs / x3max;         s3 += r * r;     } }
SDL_66:115:double_safeNorm(double): if (xabs != 0) {     double r = xabs / x3max;     s3 += r * r; }  =>  
SDL_67:117:double_safeNorm(double): double r = xabs / x3max; s3 += r * r;  =>   double r = xabs / x3max;
SDL_68:119:double_safeNorm(double): if (xabs != 0) {     double r = xabs / x3max;     s3 += r * r; }  =>   if (true) {     double r = xabs / x3max;     s3 += r * r; }
SDL_69:127:double_safeNorm(double): norm = x1max * Math.sqrt( s1 + s2 / x1max / x1max );  =>  
SDL_70:139:double_safeNorm(double): if (s1 != 0) {     norm = x1max * Math.sqrt( s1 + s2 / x1max / x1max ); } else {     if (s2 == 0) {         norm = x3max * Math.sqrt( s3 );     } else {         if (s2 >= x3max) {             norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );         } else {             norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );         }     } }  =>   if (true) {     norm = x1max * Math.sqrt( s1 + s2 / x1max / x1max ); } else {     if (s2 == 0) {         norm = x3max * Math.sqrt( s3 );     } else {         if (s2 >= x3max) {             norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );         } else {             norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );         }     } }
SDL_71:129:double_safeNorm(double): if (s2 == 0) {     norm = x3max * Math.sqrt( s3 ); } else {     if (s2 >= x3max) {         norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );     } else {         norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );     } }  =>  
SDL_72:130:double_safeNorm(double): norm = x3max * Math.sqrt( s3 );  =>  
SDL_73:138:double_safeNorm(double): if (s2 == 0) {     norm = x3max * Math.sqrt( s3 ); } else {     if (s2 >= x3max) {         norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );     } else {         norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );     } }  =>   if (true) {     norm = x3max * Math.sqrt( s3 ); } else {     if (s2 >= x3max) {         norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );     } else {         norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );     } }
SDL_74:132:double_safeNorm(double): if (s2 >= x3max) {     norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) ); } else {     norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) ); }  =>  
SDL_75:133:double_safeNorm(double): norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) );  =>  
SDL_76:137:double_safeNorm(double): if (s2 >= x3max) {     norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) ); } else {     norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) ); }  =>   if (true) {     norm = Math.sqrt( s2 * (1 + x3max / s2 * (x3max * s3)) ); } else {     norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) ); }
SDL_77:135:double_safeNorm(double): norm = Math.sqrt( x3max * (s2 / x3max + x3max * s3) );  =>  
SDL_78:140:double_safeNorm(double): return norm;  =>   return 0;
SDL_79:146:double_scale(double,double): double[] newArr = new double[arr.length]; for (int i = 0; i < arr.length; i++) {     newArr[i] = arr[i] * val; } return newArr;  =>   double[] newArr = new double[arr.length]; return newArr;
SDL_80:146:double_scale(double,double): newArr[i] = arr[i] * val;  =>  
SDL_81:148:double_scale(double,double): for (int i = 0; i < arr.length; i++) {     newArr[i] = arr[i] * val; }  =>   for (int i = 0;; i++) {     newArr[i] = arr[i] * val; }
SDL_82:148:double_scale(double,double): for (int i = 0; i < arr.length; i++) {     newArr[i] = arr[i] * val; }  =>   for (int i = 0; i < arr.length;) {     newArr[i] = arr[i] * val; }
SDL_83:149:double_scale(double,double): return newArr;  =>   return 0;
SDL_84:162:double_entropy(double): double h = 0d; double sum_k = 0d; for (int i = 0; i < k.length; i++) {     sum_k += (double) k[i]; } for (int i = 0; i < k.length; i++) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } } return -h;  =>   double h = 0d; double sum_k = 0d; for (int i = 0; i < k.length; i++) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } } return -h;
SDL_85:159:double_entropy(double): double h = 0d; double sum_k = 0d; for (int i = 0; i < k.length; i++) {     sum_k += (double) k[i]; } for (int i = 0; i < k.length; i++) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } } return -h;  =>   double h = 0d; double sum_k = 0d; for (int i = 0; i < k.length; i++) {     sum_k += (double) k[i]; } return -h;
SDL_86:156:double_entropy(double): sum_k += (double) k[i];  =>  
SDL_87:158:double_entropy(double): for (int i = 0; i < k.length; i++) {     sum_k += (double) k[i]; }  =>   for (int i = 0;; i++) {     sum_k += (double) k[i]; }
SDL_88:158:double_entropy(double): for (int i = 0; i < k.length; i++) {     sum_k += (double) k[i]; }  =>   for (int i = 0; i < k.length;) {     sum_k += (double) k[i]; }
SDL_89:159:double_entropy(double): if (k[i] != 0) {     final double p_i = (double) k[i] / sum_k;     h += p_i * Math.log( p_i ); }  =>  
SDL_90:164:double_entropy(double): for (int i = 0; i < k.length; i++) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } }  =>   for (int i = 0;; i++) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } }
SDL_91:164:double_entropy(double): for (int i = 0; i < k.length; i++) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } }  =>   for (int i = 0; i < k.length;) {     if (k[i] != 0) {         final double p_i = (double) k[i] / sum_k;         h += p_i * Math.log( p_i );     } }
SDL_92:161:double_entropy(double): final double p_i = (double) k[i] / sum_k; h += p_i * Math.log( p_i );  =>   final double p_i = (double) k[i] / sum_k;
SDL_93:163:double_entropy(double): if (k[i] != 0) {     final double p_i = (double) k[i] / sum_k;     h += p_i * Math.log( p_i ); }  =>   if (true) {     final double p_i = (double) k[i] / sum_k;     h += p_i * Math.log( p_i ); }
SDL_94:165:double_entropy(double): return -h;  =>   return 0;
SDL_95:183:double_g(double,double): double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sum = 0d; for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; } return 2d * sum;  =>   double sumExpected = 0d; double sumObserved = 0d; double ratio = 1d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sum = 0d; for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; } return 2d * sum;
SDL_96:183:double_g(double,double): double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sum = 0d; for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; } return 2d * sum;  =>   double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1d; boolean rescale = false; double sum = 0d; for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; } return 2d * sum;
SDL_97:183:double_g(double,double): double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sum = 0d; for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; } return 2d * sum;  =>   double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sum = 0d; return 2d * sum;
SDL_98:173:double_g(double,double): sumExpected += expected[i]; sumObserved += observed[i];  =>   sumObserved += observed[i];
SDL_99:173:double_g(double,double): sumExpected += expected[i]; sumObserved += observed[i];  =>   sumExpected += expected[i];
SDL_100:175:double_g(double,double): for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; }  =>   for (int i = 0;; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; }
SDL_101:175:double_g(double,double): for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; }  =>   for (int i = 0; i < observed.length;) {     sumExpected += expected[i];     sumObserved += observed[i]; }
SDL_102:179:double_g(double,double): ratio = sumObserved / sumExpected; rescale = true;  =>   rescale = true;
SDL_103:179:double_g(double,double): ratio = sumObserved / sumExpected; rescale = true;  =>   ratio = sumObserved / sumExpected;
SDL_104:181:double_g(double,double): if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; }  =>   if (true) {     ratio = sumObserved / sumExpected;     rescale = true; }
SDL_105:184:double_g(double,double): final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] ); sum += (double) observed[i] * dev;  =>   final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );
SDL_106:186:double_g(double,double): for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; }  =>   for (int i = 0;; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; }
SDL_107:186:double_g(double,double): for (int i = 0; i < observed.length; i++) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; }  =>   for (int i = 0; i < observed.length;) {     final double dev = rescale ? Math.log( (double) observed[i] / (ratio * expected[i]) ) : Math.log( (double) observed[i] / expected[i] );     sum += (double) observed[i] * dev; }
SDL_108:187:double_g(double,double): return 2d * sum;  =>   return 0;
SDL_109:199:double_calculateAbsoluteDifferences(double): if (z == null) {     return null; } if (z.length == 0) {     return null; } final double[] zAbs = new double[z.length]; for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); } return zAbs;  =>   if (z.length == 0) {     return null; } final double[] zAbs = new double[z.length]; for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); } return zAbs;
SDL_110:199:double_calculateAbsoluteDifferences(double): if (z == null) {     return null; } if (z.length == 0) {     return null; } final double[] zAbs = new double[z.length]; for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); } return zAbs;  =>   if (z == null) {     return null; } final double[] zAbs = new double[z.length]; for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); } return zAbs;
SDL_111:199:double_calculateAbsoluteDifferences(double): if (z == null) {     return null; } if (z.length == 0) {     return null; } final double[] zAbs = new double[z.length]; for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); } return zAbs;  =>   if (z == null) {     return null; } if (z.length == 0) {     return null; } final double[] zAbs = new double[z.length]; return zAbs;
SDL_112:194:double_calculateAbsoluteDifferences(double): if (z == null) {     return null; }  =>   if (true) {     return null; }
SDL_113:193:double_calculateAbsoluteDifferences(double): return null;  =>   return 0;
SDL_114:197:double_calculateAbsoluteDifferences(double): if (z.length == 0) {     return null; }  =>   if (true) {     return null; }
SDL_115:196:double_calculateAbsoluteDifferences(double): return null;  =>   return 0;
SDL_116:199:double_calculateAbsoluteDifferences(double): zAbs[i] = Math.abs( z[i] );  =>  
SDL_117:201:double_calculateAbsoluteDifferences(double): for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); }  =>   for (int i = 0;; ++i) {     zAbs[i] = Math.abs( z[i] ); }
SDL_118:201:double_calculateAbsoluteDifferences(double): for (int i = 0; i < z.length; ++i) {     zAbs[i] = Math.abs( z[i] ); }  =>   for (int i = 0; i < z.length;) {     zAbs[i] = Math.abs( z[i] ); }
SDL_119:202:double_calculateAbsoluteDifferences(double): return zAbs;  =>   return 0;
SDL_120:208:double_calculateDifferences(double,double): final double[] z = new double[x.length]; for (int i = 0; i < x.length; ++i) {     z[i] = y[i] - x[i]; } return z;  =>   final double[] z = new double[x.length]; return z;
SDL_121:208:double_calculateDifferences(double,double): z[i] = y[i] - x[i];  =>  
SDL_122:210:double_calculateDifferences(double,double): for (int i = 0; i < x.length; ++i) {     z[i] = y[i] - x[i]; }  =>   for (int i = 0;; ++i) {     z[i] = y[i] - x[i]; }
SDL_123:210:double_calculateDifferences(double,double): for (int i = 0; i < x.length; ++i) {     z[i] = y[i] - x[i]; }  =>   for (int i = 0; i < x.length;) {     z[i] = y[i] - x[i]; }
SDL_124:211:double_calculateDifferences(double,double): return z;  =>   return 0;
SDL_125:226:double_computeDividedDifference(double,double): final double[] divdiff = y.clone(); final int n = x.length; final double[] a = new double[n]; a[0] = divdiff[0]; for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; } return a;  =>   final double[] divdiff = y.clone(); final int n = x.length; final double[] a = new double[n]; for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; } return a;
SDL_126:220:double_computeDividedDifference(double,double): final double[] divdiff = y.clone(); final int n = x.length; final double[] a = new double[n]; a[0] = divdiff[0]; for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; } return a;  =>   final double[] divdiff = y.clone(); final int n = x.length; final double[] a = new double[n]; a[0] = divdiff[0]; return a;
SDL_127:221:double_computeDividedDifference(double,double): for (int j = 0; j < n - i; j++) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; } a[i] = divdiff[0];  =>   a[i] = divdiff[0];
SDL_128:224:double_computeDividedDifference(double,double): for (int j = 0; j < n - i; j++) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; } a[i] = divdiff[0];  =>   for (int j = 0; j < n - i; j++) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; }
SDL_129:226:double_computeDividedDifference(double,double): for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; }  =>   for (int i = 1;; i++) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; }
SDL_130:226:double_computeDividedDifference(double,double): for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; }  =>   for (int i = 1; i < n;) {     for (int j = 0; j < n - i; j++) {         final double denominator = x[j + i] - x[j];         divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;     }     a[i] = divdiff[0]; }
SDL_131:222:double_computeDividedDifference(double,double): final double denominator = x[j + i] - x[j]; divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;  =>   final double denominator = x[j + i] - x[j];
SDL_132:224:double_computeDividedDifference(double,double): for (int j = 0; j < n - i; j++) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; }  =>   for (int j = 0;; j++) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; }
SDL_133:224:double_computeDividedDifference(double,double): for (int j = 0; j < n - i; j++) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; }  =>   for (int j = 0; j < n - i;) {     final double denominator = x[j + i] - x[j];     divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; }
SDL_134:227:double_computeDividedDifference(double,double): return a;  =>   return 0;
SDL_135:233:double_computeCanberraDistance(double,double): double sum = 0; for (int i = 0; i < a.length; i++) {     final double num = Math.abs( a[i] - b[i] );     final double denom = Math.abs( a[i] ) + Math.abs( b[i] );     sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom; } return sum;  =>   double sum = 0; return sum;
SDL_136:235:double_computeCanberraDistance(double,double): final double num = Math.abs( a[i] - b[i] ); final double denom = Math.abs( a[i] ) + Math.abs( b[i] ); sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom;  =>   final double num = Math.abs( a[i] - b[i] ); final double denom = Math.abs( a[i] ) + Math.abs( b[i] );
SDL_137:237:double_computeCanberraDistance(double,double): for (int i = 0; i < a.length; i++) {     final double num = Math.abs( a[i] - b[i] );     final double denom = Math.abs( a[i] ) + Math.abs( b[i] );     sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom; }  =>   for (int i = 0;; i++) {     final double num = Math.abs( a[i] - b[i] );     final double denom = Math.abs( a[i] ) + Math.abs( b[i] );     sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom; }
SDL_138:237:double_computeCanberraDistance(double,double): for (int i = 0; i < a.length; i++) {     final double num = Math.abs( a[i] - b[i] );     final double denom = Math.abs( a[i] ) + Math.abs( b[i] );     sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom; }  =>   for (int i = 0; i < a.length;) {     final double num = Math.abs( a[i] - b[i] );     final double denom = Math.abs( a[i] ) + Math.abs( b[i] );     sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom; }
SDL_139:238:double_computeCanberraDistance(double,double): return sum;  =>   return 0;
SDL_140:245:double_evaluateHoners(double,double): int n = coefficients.length; double result = coefficients[n - 1]; for (int j = n - 2; j >= 0; j--) {     result = argument * result + coefficients[j]; } return result;  =>   int n = coefficients.length; double result = coefficients[n - 1]; return result;
SDL_141:245:double_evaluateHoners(double,double): result = argument * result + coefficients[j];  =>  
SDL_142:247:double_evaluateHoners(double,double): for (int j = n - 2; j >= 0; j--) {     result = argument * result + coefficients[j]; }  =>   for (int j = n - 2;; j--) {     result = argument * result + coefficients[j]; }
SDL_143:247:double_evaluateHoners(double,double): for (int j = n - 2; j >= 0; j--) {     result = argument * result + coefficients[j]; }  =>   for (int j = n - 2; j >= 0;) {     result = argument * result + coefficients[j]; }
SDL_144:248:double_evaluateHoners(double,double): return result;  =>   return 0;
SDL_145:275:double_evaluateInternal(double,double,double): int nearest = 0; final int n = x.length; final double[] c = new double[n]; final double[] d = new double[n]; double min_dist = Double.POSITIVE_INFINITY; for (int i = 0; i < n; i++) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } } double value = y[nearest]; for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } } return value;  =>   int nearest = 0; final int n = x.length; final double[] c = new double[n]; final double[] d = new double[n]; double min_dist = Double.POSITIVE_INFINITY; double value = y[nearest]; for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } } return value;
SDL_146:268:double_evaluateInternal(double,double,double): int nearest = 0; final int n = x.length; final double[] c = new double[n]; final double[] d = new double[n]; double min_dist = Double.POSITIVE_INFINITY; for (int i = 0; i < n; i++) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } } double value = y[nearest]; for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } } return value;  =>   int nearest = 0; final int n = x.length; final double[] c = new double[n]; final double[] d = new double[n]; double min_dist = Double.POSITIVE_INFINITY; for (int i = 0; i < n; i++) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } } double value = y[nearest]; return value;
SDL_147:264:double_evaluateInternal(double,double,double): c[i] = y[i]; d[i] = y[i]; final double dist = Math.abs( z - x[i] ); if (dist < min_dist) {     nearest = i;     min_dist = dist; }  =>   d[i] = y[i]; final double dist = Math.abs( z - x[i] ); if (dist < min_dist) {     nearest = i;     min_dist = dist; }
SDL_148:264:double_evaluateInternal(double,double,double): c[i] = y[i]; d[i] = y[i]; final double dist = Math.abs( z - x[i] ); if (dist < min_dist) {     nearest = i;     min_dist = dist; }  =>   c[i] = y[i]; final double dist = Math.abs( z - x[i] ); if (dist < min_dist) {     nearest = i;     min_dist = dist; }
SDL_149:261:double_evaluateInternal(double,double,double): c[i] = y[i]; d[i] = y[i]; final double dist = Math.abs( z - x[i] ); if (dist < min_dist) {     nearest = i;     min_dist = dist; }  =>   c[i] = y[i]; d[i] = y[i]; final double dist = Math.abs( z - x[i] );
SDL_150:266:double_evaluateInternal(double,double,double): for (int i = 0; i < n; i++) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } }  =>   for (int i = 0;; i++) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } }
SDL_151:266:double_evaluateInternal(double,double,double): for (int i = 0; i < n; i++) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } }  =>   for (int i = 0; i < n;) {     c[i] = y[i];     d[i] = y[i];     final double dist = Math.abs( z - x[i] );     if (dist < min_dist) {         nearest = i;         min_dist = dist;     } }
SDL_152:263:double_evaluateInternal(double,double,double): nearest = i; min_dist = dist;  =>   min_dist = dist;
SDL_153:263:double_evaluateInternal(double,double,double): nearest = i; min_dist = dist;  =>   nearest = i;
SDL_154:265:double_evaluateInternal(double,double,double): if (dist < min_dist) {     nearest = i;     min_dist = dist; }  =>   if (true) {     nearest = i;     min_dist = dist; }
SDL_155:274:double_evaluateInternal(double,double,double): for (int j = 0; j < n - i; j++) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; } if (nearest < 0.5 * (n - i + 1)) {     value += c[nearest]; } else {     nearest--;     value += d[nearest]; }  =>   if (nearest < 0.5 * (n - i + 1)) {     value += c[nearest]; } else {     nearest--;     value += d[nearest]; }
SDL_156:276:double_evaluateInternal(double,double,double): for (int j = 0; j < n - i; j++) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; } if (nearest < 0.5 * (n - i + 1)) {     value += c[nearest]; } else {     nearest--;     value += d[nearest]; }  =>   for (int j = 0; j < n - i; j++) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; }
SDL_157:283:double_evaluateInternal(double,double,double): for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } }  =>   for (int i = 1;; i++) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } }
SDL_158:283:double_evaluateInternal(double,double,double): for (int i = 1; i < n; i++) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } }  =>   for (int i = 1; i < n;) {     for (int j = 0; j < n - i; j++) {         final double tc = x[j] - z;         final double td = x[i + j] - z;         final double divider = x[j] - x[i + j];         final double w = (c[j + 1] - d[j]) / divider;         c[j] = tc * w;         d[j] = td * w;     }     if (nearest < 0.5 * (n - i + 1)) {         value += c[nearest];     } else {         nearest--;         value += d[nearest];     } }
SDL_159:274:double_evaluateInternal(double,double,double): final double tc = x[j] - z; final double td = x[i + j] - z; final double divider = x[j] - x[i + j]; final double w = (c[j + 1] - d[j]) / divider; c[j] = tc * w; d[j] = td * w;  =>   final double tc = x[j] - z; final double td = x[i + j] - z; final double divider = x[j] - x[i + j]; final double w = (c[j + 1] - d[j]) / divider; d[j] = td * w;
SDL_160:274:double_evaluateInternal(double,double,double): final double tc = x[j] - z; final double td = x[i + j] - z; final double divider = x[j] - x[i + j]; final double w = (c[j + 1] - d[j]) / divider; c[j] = tc * w; d[j] = td * w;  =>   final double tc = x[j] - z; final double td = x[i + j] - z; final double divider = x[j] - x[i + j]; final double w = (c[j + 1] - d[j]) / divider; c[j] = tc * w;
SDL_161:276:double_evaluateInternal(double,double,double): for (int j = 0; j < n - i; j++) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; }  =>   for (int j = 0;; j++) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; }
SDL_162:276:double_evaluateInternal(double,double,double): for (int j = 0; j < n - i; j++) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; }  =>   for (int j = 0; j < n - i;) {     final double tc = x[j] - z;     final double td = x[i + j] - z;     final double divider = x[j] - x[i + j];     final double w = (c[j + 1] - d[j]) / divider;     c[j] = tc * w;     d[j] = td * w; }
SDL_163:277:double_evaluateInternal(double,double,double): value += c[nearest];  =>  
SDL_164:282:double_evaluateInternal(double,double,double): if (nearest < 0.5 * (n - i + 1)) {     value += c[nearest]; } else {     nearest--;     value += d[nearest]; }  =>   if (true) {     value += c[nearest]; } else {     nearest--;     value += d[nearest]; }
SDL_165:280:double_evaluateInternal(double,double,double): nearest--; value += d[nearest];  =>   value += d[nearest];
SDL_166:280:double_evaluateInternal(double,double,double): nearest--; value += d[nearest];  =>   nearest--;
SDL_167:284:double_evaluateInternal(double,double,double): return value;  =>   return 0;
SDL_168:291:double_evaluateNewton(double,double,double): final int n = c.length - 1; double value = a[n]; for (int i = n - 1; i >= 0; i--) {     value = a[i] + (z - c[i]) * value; } return value;  =>   final int n = c.length - 1; double value = a[n]; return value;
SDL_169:291:double_evaluateNewton(double,double,double): value = a[i] + (z - c[i]) * value;  =>  
SDL_170:293:double_evaluateNewton(double,double,double): for (int i = n - 1; i >= 0; i--) {     value = a[i] + (z - c[i]) * value; }  =>   for (int i = n - 1;; i--) {     value = a[i] + (z - c[i]) * value; }
SDL_171:293:double_evaluateNewton(double,double,double): for (int i = n - 1; i >= 0; i--) {     value = a[i] + (z - c[i]) * value; }  =>   for (int i = n - 1; i >= 0;) {     value = a[i] + (z - c[i]) * value; }
SDL_172:294:double_evaluateNewton(double,double,double): return value;  =>   return 0;
SDL_173:300:double_meanDifference(double,double): double sumDifference = 0; for (int i = 0; i < sample1.length; i++) {     sumDifference += sample1[i] - sample2[i]; } return sumDifference / sample1.length;  =>   double sumDifference = 0; return sumDifference / sample1.length;
SDL_174:300:double_meanDifference(double,double): sumDifference += sample1[i] - sample2[i];  =>  
SDL_175:302:double_meanDifference(double,double): for (int i = 0; i < sample1.length; i++) {     sumDifference += sample1[i] - sample2[i]; }  =>   for (int i = 0;; i++) {     sumDifference += sample1[i] - sample2[i]; }
SDL_176:302:double_meanDifference(double,double): for (int i = 0; i < sample1.length; i++) {     sumDifference += sample1[i] - sample2[i]; }  =>   for (int i = 0; i < sample1.length;) {     sumDifference += sample1[i] - sample2[i]; }
SDL_177:303:double_meanDifference(double,double): return sumDifference / sample1.length;  =>   return 0;
SDL_178:319:double_varianceDifference(double,double): double sum1 = 0d; double sum2 = 0d; double diff = 0d; int n = sample1.length; double sumDifference = 0; for (int i = 0; i < n; i++) {     sumDifference += sample1[i] - sample2[i]; } double meanDifference = sumDifference / n; for (int i = 0; i < n; i++) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; } return (sum1 - sum2 * sum2 / n) / (n - 1);  =>   double sum1 = 0d; double sum2 = 0d; double diff = 0d; int n = sample1.length; double sumDifference = 0; double meanDifference = sumDifference / n; for (int i = 0; i < n; i++) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; } return (sum1 - sum2 * sum2 / n) / (n - 1);
SDL_179:317:double_varianceDifference(double,double): double sum1 = 0d; double sum2 = 0d; double diff = 0d; int n = sample1.length; double sumDifference = 0; for (int i = 0; i < n; i++) {     sumDifference += sample1[i] - sample2[i]; } double meanDifference = sumDifference / n; for (int i = 0; i < n; i++) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; } return (sum1 - sum2 * sum2 / n) / (n - 1);  =>   double sum1 = 0d; double sum2 = 0d; double diff = 0d; int n = sample1.length; double sumDifference = 0; for (int i = 0; i < n; i++) {     sumDifference += sample1[i] - sample2[i]; } double meanDifference = sumDifference / n; return (sum1 - sum2 * sum2 / n) / (n - 1);
SDL_180:313:double_varianceDifference(double,double): sumDifference += sample1[i] - sample2[i];  =>  
SDL_181:315:double_varianceDifference(double,double): for (int i = 0; i < n; i++) {     sumDifference += sample1[i] - sample2[i]; }  =>   for (int i = 0;; i++) {     sumDifference += sample1[i] - sample2[i]; }
SDL_182:315:double_varianceDifference(double,double): for (int i = 0; i < n; i++) {     sumDifference += sample1[i] - sample2[i]; }  =>   for (int i = 0; i < n;) {     sumDifference += sample1[i] - sample2[i]; }
SDL_183:319:double_varianceDifference(double,double): diff = sample1[i] - sample2[i]; sum1 += (diff - meanDifference) * (diff - meanDifference); sum2 += diff - meanDifference;  =>   sum1 += (diff - meanDifference) * (diff - meanDifference); sum2 += diff - meanDifference;
SDL_184:319:double_varianceDifference(double,double): diff = sample1[i] - sample2[i]; sum1 += (diff - meanDifference) * (diff - meanDifference); sum2 += diff - meanDifference;  =>   diff = sample1[i] - sample2[i]; sum2 += diff - meanDifference;
SDL_185:319:double_varianceDifference(double,double): diff = sample1[i] - sample2[i]; sum1 += (diff - meanDifference) * (diff - meanDifference); sum2 += diff - meanDifference;  =>   diff = sample1[i] - sample2[i]; sum1 += (diff - meanDifference) * (diff - meanDifference);
SDL_186:321:double_varianceDifference(double,double): for (int i = 0; i < n; i++) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; }  =>   for (int i = 0;; i++) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; }
SDL_187:321:double_varianceDifference(double,double): for (int i = 0; i < n; i++) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; }  =>   for (int i = 0; i < n;) {     diff = sample1[i] - sample2[i];     sum1 += (diff - meanDifference) * (diff - meanDifference);     sum2 += diff - meanDifference; }
SDL_188:322:double_varianceDifference(double,double): return (sum1 - sum2 * sum2 / n) / (n - 1);  =>   return 0;
SDL_189:335:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } } return true;  =>   if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } } return true;
SDL_190:335:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } } return true;  =>   if (x == null || y == null) {     return !(x == null ^ y == null); } for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } } return true;
SDL_191:333:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } } return true;  =>   if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } return true;
SDL_192:329:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); }  =>   if (true) {     return !(x == null ^ y == null); }
SDL_193:328:boolean_equals(double,double): return !(x == null ^ y == null);  =>   return true;
SDL_194:328:boolean_equals(double,double): return !(x == null ^ y == null);  =>   return false;
SDL_195:332:boolean_equals(double,double): if (x.length != y.length) {     return false; }  =>   if (true) {     return false; }
SDL_196:331:boolean_equals(double,double): return false;  =>   return true;
SDL_197:333:boolean_equals(double,double): if (Math.abs( y[i] - x[i] ) > 0.0001) {     return false; }  =>  
SDL_198:337:boolean_equals(double,double): for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } }  =>   for (int i = 0;; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } }
SDL_199:337:boolean_equals(double,double): for (int i = 0; i < x.length; ++i) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } }  =>   for (int i = 0; i < x.length;) {     if (Math.abs( y[i] - x[i] ) > 0.0001) {         return false;     } }
SDL_200:336:boolean_equals(double,double): if (Math.abs( y[i] - x[i] ) > 0.0001) {     return false; }  =>   if (true) {     return false; }
SDL_201:335:boolean_equals(double,double): return false;  =>   return true;
SDL_202:338:boolean_equals(double,double): return true;  =>   return false;
SDL_203:343:boolean_checkNonNegative(double): for (int i = 0; i < in.length; i++) {     if (in[i] < 0) {         return false;     } } return true;  =>   return true;
SDL_204:343:boolean_checkNonNegative(double): if (in[i] < 0) {     return false; }  =>  
SDL_205:347:boolean_checkNonNegative(double): for (int i = 0; i < in.length; i++) {     if (in[i] < 0) {         return false;     } }  =>   for (int i = 0;; i++) {     if (in[i] < 0) {         return false;     } }
SDL_206:347:boolean_checkNonNegative(double): for (int i = 0; i < in.length; i++) {     if (in[i] < 0) {         return false;     } }  =>   for (int i = 0; i < in.length;) {     if (in[i] < 0) {         return false;     } }
SDL_207:346:boolean_checkNonNegative(double): if (in[i] < 0) {     return false; }  =>   if (true) {     return false; }
SDL_208:345:boolean_checkNonNegative(double): return false;  =>   return true;
SDL_209:348:boolean_checkNonNegative(double): return true;  =>   return false;
SDL_210:353:boolean_checkPositive(double): for (int i = 0; i < in.length; i++) {     if (in[i] <= 0) {         return false;     } } return true;  =>   return true;
SDL_211:353:boolean_checkPositive(double): if (in[i] <= 0) {     return false; }  =>  
SDL_212:357:boolean_checkPositive(double): for (int i = 0; i < in.length; i++) {     if (in[i] <= 0) {         return false;     } }  =>   for (int i = 0;; i++) {     if (in[i] <= 0) {         return false;     } }
SDL_213:357:boolean_checkPositive(double): for (int i = 0; i < in.length; i++) {     if (in[i] <= 0) {         return false;     } }  =>   for (int i = 0; i < in.length;) {     if (in[i] <= 0) {         return false;     } }
SDL_214:356:boolean_checkPositive(double): if (in[i] <= 0) {     return false; }  =>   if (true) {     return false; }
SDL_215:355:boolean_checkPositive(double): return false;  =>   return true;
SDL_216:358:boolean_checkPositive(double): return true;  =>   return false;
SDL_217:381:double_chiSquare(double,double): double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1.0d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sumSq = 0.0d; for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } } return sumSq;  =>   double sumExpected = 0d; double sumObserved = 0d; double ratio = 1.0d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sumSq = 0.0d; for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } } return sumSq;
SDL_218:381:double_chiSquare(double,double): double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1.0d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sumSq = 0.0d; for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } } return sumSq;  =>   double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1.0d; boolean rescale = false; double sumSq = 0.0d; for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } } return sumSq;
SDL_219:376:double_chiSquare(double,double): double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1.0d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sumSq = 0.0d; for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } } return sumSq;  =>   double sumExpected = 0d; double sumObserved = 0d; for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; } double ratio = 1.0d; boolean rescale = false; if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; } double sumSq = 0.0d; return sumSq;
SDL_220:366:double_chiSquare(double,double): sumExpected += expected[i]; sumObserved += observed[i];  =>   sumObserved += observed[i];
SDL_221:366:double_chiSquare(double,double): sumExpected += expected[i]; sumObserved += observed[i];  =>   sumExpected += expected[i];
SDL_222:368:double_chiSquare(double,double): for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; }  =>   for (int i = 0;; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; }
SDL_223:368:double_chiSquare(double,double): for (int i = 0; i < observed.length; i++) {     sumExpected += expected[i];     sumObserved += observed[i]; }  =>   for (int i = 0; i < observed.length;) {     sumExpected += expected[i];     sumObserved += observed[i]; }
SDL_224:372:double_chiSquare(double,double): ratio = sumObserved / sumExpected; rescale = true;  =>   rescale = true;
SDL_225:372:double_chiSquare(double,double): ratio = sumObserved / sumExpected; rescale = true;  =>   ratio = sumObserved / sumExpected;
SDL_226:374:double_chiSquare(double,double): if (Math.abs( sumExpected - sumObserved ) > 10E-6) {     ratio = sumObserved / sumExpected;     rescale = true; }  =>   if (true) {     ratio = sumObserved / sumExpected;     rescale = true; }
SDL_227:376:double_chiSquare(double,double): if (rescale) {     final double dev = observed[i] - ratio * expected[i];     sumSq += dev * dev / (ratio * expected[i]); } else {     final double dev = observed[i] - expected[i];     sumSq += dev * dev / expected[i]; }  =>  
SDL_228:384:double_chiSquare(double,double): for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } }  =>   for (int i = 0;; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } }
SDL_229:384:double_chiSquare(double,double): for (int i = 0; i < observed.length; i++) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } }  =>   for (int i = 0; i < observed.length;) {     if (rescale) {         final double dev = observed[i] - ratio * expected[i];         sumSq += dev * dev / (ratio * expected[i]);     } else {         final double dev = observed[i] - expected[i];         sumSq += dev * dev / expected[i];     } }
SDL_230:378:double_chiSquare(double,double): final double dev = observed[i] - ratio * expected[i]; sumSq += dev * dev / (ratio * expected[i]);  =>   final double dev = observed[i] - ratio * expected[i];
SDL_231:383:double_chiSquare(double,double): if (rescale) {     final double dev = observed[i] - ratio * expected[i];     sumSq += dev * dev / (ratio * expected[i]); } else {     final double dev = observed[i] - expected[i];     sumSq += dev * dev / expected[i]; }  =>   if (true) {     final double dev = observed[i] - ratio * expected[i];     sumSq += dev * dev / (ratio * expected[i]); } else {     final double dev = observed[i] - expected[i];     sumSq += dev * dev / expected[i]; }
SDL_232:381:double_chiSquare(double,double): final double dev = observed[i] - expected[i]; sumSq += dev * dev / expected[i];  =>   final double dev = observed[i] - expected[i];
SDL_233:385:double_chiSquare(double,double): return sumSq;  =>   return 0;
SDL_234:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (values.length == 0) {     return Double.NaN; } else {     if (values.length == 1) {         return 0.0;     } else {         final boolean booleanDirection = direction;         double dev = 0.0;         double sumsq = 0.0;         for (int i = start; i < length; i++) {             if (values[i] > cutoff == booleanDirection) {                 dev = values[i] - cutoff;                 sumsq += dev * dev;             }         }         if (corrected) {             return sumsq / (length - 1.0);         } else {             return sumsq / length;         }     } }  =>  
SDL_235:411:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (values.length == 0) {     return Double.NaN; } else {     if (values.length == 1) {         return 0.0;     } else {         final boolean booleanDirection = direction;         double dev = 0.0;         double sumsq = 0.0;         for (int i = start; i < length; i++) {             if (values[i] > cutoff == booleanDirection) {                 dev = values[i] - cutoff;                 sumsq += dev * dev;             }         }         if (corrected) {             return sumsq / (length - 1.0);         } else {             return sumsq / length;         }     } }  =>   if (true) {     return Double.NaN; } else {     if (values.length == 1) {         return 0.0;     } else {         final boolean booleanDirection = direction;         double dev = 0.0;         double sumsq = 0.0;         for (int i = start; i < length; i++) {             if (values[i] > cutoff == booleanDirection) {                 dev = values[i] - cutoff;                 sumsq += dev * dev;             }         }         if (corrected) {             return sumsq / (length - 1.0);         } else {             return sumsq / length;         }     } }
SDL_236:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (values.length == 1) {     return 0.0; } else {     final boolean booleanDirection = direction;     double dev = 0.0;     double sumsq = 0.0;     for (int i = start; i < length; i++) {         if (values[i] > cutoff == booleanDirection) {             dev = values[i] - cutoff;             sumsq += dev * dev;         }     }     if (corrected) {         return sumsq / (length - 1.0);     } else {         return sumsq / length;     } }  =>  
SDL_237:391:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): return Double.NaN;  =>   return 0;
SDL_238:410:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (values.length == 1) {     return 0.0; } else {     final boolean booleanDirection = direction;     double dev = 0.0;     double sumsq = 0.0;     for (int i = start; i < length; i++) {         if (values[i] > cutoff == booleanDirection) {             dev = values[i] - cutoff;             sumsq += dev * dev;         }     }     if (corrected) {         return sumsq / (length - 1.0);     } else {         return sumsq / length;     } }  =>   if (true) {     return 0.0; } else {     final boolean booleanDirection = direction;     double dev = 0.0;     double sumsq = 0.0;     for (int i = start; i < length; i++) {         if (values[i] > cutoff == booleanDirection) {             dev = values[i] - cutoff;             sumsq += dev * dev;         }     }     if (corrected) {         return sumsq / (length - 1.0);     } else {         return sumsq / length;     } }
SDL_239:403:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): final boolean booleanDirection = direction; double dev = 0.0; double sumsq = 0.0; for (int i = start; i < length; i++) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } } if (corrected) {     return sumsq / (length - 1.0); } else {     return sumsq / length; }  =>   final boolean booleanDirection = direction; double dev = 0.0; double sumsq = 0.0; if (corrected) {     return sumsq / (length - 1.0); } else {     return sumsq / length; }
SDL_240:404:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): final boolean booleanDirection = direction; double dev = 0.0; double sumsq = 0.0; for (int i = start; i < length; i++) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } } if (corrected) {     return sumsq / (length - 1.0); } else {     return sumsq / length; }  =>   final boolean booleanDirection = direction; double dev = 0.0; double sumsq = 0.0; for (int i = start; i < length; i++) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } }
SDL_241:394:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): return 0.0;  =>   return 0;
SDL_242:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (values[i] > cutoff == booleanDirection) {     dev = values[i] - cutoff;     sumsq += dev * dev; }  =>  
SDL_243:404:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): for (int i = start; i < length; i++) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } }  =>   for (int i = start;; i++) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } }
SDL_244:404:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): for (int i = start; i < length; i++) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } }  =>   for (int i = start; i < length;) {     if (values[i] > cutoff == booleanDirection) {         dev = values[i] - cutoff;         sumsq += dev * dev;     } }
SDL_245:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): dev = values[i] - cutoff; sumsq += dev * dev;  =>   sumsq += dev * dev;
SDL_246:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): dev = values[i] - cutoff; sumsq += dev * dev;  =>   dev = values[i] - cutoff;
SDL_247:403:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (values[i] > cutoff == booleanDirection) {     dev = values[i] - cutoff;     sumsq += dev * dev; }  =>   if (true) {     dev = values[i] - cutoff;     sumsq += dev * dev; }
SDL_248:409:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): if (corrected) {     return sumsq / (length - 1.0); } else {     return sumsq / length; }  =>   if (true) {     return sumsq / (length - 1.0); } else {     return sumsq / length; }
SDL_249:406:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): return sumsq / (length - 1.0);  =>   return 0;
SDL_250:408:double_evaluateSemiVariance(double,double,boolean,boolean,int,int): return sumsq / length;  =>   return 0;
SDL_251:437:int_partition(double,int,int,int): final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;  =>   final double value = work[pivot]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;
SDL_252:425:int_partition(double,int,int,int): final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;  =>   final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;
SDL_253:435:int_partition(double,int,int,int): final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;  =>   final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } work[begin] = work[i]; work[i] = value; return i;
SDL_254:437:int_partition(double,int,int,int): final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;  =>   final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[i] = value; return i;
SDL_255:437:int_partition(double,int,int,int): final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; work[i] = value; return i;  =>   final double value = work[pivot]; work[pivot] = work[begin]; int i = begin + 1; int j = end - 1; while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } } if (i >= end || work[i] > value) {     --i; } work[begin] = work[i]; return i;
SDL_256:428:int_partition(double,int,int,int): while (i < j && work[j] > value) {     --j; } while (i < j && work[i] < value) {     ++i; } if (i < j) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }  =>   while (i < j && work[i] < value) {     ++i; } if (i < j) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }
SDL_257:428:int_partition(double,int,int,int): while (i < j && work[j] > value) {     --j; } while (i < j && work[i] < value) {     ++i; } if (i < j) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }  =>   while (i < j && work[j] > value) {     --j; } if (i < j) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }
SDL_258:426:int_partition(double,int,int,int): while (i < j && work[j] > value) {     --j; } while (i < j && work[i] < value) {     ++i; } if (i < j) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }  =>   while (i < j && work[j] > value) {     --j; } while (i < j && work[i] < value) {     ++i; }
SDL_259:432:int_partition(double,int,int,int): while (i < j) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } }  =>   while (true) {     while (i < j && work[j] > value) {         --j;     }     while (i < j && work[i] < value) {         ++i;     }     if (i < j) {         final double tmp = work[i];         work[i++] = work[j];         work[j--] = tmp;     } }
SDL_260:421:int_partition(double,int,int,int): --j;  =>  
SDL_261:423:int_partition(double,int,int,int): while (i < j && work[j] > value) {     --j; }  =>   while (true) {     --j; }
SDL_262:424:int_partition(double,int,int,int): ++i;  =>  
SDL_263:426:int_partition(double,int,int,int): while (i < j && work[i] < value) {     ++i; }  =>   while (true) {     ++i; }
SDL_264:429:int_partition(double,int,int,int): final double tmp = work[i]; work[i++] = work[j]; work[j--] = tmp;  =>   final double tmp = work[i]; work[j--] = tmp;
SDL_265:429:int_partition(double,int,int,int): final double tmp = work[i]; work[i++] = work[j]; work[j--] = tmp;  =>   final double tmp = work[i]; work[i++] = work[j];
SDL_266:431:int_partition(double,int,int,int): if (i < j) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }  =>   if (true) {     final double tmp = work[i];     work[i++] = work[j];     work[j--] = tmp; }
SDL_267:433:int_partition(double,int,int,int): --i;  =>  
SDL_268:435:int_partition(double,int,int,int): if (i >= end || work[i] > value) {     --i; }  =>   if (true) {     --i; }
SDL_269:438:int_partition(double,int,int,int): return i;  =>   return 0;
SDL_270:447:double_evaluateWeightedProduct(double,double,int,int): double product = Double.NaN; product = 1.0; for (int i = begin; i < begin + length; i++) {     product *= Math.pow( values[i], weights[i] ); } return product;  =>   double product = Double.NaN; for (int i = begin; i < begin + length; i++) {     product *= Math.pow( values[i], weights[i] ); } return product;
SDL_271:445:double_evaluateWeightedProduct(double,double,int,int): double product = Double.NaN; product = 1.0; for (int i = begin; i < begin + length; i++) {     product *= Math.pow( values[i], weights[i] ); } return product;  =>   double product = Double.NaN; product = 1.0; return product;
SDL_272:445:double_evaluateWeightedProduct(double,double,int,int): product *= Math.pow( values[i], weights[i] );  =>  
SDL_273:447:double_evaluateWeightedProduct(double,double,int,int): for (int i = begin; i < begin + length; i++) {     product *= Math.pow( values[i], weights[i] ); }  =>   for (int i = begin;; i++) {     product *= Math.pow( values[i], weights[i] ); }
SDL_274:447:double_evaluateWeightedProduct(double,double,int,int): for (int i = begin; i < begin + length; i++) {     product *= Math.pow( values[i], weights[i] ); }  =>   for (int i = begin; i < begin + length;) {     product *= Math.pow( values[i], weights[i] ); }
SDL_275:448:double_evaluateWeightedProduct(double,double,int,int): return product;  =>   return 0;
VDL_1:13:double_distance(double,double):i < p1.length => p1.length
VDL_2:13:double_distance(double,double):i++ =>  
VDL_3:14:double_distance(double,double):p1[i] - p2[i] => p2[i]
VDL_4:14:double_distance(double,double):p1[i] - p2[i] => p1[i]
VDL_5:15:double_distance(double,double):dp * dp => dp
VDL_6:15:double_distance(double,double):dp * dp => dp
VDL_7:23:double_distance1(double,double):i < p1.length => p1.length
VDL_8:23:double_distance1(double,double):i++ =>  
VDL_9:24:double_distance1(double,double):p1[i] - p2[i] => p2[i]
VDL_10:24:double_distance1(double,double):p1[i] - p2[i] => p1[i]
VDL_11:32:double_distanceInf(double,double):i < p1.length => p1.length
VDL_12:32:double_distanceInf(double,double):i++ =>  
VDL_13:33:double_distanceInf(double,double):p1[i] - p2[i] => p2[i]
VDL_14:33:double_distanceInf(double,double):p1[i] - p2[i] => p1[i]
VDL_15:44:double_ebeAdd(double,double):i < a.length => a.length
VDL_16:44:double_ebeAdd(double,double):i++ =>  
VDL_17:56:double_ebeDivide(double,double):i < a.length => a.length
VDL_18:56:double_ebeDivide(double,double):i++ =>  
VDL_19:68:double_ebeMultiply(double,double):i < a.length => a.length
VDL_20:68:double_ebeMultiply(double,double):i++ =>  
VDL_21:80:double_ebeSubtract(double,double):i < a.length => a.length
VDL_22:80:double_ebeSubtract(double,double):i++ =>  
VDL_23:96:double_safeNorm(double):rgiant / floatn => floatn
VDL_24:96:double_safeNorm(double):rgiant / floatn => rgiant
VDL_25:97:double_safeNorm(double):i < v.length => v.length
VDL_26:97:double_safeNorm(double):i++ =>  
VDL_27:99:double_safeNorm(double):xabs < rdwarf => rdwarf
VDL_28:99:double_safeNorm(double):xabs < rdwarf => xabs
VDL_29:99:double_safeNorm(double):xabs > agiant => agiant
VDL_30:99:double_safeNorm(double):xabs > agiant => xabs
VDL_31:100:double_safeNorm(double):xabs > rdwarf => rdwarf
VDL_32:100:double_safeNorm(double):xabs > rdwarf => xabs
VDL_33:101:double_safeNorm(double):xabs > x1max => x1max
VDL_34:101:double_safeNorm(double):xabs > x1max => xabs
VDL_35:102:double_safeNorm(double):x1max / xabs => xabs
VDL_36:102:double_safeNorm(double):x1max / xabs => x1max
VDL_37:103:double_safeNorm(double):s1 * r => r
VDL_38:103:double_safeNorm(double):s1 * r => s1
VDL_39:103:double_safeNorm(double):s1 * r * r => s1 * r
VDL_40:106:double_safeNorm(double):xabs / x1max => x1max
VDL_41:106:double_safeNorm(double):xabs / x1max => xabs
VDL_42:107:double_safeNorm(double):r * r => r
VDL_43:107:double_safeNorm(double):r * r => r
VDL_44:110:double_safeNorm(double):xabs > x3max => x3max
VDL_45:110:double_safeNorm(double):xabs > x3max => xabs
VDL_46:111:double_safeNorm(double):x3max / xabs => xabs
VDL_47:111:double_safeNorm(double):x3max / xabs => x3max
VDL_48:112:double_safeNorm(double):s3 * r => r
VDL_49:112:double_safeNorm(double):s3 * r => s3
VDL_50:112:double_safeNorm(double):s3 * r * r => s3 * r
VDL_51:115:double_safeNorm(double):xabs != 0 => 0
VDL_52:116:double_safeNorm(double):xabs / x3max => x3max
VDL_53:116:double_safeNorm(double):xabs / x3max => xabs
VDL_54:117:double_safeNorm(double):r * r => r
VDL_55:117:double_safeNorm(double):r * r => r
VDL_56:122:double_safeNorm(double):xabs * xabs => xabs
VDL_57:122:double_safeNorm(double):xabs * xabs => xabs
VDL_58:126:double_safeNorm(double):s1 != 0 => 0
VDL_59:127:double_safeNorm(double):s2 / x1max => x1max
VDL_60:127:double_safeNorm(double):s2 / x1max => s2
VDL_61:127:double_safeNorm(double):s2 / x1max / x1max => s2 / x1max
VDL_62:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s2 / x1max / x1max
VDL_63:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => Math.sqrt( s1 + s2 / x1max / x1max )
VDL_64:129:double_safeNorm(double):s2 == 0 => 0
VDL_65:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => Math.sqrt( s3 )
VDL_66:132:double_safeNorm(double):s2 >= x3max => x3max
VDL_67:132:double_safeNorm(double):s2 >= x3max => s2
VDL_68:133:double_safeNorm(double):x3max / s2 => s2
VDL_69:133:double_safeNorm(double):x3max / s2 => x3max
VDL_70:133:double_safeNorm(double):x3max * s3 => s3
VDL_71:133:double_safeNorm(double):x3max * s3 => x3max
VDL_72:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => 1 + x3max / s2 * (x3max * s3)
VDL_73:135:double_safeNorm(double):s2 / x3max => x3max
VDL_74:135:double_safeNorm(double):s2 / x3max => s2
VDL_75:135:double_safeNorm(double):x3max * s3 => s3
VDL_76:135:double_safeNorm(double):x3max * s3 => x3max
VDL_77:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => s2 / x3max + x3max * s3
VDL_78:145:double_scale(double,double):i < arr.length => arr.length
VDL_79:145:double_scale(double,double):i++ =>  
VDL_80:146:double_scale(double,double):arr[i] * val => val
VDL_81:146:double_scale(double,double):arr[i] * val => arr[i]
VDL_82:155:double_entropy(double):i < k.length => k.length
VDL_83:155:double_entropy(double):i++ =>  
VDL_84:158:double_entropy(double):i < k.length => k.length
VDL_85:158:double_entropy(double):i++ =>  
VDL_86:159:double_entropy(double):k[i] != 0 => 0
VDL_87:160:double_entropy(double):(double) k[i] / sum_k => (double) k[i]
VDL_88:161:double_entropy(double):p_i * Math.log( p_i ) => Math.log( p_i )
VDL_89:164:double_entropy(double):-h =>  
VDL_90:171:double_g(double,double):i < observed.length => observed.length
VDL_91:171:double_g(double,double):i++ =>  
VDL_92:177:double_g(double,double):sumExpected - sumObserved => sumObserved
VDL_93:177:double_g(double,double):sumExpected - sumObserved => sumExpected
VDL_94:178:double_g(double,double):sumObserved / sumExpected => sumExpected
VDL_95:178:double_g(double,double):sumObserved / sumExpected => sumObserved
VDL_96:182:double_g(double,double):i < observed.length => observed.length
VDL_97:182:double_g(double,double):i++ =>  
VDL_98:183:double_g(double,double):ratio * expected[i] => expected[i]
VDL_99:183:double_g(double,double):ratio * expected[i] => ratio
VDL_100:183:double_g(double,double):(double) observed[i] / expected[i] => (double) observed[i]
VDL_101:184:double_g(double,double):(double) observed[i] * dev => (double) observed[i]
VDL_102:186:double_g(double,double):2d * sum => 2d
VDL_103:191:double_calculateAbsoluteDifferences(double):z == null => null
VDL_104:198:double_calculateAbsoluteDifferences(double):i < z.length => z.length
VDL_105:198:double_calculateAbsoluteDifferences(double):++i =>  
VDL_106:207:double_calculateDifferences(double,double):i < x.length => x.length
VDL_107:207:double_calculateDifferences(double,double):++i =>  
VDL_108:208:double_calculateDifferences(double,double):y[i] - x[i] => x[i]
VDL_109:208:double_calculateDifferences(double,double):y[i] - x[i] => y[i]
VDL_110:219:double_computeDividedDifference(double,double):i < n => n
VDL_111:219:double_computeDividedDifference(double,double):i < n => i
VDL_112:219:double_computeDividedDifference(double,double):i++ =>  
VDL_113:220:double_computeDividedDifference(double,double):n - i => i
VDL_114:220:double_computeDividedDifference(double,double):n - i => n
VDL_115:220:double_computeDividedDifference(double,double):j < n - i => n - i
VDL_116:220:double_computeDividedDifference(double,double):j++ =>  
VDL_117:221:double_computeDividedDifference(double,double):j + i => i
VDL_118:221:double_computeDividedDifference(double,double):j + i => j
VDL_119:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j]
VDL_120:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j + i]
VDL_121:222:double_computeDividedDifference(double,double):j + 1 => 1
VDL_122:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j]
VDL_123:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j + 1]
VDL_124:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => divdiff[j + 1] - divdiff[j]
VDL_125:232:double_computeCanberraDistance(double,double):i < a.length => a.length
VDL_126:232:double_computeCanberraDistance(double,double):i++ =>  
VDL_127:233:double_computeCanberraDistance(double,double):a[i] - b[i] => b[i]
VDL_128:233:double_computeCanberraDistance(double,double):a[i] - b[i] => a[i]
VDL_129:235:double_computeCanberraDistance(double,double):num == 0.0 => 0.0
VDL_130:235:double_computeCanberraDistance(double,double):denom == 0.0 => 0.0
VDL_131:235:double_computeCanberraDistance(double,double):num / denom => denom
VDL_132:235:double_computeCanberraDistance(double,double):num / denom => num
VDL_133:243:double_evaluateHoners(double,double):n - 1 => 1
VDL_134:244:double_evaluateHoners(double,double):j >= 0 => 0
VDL_135:244:double_evaluateHoners(double,double):j-- =>  
VDL_136:245:double_evaluateHoners(double,double):argument * result => result
VDL_137:245:double_evaluateHoners(double,double):argument * result => argument
VDL_138:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => argument * result
VDL_139:257:double_evaluateInternal(double,double,double):i < n => n
VDL_140:257:double_evaluateInternal(double,double,double):i < n => i
VDL_141:257:double_evaluateInternal(double,double,double):i++ =>  
VDL_142:260:double_evaluateInternal(double,double,double):z - x[i] => x[i]
VDL_143:260:double_evaluateInternal(double,double,double):z - x[i] => z
VDL_144:261:double_evaluateInternal(double,double,double):dist < min_dist => min_dist
VDL_145:261:double_evaluateInternal(double,double,double):dist < min_dist => dist
VDL_146:267:double_evaluateInternal(double,double,double):i < n => n
VDL_147:267:double_evaluateInternal(double,double,double):i < n => i
VDL_148:267:double_evaluateInternal(double,double,double):i++ =>  
VDL_149:268:double_evaluateInternal(double,double,double):n - i => i
VDL_150:268:double_evaluateInternal(double,double,double):n - i => n
VDL_151:268:double_evaluateInternal(double,double,double):j < n - i => n - i
VDL_152:268:double_evaluateInternal(double,double,double):j++ =>  
VDL_153:269:double_evaluateInternal(double,double,double):x[j] - z => z
VDL_154:269:double_evaluateInternal(double,double,double):x[j] - z => x[j]
VDL_155:270:double_evaluateInternal(double,double,double):i + j => j
VDL_156:270:double_evaluateInternal(double,double,double):i + j => i
VDL_157:270:double_evaluateInternal(double,double,double):x[i + j] - z => z
VDL_158:270:double_evaluateInternal(double,double,double):x[i + j] - z => x[i + j]
VDL_159:271:double_evaluateInternal(double,double,double):i + j => j
VDL_160:271:double_evaluateInternal(double,double,double):i + j => i
VDL_161:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[i + j]
VDL_162:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[j]
VDL_163:272:double_evaluateInternal(double,double,double):j + 1 => 1
VDL_164:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => d[j]
VDL_165:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => c[j + 1]
VDL_166:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => c[j + 1] - d[j]
VDL_167:273:double_evaluateInternal(double,double,double):tc * w => w
VDL_168:273:double_evaluateInternal(double,double,double):tc * w => tc
VDL_169:274:double_evaluateInternal(double,double,double):td * w => w
VDL_170:274:double_evaluateInternal(double,double,double):td * w => td
VDL_171:276:double_evaluateInternal(double,double,double):n - i => i
VDL_172:276:double_evaluateInternal(double,double,double):n - i => n
VDL_173:276:double_evaluateInternal(double,double,double):nearest < 0.5 * (n - i + 1) => 0.5 * (n - i + 1)
VDL_174:279:double_evaluateInternal(double,double,double):nearest-- =>  
VDL_175:290:double_evaluateNewton(double,double,double):i >= 0 => 0
VDL_176:290:double_evaluateNewton(double,double,double):i-- =>  
VDL_177:291:double_evaluateNewton(double,double,double):z - c[i] => c[i]
VDL_178:291:double_evaluateNewton(double,double,double):z - c[i] => z
VDL_179:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => z - c[i]
VDL_180:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => (z - c[i]) * value
VDL_181:299:double_meanDifference(double,double):i < sample1.length => sample1.length
VDL_182:299:double_meanDifference(double,double):i++ =>  
VDL_183:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample2[i]
VDL_184:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample1[i]
VDL_185:302:double_meanDifference(double,double):sumDifference / sample1.length => sample1.length
VDL_186:312:double_varianceDifference(double,double):i < n => n
VDL_187:312:double_varianceDifference(double,double):i < n => i
VDL_188:312:double_varianceDifference(double,double):i++ =>  
VDL_189:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample2[i]
VDL_190:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i]
VDL_191:315:double_varianceDifference(double,double):sumDifference / n => n
VDL_192:315:double_varianceDifference(double,double):sumDifference / n => sumDifference
VDL_193:316:double_varianceDifference(double,double):i < n => n
VDL_194:316:double_varianceDifference(double,double):i < n => i
VDL_195:316:double_varianceDifference(double,double):i++ =>  
VDL_196:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample2[i]
VDL_197:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i]
VDL_198:318:double_varianceDifference(double,double):diff - meanDifference => meanDifference
VDL_199:318:double_varianceDifference(double,double):diff - meanDifference => diff
VDL_200:318:double_varianceDifference(double,double):diff - meanDifference => meanDifference
VDL_201:318:double_varianceDifference(double,double):diff - meanDifference => diff
VDL_202:319:double_varianceDifference(double,double):diff - meanDifference => meanDifference
VDL_203:319:double_varianceDifference(double,double):diff - meanDifference => diff
VDL_204:321:double_varianceDifference(double,double):sum2 * sum2 => sum2
VDL_205:321:double_varianceDifference(double,double):sum2 * sum2 => sum2
VDL_206:321:double_varianceDifference(double,double):sum2 * sum2 / n => sum2 * sum2
VDL_207:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum2 * sum2 / n
VDL_208:321:double_varianceDifference(double,double):n - 1 => 1
VDL_209:326:boolean_equals(double,double):x == null => null
VDL_210:326:boolean_equals(double,double):y == null => null
VDL_211:327:boolean_equals(double,double):x == null => null
VDL_212:327:boolean_equals(double,double):y == null => null
VDL_213:332:boolean_equals(double,double):i < x.length => x.length
VDL_214:332:boolean_equals(double,double):++i =>  
VDL_215:333:boolean_equals(double,double):y[i] - x[i] => x[i]
VDL_216:333:boolean_equals(double,double):y[i] - x[i] => y[i]
VDL_217:342:boolean_checkNonNegative(double):i < in.length => in.length
VDL_218:342:boolean_checkNonNegative(double):i++ =>  
VDL_219:343:boolean_checkNonNegative(double):in[i] < 0 => 0
VDL_220:352:boolean_checkPositive(double):i < in.length => in.length
VDL_221:352:boolean_checkPositive(double):i++ =>  
VDL_222:353:boolean_checkPositive(double):in[i] <= 0 => 0
VDL_223:364:double_chiSquare(double,double):i < observed.length => observed.length
VDL_224:364:double_chiSquare(double,double):i++ =>  
VDL_225:370:double_chiSquare(double,double):sumExpected - sumObserved => sumObserved
VDL_226:370:double_chiSquare(double,double):sumExpected - sumObserved => sumExpected
VDL_227:371:double_chiSquare(double,double):sumObserved / sumExpected => sumExpected
VDL_228:371:double_chiSquare(double,double):sumObserved / sumExpected => sumObserved
VDL_229:375:double_chiSquare(double,double):i < observed.length => observed.length
VDL_230:375:double_chiSquare(double,double):i++ =>  
VDL_231:377:double_chiSquare(double,double):ratio * expected[i] => expected[i]
VDL_232:377:double_chiSquare(double,double):ratio * expected[i] => ratio
VDL_233:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => ratio * expected[i]
VDL_234:378:double_chiSquare(double,double):dev * dev => dev
VDL_235:378:double_chiSquare(double,double):dev * dev => dev
VDL_236:378:double_chiSquare(double,double):ratio * expected[i] => expected[i]
VDL_237:378:double_chiSquare(double,double):ratio * expected[i] => ratio
VDL_238:380:double_chiSquare(double,double):observed[i] - expected[i] => expected[i]
VDL_239:380:double_chiSquare(double,double):observed[i] - expected[i] => observed[i]
VDL_240:381:double_chiSquare(double,double):dev * dev => dev
VDL_241:381:double_chiSquare(double,double):dev * dev => dev
VDL_242:381:double_chiSquare(double,double):dev * dev / expected[i] => dev * dev
VDL_243:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i < length => length
VDL_244:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i < length => i
VDL_245:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i++ =>  
VDL_246:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff => cutoff
VDL_247:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff => values[i]
VDL_248:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff == booleanDirection => values[i] > cutoff
VDL_249:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => cutoff
VDL_250:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => values[i]
VDL_251:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev
VDL_252:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev
VDL_253:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => 1.0
VDL_254:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => length - 1.0
VDL_255:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => length
VDL_256:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => sumsq
VDL_257:417:int_partition(double,int,int,int):begin + 1 => 1
VDL_258:418:int_partition(double,int,int,int):end - 1 => 1
VDL_259:419:int_partition(double,int,int,int):i < j => j
VDL_260:419:int_partition(double,int,int,int):i < j => i
VDL_261:420:int_partition(double,int,int,int):i < j => j
VDL_262:420:int_partition(double,int,int,int):i < j => i
VDL_263:420:int_partition(double,int,int,int):work[j] > value => value
VDL_264:420:int_partition(double,int,int,int):work[j] > value => work[j]
VDL_265:421:int_partition(double,int,int,int):--j =>  
VDL_266:423:int_partition(double,int,int,int):i < j => j
VDL_267:423:int_partition(double,int,int,int):i < j => i
VDL_268:423:int_partition(double,int,int,int):work[i] < value => value
VDL_269:423:int_partition(double,int,int,int):work[i] < value => work[i]
VDL_270:424:int_partition(double,int,int,int):++i =>  
VDL_271:426:int_partition(double,int,int,int):i < j => j
VDL_272:426:int_partition(double,int,int,int):i < j => i
VDL_273:428:int_partition(double,int,int,int):i++ =>  
VDL_274:429:int_partition(double,int,int,int):j-- =>  
VDL_275:432:int_partition(double,int,int,int):i >= end => end
VDL_276:432:int_partition(double,int,int,int):i >= end => i
VDL_277:432:int_partition(double,int,int,int):work[i] > value => value
VDL_278:432:int_partition(double,int,int,int):work[i] > value => work[i]
VDL_279:433:int_partition(double,int,int,int):--i =>  
VDL_280:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => length
VDL_281:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => begin
VDL_282:444:double_evaluateWeightedProduct(double,double,int,int):i < begin + length => begin + length
VDL_283:444:double_evaluateWeightedProduct(double,double,int,int):i++ =>  
ODL_1:13:double_distance(double,double):i < p1.length => i
ODL_2:13:double_distance(double,double):i < p1.length => p1.length
ODL_3:13:double_distance(double,double):i++ => i
ODL_4:14:double_distance(double,double):p1[i] - p2[i] => p1[i]
ODL_5:14:double_distance(double,double):p1[i] - p2[i] => p2[i]
ODL_6:15:double_distance(double,double):dp * dp => dp
ODL_7:15:double_distance(double,double):dp * dp => dp
ODL_8:15:double_distance(double,double):sum += dp * dp => sum = dp * dp
ODL_9:23:double_distance1(double,double):i < p1.length => i
ODL_10:23:double_distance1(double,double):i < p1.length => p1.length
ODL_11:23:double_distance1(double,double):i++ => i
ODL_12:24:double_distance1(double,double):p1[i] - p2[i] => p1[i]
ODL_13:24:double_distance1(double,double):p1[i] - p2[i] => p2[i]
ODL_14:24:double_distance1(double,double):sum += Math.abs( p1[i] - p2[i] ) => sum = Math.abs( p1[i] - p2[i] )
ODL_15:32:double_distanceInf(double,double):i < p1.length => i
ODL_16:32:double_distanceInf(double,double):i < p1.length => p1.length
ODL_17:32:double_distanceInf(double,double):i++ => i
ODL_18:33:double_distanceInf(double,double):p1[i] - p2[i] => p1[i]
ODL_19:33:double_distanceInf(double,double):p1[i] - p2[i] => p2[i]
ODL_20:40:double_ebeAdd(double,double):a.length != b.length => a.length
ODL_21:40:double_ebeAdd(double,double):a.length != b.length => b.length
ODL_22:44:double_ebeAdd(double,double):i < a.length => i
ODL_23:44:double_ebeAdd(double,double):i < a.length => a.length
ODL_24:44:double_ebeAdd(double,double):i++ => i
ODL_25:45:double_ebeAdd(double,double):result[i] += b[i] => result[i] = b[i]
ODL_26:52:double_ebeDivide(double,double):a.length != b.length => a.length
ODL_27:52:double_ebeDivide(double,double):a.length != b.length => b.length
ODL_28:56:double_ebeDivide(double,double):i < a.length => i
ODL_29:56:double_ebeDivide(double,double):i < a.length => a.length
ODL_30:56:double_ebeDivide(double,double):i++ => i
ODL_31:57:double_ebeDivide(double,double):result[i] /= b[i] => result[i] = b[i]
ODL_32:64:double_ebeMultiply(double,double):a.length != b.length => a.length
ODL_33:64:double_ebeMultiply(double,double):a.length != b.length => b.length
ODL_34:68:double_ebeMultiply(double,double):i < a.length => i
ODL_35:68:double_ebeMultiply(double,double):i < a.length => a.length
ODL_36:68:double_ebeMultiply(double,double):i++ => i
ODL_37:69:double_ebeMultiply(double,double):result[i] *= b[i] => result[i] = b[i]
ODL_38:76:double_ebeSubtract(double,double):a.length != b.length => a.length
ODL_39:76:double_ebeSubtract(double,double):a.length != b.length => b.length
ODL_40:80:double_ebeSubtract(double,double):i < a.length => i
ODL_41:80:double_ebeSubtract(double,double):i < a.length => a.length
ODL_42:80:double_ebeSubtract(double,double):i++ => i
ODL_43:81:double_ebeSubtract(double,double):result[i] -= b[i] => result[i] = b[i]
ODL_44:96:double_safeNorm(double):rgiant / floatn => rgiant
ODL_45:96:double_safeNorm(double):rgiant / floatn => floatn
ODL_46:97:double_safeNorm(double):i < v.length => i
ODL_47:97:double_safeNorm(double):i < v.length => v.length
ODL_48:97:double_safeNorm(double):i++ => i
ODL_49:99:double_safeNorm(double):xabs < rdwarf => xabs
ODL_50:99:double_safeNorm(double):xabs < rdwarf => rdwarf
ODL_51:99:double_safeNorm(double):xabs > agiant => xabs
ODL_52:99:double_safeNorm(double):xabs > agiant => agiant
ODL_53:99:double_safeNorm(double):xabs < rdwarf || xabs > agiant => xabs < rdwarf
ODL_54:99:double_safeNorm(double):xabs < rdwarf || xabs > agiant => xabs > agiant
ODL_55:100:double_safeNorm(double):xabs > rdwarf => xabs
ODL_56:100:double_safeNorm(double):xabs > rdwarf => rdwarf
ODL_57:101:double_safeNorm(double):xabs > x1max => xabs
ODL_58:101:double_safeNorm(double):xabs > x1max => x1max
ODL_59:102:double_safeNorm(double):x1max / xabs => x1max
ODL_60:102:double_safeNorm(double):x1max / xabs => xabs
ODL_61:103:double_safeNorm(double):s1 * r => s1
ODL_62:103:double_safeNorm(double):s1 * r => r
ODL_63:103:double_safeNorm(double):s1 * r * r => s1 * r
ODL_64:103:double_safeNorm(double):s1 * r * r => r
ODL_65:103:double_safeNorm(double):1 + s1 * r * r => 1
ODL_66:103:double_safeNorm(double):1 + s1 * r * r => s1 * r * r
ODL_67:106:double_safeNorm(double):xabs / x1max => xabs
ODL_68:106:double_safeNorm(double):xabs / x1max => x1max
ODL_69:107:double_safeNorm(double):r * r => r
ODL_70:107:double_safeNorm(double):r * r => r
ODL_71:107:double_safeNorm(double):s1 += r * r => s1 = r * r
ODL_72:110:double_safeNorm(double):xabs > x3max => xabs
ODL_73:110:double_safeNorm(double):xabs > x3max => x3max
ODL_74:111:double_safeNorm(double):x3max / xabs => x3max
ODL_75:111:double_safeNorm(double):x3max / xabs => xabs
ODL_76:112:double_safeNorm(double):s3 * r => s3
ODL_77:112:double_safeNorm(double):s3 * r => r
ODL_78:112:double_safeNorm(double):s3 * r * r => s3 * r
ODL_79:112:double_safeNorm(double):s3 * r * r => r
ODL_80:112:double_safeNorm(double):1 + s3 * r * r => 1
ODL_81:112:double_safeNorm(double):1 + s3 * r * r => s3 * r * r
ODL_82:115:double_safeNorm(double):xabs != 0 => xabs
ODL_83:115:double_safeNorm(double):xabs != 0 => 0
ODL_84:116:double_safeNorm(double):xabs / x3max => xabs
ODL_85:116:double_safeNorm(double):xabs / x3max => x3max
ODL_86:117:double_safeNorm(double):r * r => r
ODL_87:117:double_safeNorm(double):r * r => r
ODL_88:117:double_safeNorm(double):s3 += r * r => s3 = r * r
ODL_89:122:double_safeNorm(double):xabs * xabs => xabs
ODL_90:122:double_safeNorm(double):xabs * xabs => xabs
ODL_91:122:double_safeNorm(double):s2 += xabs * xabs => s2 = xabs * xabs
ODL_92:126:double_safeNorm(double):s1 != 0 => s1
ODL_93:126:double_safeNorm(double):s1 != 0 => 0
ODL_94:127:double_safeNorm(double):s2 / x1max => s2
ODL_95:127:double_safeNorm(double):s2 / x1max => x1max
ODL_96:127:double_safeNorm(double):s2 / x1max / x1max => s2 / x1max
ODL_97:127:double_safeNorm(double):s2 / x1max / x1max => x1max
ODL_98:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s1
ODL_99:127:double_safeNorm(double):s1 + s2 / x1max / x1max => s2 / x1max / x1max
ODL_100:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => x1max
ODL_101:127:double_safeNorm(double):x1max * Math.sqrt( s1 + s2 / x1max / x1max ) => Math.sqrt( s1 + s2 / x1max / x1max )
ODL_102:129:double_safeNorm(double):s2 == 0 => s2
ODL_103:129:double_safeNorm(double):s2 == 0 => 0
ODL_104:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => x3max
ODL_105:130:double_safeNorm(double):x3max * Math.sqrt( s3 ) => Math.sqrt( s3 )
ODL_106:132:double_safeNorm(double):s2 >= x3max => s2
ODL_107:132:double_safeNorm(double):s2 >= x3max => x3max
ODL_108:133:double_safeNorm(double):x3max / s2 => x3max
ODL_109:133:double_safeNorm(double):x3max / s2 => s2
ODL_110:133:double_safeNorm(double):x3max * s3 => x3max
ODL_111:133:double_safeNorm(double):x3max * s3 => s3
ODL_112:133:double_safeNorm(double):x3max / s2 * (x3max * s3) => x3max / s2
ODL_113:133:double_safeNorm(double):x3max / s2 * (x3max * s3) => x3max * s3
ODL_114:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => 1
ODL_115:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => x3max / s2 * (x3max * s3)
ODL_116:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => s2
ODL_117:133:double_safeNorm(double):s2 * (1 + x3max / s2 * (x3max * s3)) => 1 + x3max / s2 * (x3max * s3)
ODL_118:135:double_safeNorm(double):s2 / x3max => s2
ODL_119:135:double_safeNorm(double):s2 / x3max => x3max
ODL_120:135:double_safeNorm(double):x3max * s3 => x3max
ODL_121:135:double_safeNorm(double):x3max * s3 => s3
ODL_122:135:double_safeNorm(double):s2 / x3max + x3max * s3 => s2 / x3max
ODL_123:135:double_safeNorm(double):s2 / x3max + x3max * s3 => x3max * s3
ODL_124:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => x3max
ODL_125:135:double_safeNorm(double):x3max * (s2 / x3max + x3max * s3) => s2 / x3max + x3max * s3
ODL_126:145:double_scale(double,double):i < arr.length => i
ODL_127:145:double_scale(double,double):i < arr.length => arr.length
ODL_128:145:double_scale(double,double):i++ => i
ODL_129:146:double_scale(double,double):arr[i] * val => arr[i]
ODL_130:146:double_scale(double,double):arr[i] * val => val
ODL_131:155:double_entropy(double):i < k.length => i
ODL_132:155:double_entropy(double):i < k.length => k.length
ODL_133:155:double_entropy(double):i++ => i
ODL_134:156:double_entropy(double):sum_k += (double) k[i] => sum_k = (double) k[i]
ODL_135:158:double_entropy(double):i < k.length => i
ODL_136:158:double_entropy(double):i < k.length => k.length
ODL_137:158:double_entropy(double):i++ => i
ODL_138:159:double_entropy(double):k[i] != 0 => k[i]
ODL_139:159:double_entropy(double):k[i] != 0 => 0
ODL_140:160:double_entropy(double):(double) k[i] / sum_k => (double) k[i]
ODL_141:160:double_entropy(double):(double) k[i] / sum_k => sum_k
ODL_142:161:double_entropy(double):p_i * Math.log( p_i ) => p_i
ODL_143:161:double_entropy(double):p_i * Math.log( p_i ) => Math.log( p_i )
ODL_144:161:double_entropy(double):h += p_i * Math.log( p_i ) => h = p_i * Math.log( p_i )
ODL_145:164:double_entropy(double):-h => h
ODL_146:171:double_g(double,double):i < observed.length => i
ODL_147:171:double_g(double,double):i < observed.length => observed.length
ODL_148:171:double_g(double,double):i++ => i
ODL_149:172:double_g(double,double):sumExpected += expected[i] => sumExpected = expected[i]
ODL_150:173:double_g(double,double):sumObserved += observed[i] => sumObserved = observed[i]
ODL_151:177:double_g(double,double):sumExpected - sumObserved => sumExpected
ODL_152:177:double_g(double,double):sumExpected - sumObserved => sumObserved
ODL_153:177:double_g(double,double):Math.abs( sumExpected - sumObserved ) > 10E-6 => Math.abs( sumExpected - sumObserved )
ODL_154:177:double_g(double,double):Math.abs( sumExpected - sumObserved ) > 10E-6 => 10E-6
ODL_155:178:double_g(double,double):sumObserved / sumExpected => sumObserved
ODL_156:178:double_g(double,double):sumObserved / sumExpected => sumExpected
ODL_157:182:double_g(double,double):i < observed.length => i
ODL_158:182:double_g(double,double):i < observed.length => observed.length
ODL_159:182:double_g(double,double):i++ => i
ODL_160:183:double_g(double,double):ratio * expected[i] => ratio
ODL_161:183:double_g(double,double):ratio * expected[i] => expected[i]
ODL_162:183:double_g(double,double):(double) observed[i] / (ratio * expected[i]) => (double) observed[i]
ODL_163:183:double_g(double,double):(double) observed[i] / (ratio * expected[i]) => ratio * expected[i]
ODL_164:183:double_g(double,double):(double) observed[i] / expected[i] => (double) observed[i]
ODL_165:183:double_g(double,double):(double) observed[i] / expected[i] => expected[i]
ODL_166:184:double_g(double,double):(double) observed[i] * dev => (double) observed[i]
ODL_167:184:double_g(double,double):(double) observed[i] * dev => dev
ODL_168:184:double_g(double,double):sum += (double) observed[i] * dev => sum = (double) observed[i] * dev
ODL_169:186:double_g(double,double):2d * sum => 2d
ODL_170:186:double_g(double,double):2d * sum => sum
ODL_171:191:double_calculateAbsoluteDifferences(double):z == null => z
ODL_172:191:double_calculateAbsoluteDifferences(double):z == null => null
ODL_173:194:double_calculateAbsoluteDifferences(double):z.length == 0 => z.length
ODL_174:194:double_calculateAbsoluteDifferences(double):z.length == 0 => 0
ODL_175:198:double_calculateAbsoluteDifferences(double):i < z.length => i
ODL_176:198:double_calculateAbsoluteDifferences(double):i < z.length => z.length
ODL_177:198:double_calculateAbsoluteDifferences(double):++i => i
ODL_178:207:double_calculateDifferences(double,double):i < x.length => i
ODL_179:207:double_calculateDifferences(double,double):i < x.length => x.length
ODL_180:207:double_calculateDifferences(double,double):++i => i
ODL_181:208:double_calculateDifferences(double,double):y[i] - x[i] => y[i]
ODL_182:208:double_calculateDifferences(double,double):y[i] - x[i] => x[i]
ODL_183:219:double_computeDividedDifference(double,double):i < n => i
ODL_184:219:double_computeDividedDifference(double,double):i < n => n
ODL_185:219:double_computeDividedDifference(double,double):i++ => i
ODL_186:220:double_computeDividedDifference(double,double):n - i => n
ODL_187:220:double_computeDividedDifference(double,double):n - i => i
ODL_188:220:double_computeDividedDifference(double,double):j < n - i => j
ODL_189:220:double_computeDividedDifference(double,double):j < n - i => n - i
ODL_190:220:double_computeDividedDifference(double,double):j++ => j
ODL_191:221:double_computeDividedDifference(double,double):j + i => j
ODL_192:221:double_computeDividedDifference(double,double):j + i => i
ODL_193:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j + i]
ODL_194:221:double_computeDividedDifference(double,double):x[j + i] - x[j] => x[j]
ODL_195:222:double_computeDividedDifference(double,double):j + 1 => j
ODL_196:222:double_computeDividedDifference(double,double):j + 1 => 1
ODL_197:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j + 1]
ODL_198:222:double_computeDividedDifference(double,double):divdiff[j + 1] - divdiff[j] => divdiff[j]
ODL_199:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => divdiff[j + 1] - divdiff[j]
ODL_200:222:double_computeDividedDifference(double,double):(divdiff[j + 1] - divdiff[j]) / denominator => denominator
ODL_201:232:double_computeCanberraDistance(double,double):i < a.length => i
ODL_202:232:double_computeCanberraDistance(double,double):i < a.length => a.length
ODL_203:232:double_computeCanberraDistance(double,double):i++ => i
ODL_204:233:double_computeCanberraDistance(double,double):a[i] - b[i] => a[i]
ODL_205:233:double_computeCanberraDistance(double,double):a[i] - b[i] => b[i]
ODL_206:234:double_computeCanberraDistance(double,double):Math.abs( a[i] ) + Math.abs( b[i] ) => Math.abs( a[i] )
ODL_207:234:double_computeCanberraDistance(double,double):Math.abs( a[i] ) + Math.abs( b[i] ) => Math.abs( b[i] )
ODL_208:235:double_computeCanberraDistance(double,double):num == 0.0 => num
ODL_209:235:double_computeCanberraDistance(double,double):num == 0.0 => 0.0
ODL_210:235:double_computeCanberraDistance(double,double):denom == 0.0 => denom
ODL_211:235:double_computeCanberraDistance(double,double):denom == 0.0 => 0.0
ODL_212:235:double_computeCanberraDistance(double,double):num == 0.0 && denom == 0.0 => num == 0.0
ODL_213:235:double_computeCanberraDistance(double,double):num == 0.0 && denom == 0.0 => denom == 0.0
ODL_214:235:double_computeCanberraDistance(double,double):num / denom => num
ODL_215:235:double_computeCanberraDistance(double,double):num / denom => denom
ODL_216:235:double_computeCanberraDistance(double,double):sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom => sum = num == 0.0 && denom == 0.0 ? 0.0 : num / denom
ODL_217:243:double_evaluateHoners(double,double):n - 1 => n
ODL_218:243:double_evaluateHoners(double,double):n - 1 => 1
ODL_219:244:double_evaluateHoners(double,double):j >= 0 => j
ODL_220:244:double_evaluateHoners(double,double):j >= 0 => 0
ODL_221:244:double_evaluateHoners(double,double):j-- => j
ODL_222:245:double_evaluateHoners(double,double):argument * result => argument
ODL_223:245:double_evaluateHoners(double,double):argument * result => result
ODL_224:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => argument * result
ODL_225:245:double_evaluateHoners(double,double):argument * result + coefficients[j] => coefficients[j]
ODL_226:257:double_evaluateInternal(double,double,double):i < n => i
ODL_227:257:double_evaluateInternal(double,double,double):i < n => n
ODL_228:257:double_evaluateInternal(double,double,double):i++ => i
ODL_229:260:double_evaluateInternal(double,double,double):z - x[i] => z
ODL_230:260:double_evaluateInternal(double,double,double):z - x[i] => x[i]
ODL_231:261:double_evaluateInternal(double,double,double):dist < min_dist => dist
ODL_232:261:double_evaluateInternal(double,double,double):dist < min_dist => min_dist
ODL_233:267:double_evaluateInternal(double,double,double):i < n => i
ODL_234:267:double_evaluateInternal(double,double,double):i < n => n
ODL_235:267:double_evaluateInternal(double,double,double):i++ => i
ODL_236:268:double_evaluateInternal(double,double,double):n - i => n
ODL_237:268:double_evaluateInternal(double,double,double):n - i => i
ODL_238:268:double_evaluateInternal(double,double,double):j < n - i => j
ODL_239:268:double_evaluateInternal(double,double,double):j < n - i => n - i
ODL_240:268:double_evaluateInternal(double,double,double):j++ => j
ODL_241:269:double_evaluateInternal(double,double,double):x[j] - z => x[j]
ODL_242:269:double_evaluateInternal(double,double,double):x[j] - z => z
ODL_243:270:double_evaluateInternal(double,double,double):i + j => i
ODL_244:270:double_evaluateInternal(double,double,double):i + j => j
ODL_245:270:double_evaluateInternal(double,double,double):x[i + j] - z => x[i + j]
ODL_246:270:double_evaluateInternal(double,double,double):x[i + j] - z => z
ODL_247:271:double_evaluateInternal(double,double,double):i + j => i
ODL_248:271:double_evaluateInternal(double,double,double):i + j => j
ODL_249:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[j]
ODL_250:271:double_evaluateInternal(double,double,double):x[j] - x[i + j] => x[i + j]
ODL_251:272:double_evaluateInternal(double,double,double):j + 1 => j
ODL_252:272:double_evaluateInternal(double,double,double):j + 1 => 1
ODL_253:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => c[j + 1]
ODL_254:272:double_evaluateInternal(double,double,double):c[j + 1] - d[j] => d[j]
ODL_255:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => c[j + 1] - d[j]
ODL_256:272:double_evaluateInternal(double,double,double):(c[j + 1] - d[j]) / divider => divider
ODL_257:273:double_evaluateInternal(double,double,double):tc * w => tc
ODL_258:273:double_evaluateInternal(double,double,double):tc * w => w
ODL_259:274:double_evaluateInternal(double,double,double):td * w => td
ODL_260:274:double_evaluateInternal(double,double,double):td * w => w
ODL_261:276:double_evaluateInternal(double,double,double):n - i => n
ODL_262:276:double_evaluateInternal(double,double,double):n - i => i
ODL_263:276:double_evaluateInternal(double,double,double):n - i + 1 => n - i
ODL_264:276:double_evaluateInternal(double,double,double):n - i + 1 => 1
ODL_265:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => 0.5
ODL_266:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => n - i + 1
ODL_267:276:double_evaluateInternal(double,double,double):nearest < 0.5 * (n - i + 1) => nearest
ODL_268:276:double_evaluateInternal(double,double,double):nearest < 0.5 * (n - i + 1) => 0.5 * (n - i + 1)
ODL_269:277:double_evaluateInternal(double,double,double):value += c[nearest] => value = c[nearest]
ODL_270:279:double_evaluateInternal(double,double,double):nearest-- => nearest
ODL_271:280:double_evaluateInternal(double,double,double):value += d[nearest] => value = d[nearest]
ODL_272:288:double_evaluateNewton(double,double,double):c.length - 1 => c.length
ODL_273:288:double_evaluateNewton(double,double,double):c.length - 1 => 1
ODL_274:290:double_evaluateNewton(double,double,double):i >= 0 => i
ODL_275:290:double_evaluateNewton(double,double,double):i >= 0 => 0
ODL_276:290:double_evaluateNewton(double,double,double):i-- => i
ODL_277:291:double_evaluateNewton(double,double,double):z - c[i] => z
ODL_278:291:double_evaluateNewton(double,double,double):z - c[i] => c[i]
ODL_279:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => z - c[i]
ODL_280:291:double_evaluateNewton(double,double,double):(z - c[i]) * value => value
ODL_281:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => a[i]
ODL_282:291:double_evaluateNewton(double,double,double):a[i] + (z - c[i]) * value => (z - c[i]) * value
ODL_283:299:double_meanDifference(double,double):i < sample1.length => i
ODL_284:299:double_meanDifference(double,double):i < sample1.length => sample1.length
ODL_285:299:double_meanDifference(double,double):i++ => i
ODL_286:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample1[i]
ODL_287:300:double_meanDifference(double,double):sample1[i] - sample2[i] => sample2[i]
ODL_288:300:double_meanDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference = sample1[i] - sample2[i]
ODL_289:302:double_meanDifference(double,double):sumDifference / sample1.length => sumDifference
ODL_290:302:double_meanDifference(double,double):sumDifference / sample1.length => sample1.length
ODL_291:312:double_varianceDifference(double,double):i < n => i
ODL_292:312:double_varianceDifference(double,double):i < n => n
ODL_293:312:double_varianceDifference(double,double):i++ => i
ODL_294:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i]
ODL_295:313:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample2[i]
ODL_296:313:double_varianceDifference(double,double):sumDifference += sample1[i] - sample2[i] => sumDifference = sample1[i] - sample2[i]
ODL_297:315:double_varianceDifference(double,double):sumDifference / n => sumDifference
ODL_298:315:double_varianceDifference(double,double):sumDifference / n => n
ODL_299:316:double_varianceDifference(double,double):i < n => i
ODL_300:316:double_varianceDifference(double,double):i < n => n
ODL_301:316:double_varianceDifference(double,double):i++ => i
ODL_302:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample1[i]
ODL_303:317:double_varianceDifference(double,double):sample1[i] - sample2[i] => sample2[i]
ODL_304:318:double_varianceDifference(double,double):diff - meanDifference => diff
ODL_305:318:double_varianceDifference(double,double):diff - meanDifference => meanDifference
ODL_306:318:double_varianceDifference(double,double):diff - meanDifference => diff
ODL_307:318:double_varianceDifference(double,double):diff - meanDifference => meanDifference
ODL_308:318:double_varianceDifference(double,double):(diff - meanDifference) * (diff - meanDifference) => diff - meanDifference
ODL_309:318:double_varianceDifference(double,double):(diff - meanDifference) * (diff - meanDifference) => diff - meanDifference
ODL_310:318:double_varianceDifference(double,double):sum1 += (diff - meanDifference) * (diff - meanDifference) => sum1 = (diff - meanDifference) * (diff - meanDifference)
ODL_311:319:double_varianceDifference(double,double):diff - meanDifference => diff
ODL_312:319:double_varianceDifference(double,double):diff - meanDifference => meanDifference
ODL_313:319:double_varianceDifference(double,double):sum2 += diff - meanDifference => sum2 = diff - meanDifference
ODL_314:321:double_varianceDifference(double,double):sum2 * sum2 => sum2
ODL_315:321:double_varianceDifference(double,double):sum2 * sum2 => sum2
ODL_316:321:double_varianceDifference(double,double):sum2 * sum2 / n => sum2 * sum2
ODL_317:321:double_varianceDifference(double,double):sum2 * sum2 / n => n
ODL_318:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum1
ODL_319:321:double_varianceDifference(double,double):sum1 - sum2 * sum2 / n => sum2 * sum2 / n
ODL_320:321:double_varianceDifference(double,double):n - 1 => n
ODL_321:321:double_varianceDifference(double,double):n - 1 => 1
ODL_322:321:double_varianceDifference(double,double):(sum1 - sum2 * sum2 / n) / (n - 1) => sum1 - sum2 * sum2 / n
ODL_323:321:double_varianceDifference(double,double):(sum1 - sum2 * sum2 / n) / (n - 1) => n - 1
ODL_324:326:boolean_equals(double,double):x == null => x
ODL_325:326:boolean_equals(double,double):x == null => null
ODL_326:326:boolean_equals(double,double):y == null => y
ODL_327:326:boolean_equals(double,double):y == null => null
ODL_328:326:boolean_equals(double,double):x == null || y == null => x == null
ODL_329:326:boolean_equals(double,double):x == null || y == null => y == null
ODL_330:327:boolean_equals(double,double):x == null => x
ODL_331:327:boolean_equals(double,double):x == null => null
ODL_332:327:boolean_equals(double,double):y == null => y
ODL_333:327:boolean_equals(double,double):y == null => null
ODL_334:327:boolean_equals(double,double):x == null ^ y == null => x == null
ODL_335:327:boolean_equals(double,double):x == null ^ y == null => y == null
ODL_336:327:boolean_equals(double,double):!(x == null ^ y == null) => x == null ^ y == null
ODL_337:329:boolean_equals(double,double):x.length != y.length => x.length
ODL_338:329:boolean_equals(double,double):x.length != y.length => y.length
ODL_339:332:boolean_equals(double,double):i < x.length => i
ODL_340:332:boolean_equals(double,double):i < x.length => x.length
ODL_341:332:boolean_equals(double,double):++i => i
ODL_342:333:boolean_equals(double,double):y[i] - x[i] => y[i]
ODL_343:333:boolean_equals(double,double):y[i] - x[i] => x[i]
ODL_344:333:boolean_equals(double,double):Math.abs( y[i] - x[i] ) > 0.0001 => Math.abs( y[i] - x[i] )
ODL_345:333:boolean_equals(double,double):Math.abs( y[i] - x[i] ) > 0.0001 => 0.0001
ODL_346:342:boolean_checkNonNegative(double):i < in.length => i
ODL_347:342:boolean_checkNonNegative(double):i < in.length => in.length
ODL_348:342:boolean_checkNonNegative(double):i++ => i
ODL_349:343:boolean_checkNonNegative(double):in[i] < 0 => in[i]
ODL_350:343:boolean_checkNonNegative(double):in[i] < 0 => 0
ODL_351:352:boolean_checkPositive(double):i < in.length => i
ODL_352:352:boolean_checkPositive(double):i < in.length => in.length
ODL_353:352:boolean_checkPositive(double):i++ => i
ODL_354:353:boolean_checkPositive(double):in[i] <= 0 => in[i]
ODL_355:353:boolean_checkPositive(double):in[i] <= 0 => 0
ODL_356:364:double_chiSquare(double,double):i < observed.length => i
ODL_357:364:double_chiSquare(double,double):i < observed.length => observed.length
ODL_358:364:double_chiSquare(double,double):i++ => i
ODL_359:365:double_chiSquare(double,double):sumExpected += expected[i] => sumExpected = expected[i]
ODL_360:366:double_chiSquare(double,double):sumObserved += observed[i] => sumObserved = observed[i]
ODL_361:370:double_chiSquare(double,double):sumExpected - sumObserved => sumExpected
ODL_362:370:double_chiSquare(double,double):sumExpected - sumObserved => sumObserved
ODL_363:370:double_chiSquare(double,double):Math.abs( sumExpected - sumObserved ) > 10E-6 => Math.abs( sumExpected - sumObserved )
ODL_364:370:double_chiSquare(double,double):Math.abs( sumExpected - sumObserved ) > 10E-6 => 10E-6
ODL_365:371:double_chiSquare(double,double):sumObserved / sumExpected => sumObserved
ODL_366:371:double_chiSquare(double,double):sumObserved / sumExpected => sumExpected
ODL_367:375:double_chiSquare(double,double):i < observed.length => i
ODL_368:375:double_chiSquare(double,double):i < observed.length => observed.length
ODL_369:375:double_chiSquare(double,double):i++ => i
ODL_370:377:double_chiSquare(double,double):ratio * expected[i] => ratio
ODL_371:377:double_chiSquare(double,double):ratio * expected[i] => expected[i]
ODL_372:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => observed[i]
ODL_373:377:double_chiSquare(double,double):observed[i] - ratio * expected[i] => ratio * expected[i]
ODL_374:378:double_chiSquare(double,double):dev * dev => dev
ODL_375:378:double_chiSquare(double,double):dev * dev => dev
ODL_376:378:double_chiSquare(double,double):ratio * expected[i] => ratio
ODL_377:378:double_chiSquare(double,double):ratio * expected[i] => expected[i]
ODL_378:378:double_chiSquare(double,double):dev * dev / (ratio * expected[i]) => dev * dev
ODL_379:378:double_chiSquare(double,double):dev * dev / (ratio * expected[i]) => ratio * expected[i]
ODL_380:378:double_chiSquare(double,double):sumSq += dev * dev / (ratio * expected[i]) => sumSq = dev * dev / (ratio * expected[i])
ODL_381:380:double_chiSquare(double,double):observed[i] - expected[i] => observed[i]
ODL_382:380:double_chiSquare(double,double):observed[i] - expected[i] => expected[i]
ODL_383:381:double_chiSquare(double,double):dev * dev => dev
ODL_384:381:double_chiSquare(double,double):dev * dev => dev
ODL_385:381:double_chiSquare(double,double):dev * dev / expected[i] => dev * dev
ODL_386:381:double_chiSquare(double,double):dev * dev / expected[i] => expected[i]
ODL_387:381:double_chiSquare(double,double):sumSq += dev * dev / expected[i] => sumSq = dev * dev / expected[i]
ODL_388:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length == 0 => values.length
ODL_389:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length == 0 => 0
ODL_390:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length == 1 => values.length
ODL_391:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length == 1 => 1
ODL_392:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i < length => i
ODL_393:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i < length => length
ODL_394:398:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):i++ => i
ODL_395:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff => values[i]
ODL_396:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff => cutoff
ODL_397:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff == booleanDirection => values[i] > cutoff
ODL_398:399:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] > cutoff == booleanDirection => booleanDirection
ODL_399:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => values[i]
ODL_400:400:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values[i] - cutoff => cutoff
ODL_401:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev
ODL_402:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):dev * dev => dev
ODL_403:401:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq += dev * dev => sumsq = dev * dev
ODL_404:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => length
ODL_405:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => 1.0
ODL_406:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => sumsq
ODL_407:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / (length - 1.0) => length - 1.0
ODL_408:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => sumsq
ODL_409:407:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):sumsq / length => length
ODL_410:417:int_partition(double,int,int,int):begin + 1 => begin
ODL_411:417:int_partition(double,int,int,int):begin + 1 => 1
ODL_412:418:int_partition(double,int,int,int):end - 1 => end
ODL_413:418:int_partition(double,int,int,int):end - 1 => 1
ODL_414:419:int_partition(double,int,int,int):i < j => i
ODL_415:419:int_partition(double,int,int,int):i < j => j
ODL_416:420:int_partition(double,int,int,int):i < j => i
ODL_417:420:int_partition(double,int,int,int):i < j => j
ODL_418:420:int_partition(double,int,int,int):work[j] > value => work[j]
ODL_419:420:int_partition(double,int,int,int):work[j] > value => value
ODL_420:420:int_partition(double,int,int,int):i < j && work[j] > value => i < j
ODL_421:420:int_partition(double,int,int,int):i < j && work[j] > value => work[j] > value
ODL_422:421:int_partition(double,int,int,int):--j => j
ODL_423:423:int_partition(double,int,int,int):i < j => i
ODL_424:423:int_partition(double,int,int,int):i < j => j
ODL_425:423:int_partition(double,int,int,int):work[i] < value => work[i]
ODL_426:423:int_partition(double,int,int,int):work[i] < value => value
ODL_427:423:int_partition(double,int,int,int):i < j && work[i] < value => i < j
ODL_428:423:int_partition(double,int,int,int):i < j && work[i] < value => work[i] < value
ODL_429:424:int_partition(double,int,int,int):++i => i
ODL_430:426:int_partition(double,int,int,int):i < j => i
ODL_431:426:int_partition(double,int,int,int):i < j => j
ODL_432:428:int_partition(double,int,int,int):i++ => i
ODL_433:429:int_partition(double,int,int,int):j-- => j
ODL_434:432:int_partition(double,int,int,int):i >= end => i
ODL_435:432:int_partition(double,int,int,int):i >= end => end
ODL_436:432:int_partition(double,int,int,int):work[i] > value => work[i]
ODL_437:432:int_partition(double,int,int,int):work[i] > value => value
ODL_438:432:int_partition(double,int,int,int):i >= end || work[i] > value => i >= end
ODL_439:432:int_partition(double,int,int,int):i >= end || work[i] > value => work[i] > value
ODL_440:433:int_partition(double,int,int,int):--i => i
ODL_441:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => begin
ODL_442:444:double_evaluateWeightedProduct(double,double,int,int):begin + length => length
ODL_443:444:double_evaluateWeightedProduct(double,double,int,int):i < begin + length => i
ODL_444:444:double_evaluateWeightedProduct(double,double,int,int):i < begin + length => begin + length
ODL_445:444:double_evaluateWeightedProduct(double,double,int,int):i++ => i
ODL_446:445:double_evaluateWeightedProduct(double,double,int,int):product *= Math.pow( values[i], weights[i] ) => product = Math.pow( values[i], weights[i] )
CDL_1:103:double_safeNorm(double):1 + s1 * r * r => s1 * r * r
CDL_2:112:double_safeNorm(double):1 + s3 * r * r => s3 * r * r
CDL_3:115:double_safeNorm(double):xabs != 0 => xabs
CDL_4:126:double_safeNorm(double):s1 != 0 => s1
CDL_5:129:double_safeNorm(double):s2 == 0 => s2
CDL_6:133:double_safeNorm(double):1 + x3max / s2 * (x3max * s3) => x3max / s2 * (x3max * s3)
CDL_7:159:double_entropy(double):k[i] != 0 => k[i]
CDL_8:177:double_g(double,double):Math.abs( sumExpected - sumObserved ) > 10E-6 => Math.abs( sumExpected - sumObserved )
CDL_9:186:double_g(double,double):2d * sum => sum
CDL_10:191:double_calculateAbsoluteDifferences(double):z == null => z
CDL_11:194:double_calculateAbsoluteDifferences(double):z.length == 0 => z.length
CDL_12:222:double_computeDividedDifference(double,double):j + 1 => j
CDL_13:235:double_computeCanberraDistance(double,double):num == 0.0 => num
CDL_14:235:double_computeCanberraDistance(double,double):denom == 0.0 => denom
CDL_15:243:double_evaluateHoners(double,double):n - 1 => n
CDL_16:244:double_evaluateHoners(double,double):j >= 0 => j
CDL_17:272:double_evaluateInternal(double,double,double):j + 1 => j
CDL_18:276:double_evaluateInternal(double,double,double):n - i + 1 => n - i
CDL_19:276:double_evaluateInternal(double,double,double):0.5 * (n - i + 1) => n - i + 1
CDL_20:288:double_evaluateNewton(double,double,double):c.length - 1 => c.length
CDL_21:290:double_evaluateNewton(double,double,double):i >= 0 => i
CDL_22:321:double_varianceDifference(double,double):n - 1 => n
CDL_23:326:boolean_equals(double,double):x == null => x
CDL_24:326:boolean_equals(double,double):y == null => y
CDL_25:327:boolean_equals(double,double):x == null => x
CDL_26:327:boolean_equals(double,double):y == null => y
CDL_27:333:boolean_equals(double,double):Math.abs( y[i] - x[i] ) > 0.0001 => Math.abs( y[i] - x[i] )
CDL_28:343:boolean_checkNonNegative(double):in[i] < 0 => in[i]
CDL_29:353:boolean_checkPositive(double):in[i] <= 0 => in[i]
CDL_30:370:double_chiSquare(double,double):Math.abs( sumExpected - sumObserved ) > 10E-6 => Math.abs( sumExpected - sumObserved )
CDL_31:389:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length == 0 => values.length
CDL_32:392:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):values.length == 1 => values.length
CDL_33:405:double_evaluateSemiVariance(double,double,boolean,boolean,int,int):length - 1.0 => length
CDL_34:417:int_partition(double,int,int,int):begin + 1 => begin
CDL_35:418:int_partition(double,int,int,int):end - 1 => end
