AORB_1:21:double_autoCorrelation(double,int,double,double):data[i] - mean => data[i] * mean
AORB_2:21:double_autoCorrelation(double,int,double,double):data[i] - mean => data[i] / mean
AORB_3:21:double_autoCorrelation(double,int,double,double):data[i] - mean => data[i] % mean
AORB_4:21:double_autoCorrelation(double,int,double,double):data[i] - mean => data[i] + mean
AORB_5:21:double_autoCorrelation(double,int,double,double):i - lag => i * lag
AORB_6:21:double_autoCorrelation(double,int,double,double):i - lag => i / lag
AORB_7:21:double_autoCorrelation(double,int,double,double):i - lag => i % lag
AORB_8:21:double_autoCorrelation(double,int,double,double):i - lag => i + lag
AORB_9:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => data[i - lag] * mean
AORB_10:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => data[i - lag] / mean
AORB_11:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => data[i - lag] % mean
AORB_12:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => data[i - lag] + mean
AORB_13:21:double_autoCorrelation(double,int,double,double):(data[i] - mean) * (data[i - lag] - mean) => (data[i] - mean) / (data[i - lag] - mean)
AORB_14:21:double_autoCorrelation(double,int,double,double):(data[i] - mean) * (data[i - lag] - mean) => (data[i] - mean) % (data[i - lag] - mean)
AORB_15:21:double_autoCorrelation(double,int,double,double):(data[i] - mean) * (data[i - lag] - mean) => data[i] - mean + (data[i - lag] - mean)
AORB_16:21:double_autoCorrelation(double,int,double,double):(data[i] - mean) * (data[i - lag] - mean) => data[i] - mean - (data[i - lag] - mean)
AORB_17:23:double_autoCorrelation(double,int,double,double):N - lag => N * lag
AORB_18:23:double_autoCorrelation(double,int,double,double):N - lag => N / lag
AORB_19:23:double_autoCorrelation(double,int,double,double):N - lag => N % lag
AORB_20:23:double_autoCorrelation(double,int,double,double):N - lag => N + lag
AORB_21:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => run * (N - lag)
AORB_22:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => run % (N - lag)
AORB_23:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => run + (N - lag)
AORB_24:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => run - (N - lag)
AORB_25:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => run / (N - lag) * variance
AORB_26:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => run / (N - lag) % variance
AORB_27:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => run / (N - lag) + variance
AORB_28:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => run / (N - lag) - variance
AORB_29:31:int_binarySearchFromTo(double,double,int,int):low + high => low * high
AORB_30:31:int_binarySearchFromTo(double,double,int,int):low + high => low / high
AORB_31:31:int_binarySearchFromTo(double,double,int,int):low + high => low % high
AORB_32:31:int_binarySearchFromTo(double,double,int,int):low + high => low - high
AORB_33:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => (low + high) * 2
AORB_34:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => (low + high) % 2
AORB_35:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => low + high + 2
AORB_36:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => low + high - 2
AORB_37:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => mid * 1
AORB_38:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => mid / 1
AORB_39:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => mid % 1
AORB_40:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => mid - 1
AORB_41:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => mid * 1
AORB_42:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => mid / 1
AORB_43:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => mid % 1
AORB_44:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => mid + 1
AORB_45:43:int_binarySearchFromTo(double,double,int,int):low + 1 => low * 1
AORB_46:43:int_binarySearchFromTo(double,double,int,int):low + 1 => low / 1
AORB_47:43:int_binarySearchFromTo(double,double,int,int):low + 1 => low % 1
AORB_48:43:int_binarySearchFromTo(double,double,int,int):low + 1 => low - 1
AORB_49:56:double_covariance(double,double):i + 1 => i * 1
AORB_50:56:double_covariance(double,double):i + 1 => i / 1
AORB_51:56:double_covariance(double,double):i + 1 => i % 1
AORB_52:56:double_covariance(double,double):i + 1 => i - 1
AORB_53:56:double_covariance(double,double):sumx / (i + 1) => sumx * (i + 1)
AORB_54:56:double_covariance(double,double):sumx / (i + 1) => sumx % (i + 1)
AORB_55:56:double_covariance(double,double):sumx / (i + 1) => sumx + (i + 1)
AORB_56:56:double_covariance(double,double):sumx / (i + 1) => sumx - (i + 1)
AORB_57:56:double_covariance(double,double):x - sumx / (i + 1) => x * (sumx / (i + 1))
AORB_58:56:double_covariance(double,double):x - sumx / (i + 1) => x / (sumx / (i + 1))
AORB_59:56:double_covariance(double,double):x - sumx / (i + 1) => x % (sumx / (i + 1))
AORB_60:56:double_covariance(double,double):x - sumx / (i + 1) => x + sumx / (i + 1)
AORB_61:56:double_covariance(double,double):sumy / i => sumy * i
AORB_62:56:double_covariance(double,double):sumy / i => sumy % i
AORB_63:56:double_covariance(double,double):sumy / i => sumy + i
AORB_64:56:double_covariance(double,double):sumy / i => sumy - i
AORB_65:56:double_covariance(double,double):y - sumy / i => y * (sumy / i)
AORB_66:56:double_covariance(double,double):y - sumy / i => y / (sumy / i)
AORB_67:56:double_covariance(double,double):y - sumy / i => y % (sumy / i)
AORB_68:56:double_covariance(double,double):y - sumy / i => y + sumy / i
AORB_69:56:double_covariance(double,double):(x - sumx / (i + 1)) * (y - sumy / i) => (x - sumx / (i + 1)) / (y - sumy / i)
AORB_70:56:double_covariance(double,double):(x - sumx / (i + 1)) * (y - sumy / i) => (x - sumx / (i + 1)) % (y - sumy / i)
AORB_71:56:double_covariance(double,double):(x - sumx / (i + 1)) * (y - sumy / i) => x - sumx / (i + 1) + (y - sumy / i)
AORB_72:56:double_covariance(double,double):(x - sumx / (i + 1)) * (y - sumy / i) => x - sumx / (i + 1) - (y - sumy / i)
AORB_73:59:double_covariance(double,double):size - 1 => size * 1
AORB_74:59:double_covariance(double,double):size - 1 => size / 1
AORB_75:59:double_covariance(double,double):size - 1 => size % 1
AORB_76:59:double_covariance(double,double):size - 1 => size + 1
AORB_77:59:double_covariance(double,double):Sxy / (size - 1) => Sxy * (size - 1)
AORB_78:59:double_covariance(double,double):Sxy / (size - 1) => Sxy % (size - 1)
AORB_79:59:double_covariance(double,double):Sxy / (size - 1) => Sxy + (size - 1)
AORB_80:59:double_covariance(double,double):Sxy / (size - 1) => Sxy - (size - 1)
AORB_81:67:double_durbinWatson(double):i - 1 => i * 1
AORB_82:67:double_durbinWatson(double):i - 1 => i / 1
AORB_83:67:double_durbinWatson(double):i - 1 => i % 1
AORB_84:67:double_durbinWatson(double):i - 1 => i + 1
AORB_85:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i] * elements[i - 1]
AORB_86:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i] / elements[i - 1]
AORB_87:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i] % elements[i - 1]
AORB_88:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i] + elements[i - 1]
AORB_89:68:double_durbinWatson(double):x * x => x / x
AORB_90:68:double_durbinWatson(double):x * x => x % x
AORB_91:68:double_durbinWatson(double):x * x => x + x
AORB_92:68:double_durbinWatson(double):x * x => x - x
AORB_93:78:double_lag1(double,double):elements[0] - mean => elements[0] * mean
AORB_94:78:double_lag1(double,double):elements[0] - mean => elements[0] / mean
AORB_95:78:double_lag1(double,double):elements[0] - mean => elements[0] % mean
AORB_96:78:double_lag1(double,double):elements[0] - mean => elements[0] + mean
AORB_97:78:double_lag1(double,double):elements[0] - mean => elements[0] * mean
AORB_98:78:double_lag1(double,double):elements[0] - mean => elements[0] / mean
AORB_99:78:double_lag1(double,double):elements[0] - mean => elements[0] % mean
AORB_100:78:double_lag1(double,double):elements[0] - mean => elements[0] + mean
AORB_101:78:double_lag1(double,double):(elements[0] - mean) * (elements[0] - mean) => (elements[0] - mean) / (elements[0] - mean)
AORB_102:78:double_lag1(double,double):(elements[0] - mean) * (elements[0] - mean) => (elements[0] - mean) % (elements[0] - mean)
AORB_103:78:double_lag1(double,double):(elements[0] - mean) * (elements[0] - mean) => elements[0] - mean + (elements[0] - mean)
AORB_104:78:double_lag1(double,double):(elements[0] - mean) * (elements[0] - mean) => elements[0] - mean - (elements[0] - mean)
AORB_105:80:double_lag1(double,double):i - 1 => i * 1
AORB_106:80:double_lag1(double,double):i - 1 => i / 1
AORB_107:80:double_lag1(double,double):i - 1 => i % 1
AORB_108:80:double_lag1(double,double):i - 1 => i + 1
AORB_109:80:double_lag1(double,double):elements[i - 1] - mean => elements[i - 1] * mean
AORB_110:80:double_lag1(double,double):elements[i - 1] - mean => elements[i - 1] / mean
AORB_111:80:double_lag1(double,double):elements[i - 1] - mean => elements[i - 1] % mean
AORB_112:80:double_lag1(double,double):elements[i - 1] - mean => elements[i - 1] + mean
AORB_113:81:double_lag1(double,double):elements[i] - mean => elements[i] * mean
AORB_114:81:double_lag1(double,double):elements[i] - mean => elements[i] / mean
AORB_115:81:double_lag1(double,double):elements[i] - mean => elements[i] % mean
AORB_116:81:double_lag1(double,double):elements[i] - mean => elements[i] + mean
AORB_117:82:double_lag1(double,double):delta0 * delta1 => delta0 / delta1
AORB_118:82:double_lag1(double,double):delta0 * delta1 => delta0 % delta1
AORB_119:82:double_lag1(double,double):delta0 * delta1 => delta0 + delta1
AORB_120:82:double_lag1(double,double):delta0 * delta1 => delta0 - delta1
AORB_121:82:double_lag1(double,double):delta0 * delta1 - q => delta0 * delta1 * q
AORB_122:82:double_lag1(double,double):delta0 * delta1 - q => delta0 * delta1 / q
AORB_123:82:double_lag1(double,double):delta0 * delta1 - q => delta0 * delta1 % q
AORB_124:82:double_lag1(double,double):delta0 * delta1 - q => delta0 * delta1 + q
AORB_125:82:double_lag1(double,double):i + 1 => i * 1
AORB_126:82:double_lag1(double,double):i + 1 => i / 1
AORB_127:82:double_lag1(double,double):i + 1 => i % 1
AORB_128:82:double_lag1(double,double):i + 1 => i - 1
AORB_129:82:double_lag1(double,double):(delta0 * delta1 - q) / (i + 1) => (delta0 * delta1 - q) * (i + 1)
AORB_130:82:double_lag1(double,double):(delta0 * delta1 - q) / (i + 1) => (delta0 * delta1 - q) % (i + 1)
AORB_131:82:double_lag1(double,double):(delta0 * delta1 - q) / (i + 1) => delta0 * delta1 - q + (i + 1)
AORB_132:82:double_lag1(double,double):(delta0 * delta1 - q) / (i + 1) => delta0 * delta1 - q - (i + 1)
AORB_133:83:double_lag1(double,double):delta1 * delta1 => delta1 / delta1
AORB_134:83:double_lag1(double,double):delta1 * delta1 => delta1 % delta1
AORB_135:83:double_lag1(double,double):delta1 * delta1 => delta1 + delta1
AORB_136:83:double_lag1(double,double):delta1 * delta1 => delta1 - delta1
AORB_137:83:double_lag1(double,double):delta1 * delta1 - v => delta1 * delta1 * v
AORB_138:83:double_lag1(double,double):delta1 * delta1 - v => delta1 * delta1 / v
AORB_139:83:double_lag1(double,double):delta1 * delta1 - v => delta1 * delta1 % v
AORB_140:83:double_lag1(double,double):delta1 * delta1 - v => delta1 * delta1 + v
AORB_141:83:double_lag1(double,double):i + 1 => i * 1
AORB_142:83:double_lag1(double,double):i + 1 => i / 1
AORB_143:83:double_lag1(double,double):i + 1 => i % 1
AORB_144:83:double_lag1(double,double):i + 1 => i - 1
AORB_145:83:double_lag1(double,double):(delta1 * delta1 - v) / (i + 1) => (delta1 * delta1 - v) * (i + 1)
AORB_146:83:double_lag1(double,double):(delta1 * delta1 - v) / (i + 1) => (delta1 * delta1 - v) % (i + 1)
AORB_147:83:double_lag1(double,double):(delta1 * delta1 - v) / (i + 1) => delta1 * delta1 - v + (i + 1)
AORB_148:83:double_lag1(double,double):(delta1 * delta1 - v) / (i + 1) => delta1 * delta1 - v - (i + 1)
AORB_149:85:double_lag1(double,double):q / v => q * v
AORB_150:85:double_lag1(double,double):q / v => q % v
AORB_151:85:double_lag1(double,double):q / v => q + v
AORB_152:85:double_lag1(double,double):q / v => q - v
AORB_153:92:double_max(double):size - 1 => size * 1
AORB_154:92:double_max(double):size - 1 => size / 1
AORB_155:92:double_max(double):size - 1 => size % 1
AORB_156:92:double_max(double):size - 1 => size + 1
AORB_157:106:double_meanDeviation(double,double):elements[i] - mean => elements[i] * mean
AORB_158:106:double_meanDeviation(double,double):elements[i] - mean => elements[i] / mean
AORB_159:106:double_meanDeviation(double,double):elements[i] - mean => elements[i] % mean
AORB_160:106:double_meanDeviation(double,double):elements[i] - mean => elements[i] + mean
AORB_161:108:double_meanDeviation(double,double):sum / size => sum * size
AORB_162:108:double_meanDeviation(double,double):sum / size => sum % size
AORB_163:108:double_meanDeviation(double,double):sum / size => sum + size
AORB_164:108:double_meanDeviation(double,double):sum / size => sum - size
AORB_165:114:double_min(double):size - 1 => size * 1
AORB_166:114:double_min(double):size - 1 => size / 1
AORB_167:114:double_min(double):size - 1 => size % 1
AORB_168:114:double_min(double):size - 1 => size + 1
AORB_169:136:double_quantile(double,double):n - 1 => n * 1
AORB_170:136:double_quantile(double,double):n - 1 => n / 1
AORB_171:136:double_quantile(double,double):n - 1 => n % 1
AORB_172:136:double_quantile(double,double):n - 1 => n + 1
AORB_173:136:double_quantile(double,double):phi * (n - 1) => phi / (n - 1)
AORB_174:136:double_quantile(double,double):phi * (n - 1) => phi % (n - 1)
AORB_175:136:double_quantile(double,double):phi * (n - 1) => phi + (n - 1)
AORB_176:136:double_quantile(double,double):phi * (n - 1) => phi - (n - 1)
AORB_177:138:double_quantile(double,double):index - lhs => index * lhs
AORB_178:138:double_quantile(double,double):index - lhs => index / lhs
AORB_179:138:double_quantile(double,double):index - lhs => index % lhs
AORB_180:138:double_quantile(double,double):index - lhs => index + lhs
AORB_181:143:double_quantile(double,double):n - 1 => n * 1
AORB_182:143:double_quantile(double,double):n - 1 => n / 1
AORB_183:143:double_quantile(double,double):n - 1 => n % 1
AORB_184:143:double_quantile(double,double):n - 1 => n + 1
AORB_185:146:double_quantile(double,double):1 - delta => 1 * delta
AORB_186:146:double_quantile(double,double):1 - delta => 1 / delta
AORB_187:146:double_quantile(double,double):1 - delta => 1 % delta
AORB_188:146:double_quantile(double,double):1 - delta => 1 + delta
AORB_189:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => (1 - delta) / sortedElements[lhs]
AORB_190:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => (1 - delta) % sortedElements[lhs]
AORB_191:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => 1 - delta + sortedElements[lhs]
AORB_192:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => 1 - delta - sortedElements[lhs]
AORB_193:146:double_quantile(double,double):lhs + 1 => lhs * 1
AORB_194:146:double_quantile(double,double):lhs + 1 => lhs / 1
AORB_195:146:double_quantile(double,double):lhs + 1 => lhs % 1
AORB_196:146:double_quantile(double,double):lhs + 1 => lhs - 1
AORB_197:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => delta / sortedElements[lhs + 1]
AORB_198:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => delta % sortedElements[lhs + 1]
AORB_199:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => delta + sortedElements[lhs + 1]
AORB_200:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => delta - sortedElements[lhs + 1]
AORB_201:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1] => (1 - delta) * sortedElements[lhs] * (delta * sortedElements[lhs + 1])
AORB_202:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1] => (1 - delta) * sortedElements[lhs] / (delta * sortedElements[lhs + 1])
AORB_203:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1] => (1 - delta) * sortedElements[lhs] % (delta * sortedElements[lhs + 1])
AORB_204:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1] => (1 - delta) * sortedElements[lhs] - delta * sortedElements[lhs + 1]
AORB_205:155:double_sampleKurtosis(int,double,double):moment4 * n => moment4 / n
AORB_206:155:double_sampleKurtosis(int,double,double):moment4 * n => moment4 % n
AORB_207:155:double_sampleKurtosis(int,double,double):moment4 * n => moment4 + n
AORB_208:155:double_sampleKurtosis(int,double,double):moment4 * n => moment4 - n
AORB_209:156:double_sampleKurtosis(int,double,double):m4 * n => m4 / n
AORB_210:156:double_sampleKurtosis(int,double,double):m4 * n => m4 % n
AORB_211:156:double_sampleKurtosis(int,double,double):m4 * n => m4 + n
AORB_212:156:double_sampleKurtosis(int,double,double):m4 * n => m4 - n
AORB_213:156:double_sampleKurtosis(int,double,double):n + 1 => n * 1
AORB_214:156:double_sampleKurtosis(int,double,double):n + 1 => n / 1
AORB_215:156:double_sampleKurtosis(int,double,double):n + 1 => n % 1
AORB_216:156:double_sampleKurtosis(int,double,double):n + 1 => n - 1
AORB_217:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) => m4 * n / (n + 1)
AORB_218:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) => m4 * n % (n + 1)
AORB_219:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) => m4 * n + (n + 1)
AORB_220:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) => m4 * n - (n + 1)
AORB_221:156:double_sampleKurtosis(int,double,double):n - 1 => n * 1
AORB_222:156:double_sampleKurtosis(int,double,double):n - 1 => n / 1
AORB_223:156:double_sampleKurtosis(int,double,double):n - 1 => n % 1
AORB_224:156:double_sampleKurtosis(int,double,double):n - 1 => n + 1
AORB_225:156:double_sampleKurtosis(int,double,double):n - 2 => n * 2
AORB_226:156:double_sampleKurtosis(int,double,double):n - 2 => n / 2
AORB_227:156:double_sampleKurtosis(int,double,double):n - 2 => n % 2
AORB_228:156:double_sampleKurtosis(int,double,double):n - 2 => n + 2
AORB_229:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) => (n - 1) / (n - 2)
AORB_230:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) => (n - 1) % (n - 2)
AORB_231:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) => n - 1 + (n - 2)
AORB_232:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) => n - 1 - (n - 2)
AORB_233:156:double_sampleKurtosis(int,double,double):n - 3 => n * 3
AORB_234:156:double_sampleKurtosis(int,double,double):n - 3 => n / 3
AORB_235:156:double_sampleKurtosis(int,double,double):n - 3 => n % 3
AORB_236:156:double_sampleKurtosis(int,double,double):n - 3 => n + 3
AORB_237:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) => (n - 1) * (n - 2) / (n - 3)
AORB_238:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) => (n - 1) * (n - 2) % (n - 3)
AORB_239:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) => (n - 1) * (n - 2) + (n - 3)
AORB_240:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) => (n - 1) * (n - 2) - (n - 3)
AORB_241:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => (n - 1) * (n - 2) * (n - 3) / s2
AORB_242:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => (n - 1) * (n - 2) * (n - 3) % s2
AORB_243:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => (n - 1) * (n - 2) * (n - 3) + s2
AORB_244:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => (n - 1) * (n - 2) * (n - 3) - s2
AORB_245:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => (n - 1) * (n - 2) * (n - 3) * s2 / s2
AORB_246:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => (n - 1) * (n - 2) * (n - 3) * s2 % s2
AORB_247:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => (n - 1) * (n - 2) * (n - 3) * s2 + s2
AORB_248:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => (n - 1) * (n - 2) * (n - 3) * s2 - s2
AORB_249:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) => m4 * n * (n + 1) * ((n - 1) * (n - 2) * (n - 3) * s2 * s2)
AORB_250:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) => m4 * n * (n + 1) % ((n - 1) * (n - 2) * (n - 3) * s2 * s2)
AORB_251:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) => m4 * n * (n + 1) + (n - 1) * (n - 2) * (n - 3) * s2 * s2
AORB_252:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) => m4 * n * (n + 1) - (n - 1) * (n - 2) * (n - 3) * s2 * s2
AORB_253:156:double_sampleKurtosis(int,double,double):n - 1 => n * 1
AORB_254:156:double_sampleKurtosis(int,double,double):n - 1 => n / 1
AORB_255:156:double_sampleKurtosis(int,double,double):n - 1 => n % 1
AORB_256:156:double_sampleKurtosis(int,double,double):n - 1 => n + 1
AORB_257:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => 3.0 / (n - 1)
AORB_258:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => 3.0 % (n - 1)
AORB_259:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => 3.0 + (n - 1)
AORB_260:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => 3.0 - (n - 1)
AORB_261:156:double_sampleKurtosis(int,double,double):n - 1 => n * 1
AORB_262:156:double_sampleKurtosis(int,double,double):n - 1 => n / 1
AORB_263:156:double_sampleKurtosis(int,double,double):n - 1 => n % 1
AORB_264:156:double_sampleKurtosis(int,double,double):n - 1 => n + 1
AORB_265:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) => 3.0 * (n - 1) / (n - 1)
AORB_266:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) => 3.0 * (n - 1) % (n - 1)
AORB_267:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) => 3.0 * (n - 1) + (n - 1)
AORB_268:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) => 3.0 * (n - 1) - (n - 1)
AORB_269:156:double_sampleKurtosis(int,double,double):n - 2 => n * 2
AORB_270:156:double_sampleKurtosis(int,double,double):n - 2 => n / 2
AORB_271:156:double_sampleKurtosis(int,double,double):n - 2 => n % 2
AORB_272:156:double_sampleKurtosis(int,double,double):n - 2 => n + 2
AORB_273:156:double_sampleKurtosis(int,double,double):n - 3 => n * 3
AORB_274:156:double_sampleKurtosis(int,double,double):n - 3 => n / 3
AORB_275:156:double_sampleKurtosis(int,double,double):n - 3 => n % 3
AORB_276:156:double_sampleKurtosis(int,double,double):n - 3 => n + 3
AORB_277:156:double_sampleKurtosis(int,double,double):(n - 2) * (n - 3) => (n - 2) / (n - 3)
AORB_278:156:double_sampleKurtosis(int,double,double):(n - 2) * (n - 3) => (n - 2) % (n - 3)
AORB_279:156:double_sampleKurtosis(int,double,double):(n - 2) * (n - 3) => n - 2 + (n - 3)
AORB_280:156:double_sampleKurtosis(int,double,double):(n - 2) * (n - 3) => n - 2 - (n - 3)
AORB_281:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => 3.0 * (n - 1) * (n - 1) * ((n - 2) * (n - 3))
AORB_282:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => 3.0 * (n - 1) * (n - 1) % ((n - 2) * (n - 3))
AORB_283:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => 3.0 * (n - 1) * (n - 1) + (n - 2) * (n - 3)
AORB_284:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => 3.0 * (n - 1) * (n - 1) - (n - 2) * (n - 3)
AORB_285:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) * (3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)))
AORB_286:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) / (3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)))
AORB_287:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) % (3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)))
AORB_288:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) + 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3))
AORB_289:162:double_sampleKurtosisStandardError(int):24.0 * n => 24.0 / n
AORB_290:162:double_sampleKurtosisStandardError(int):24.0 * n => 24.0 % n
AORB_291:162:double_sampleKurtosisStandardError(int):24.0 * n => 24.0 + n
AORB_292:162:double_sampleKurtosisStandardError(int):24.0 * n => 24.0 - n
AORB_293:162:double_sampleKurtosisStandardError(int):n - 1 => n * 1
AORB_294:162:double_sampleKurtosisStandardError(int):n - 1 => n / 1
AORB_295:162:double_sampleKurtosisStandardError(int):n - 1 => n % 1
AORB_296:162:double_sampleKurtosisStandardError(int):n - 1 => n + 1
AORB_297:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) => 24.0 * n / (n - 1)
AORB_298:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) => 24.0 * n % (n - 1)
AORB_299:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) => 24.0 * n + (n - 1)
AORB_300:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) => 24.0 * n - (n - 1)
AORB_301:162:double_sampleKurtosisStandardError(int):n - 1 => n * 1
AORB_302:162:double_sampleKurtosisStandardError(int):n - 1 => n / 1
AORB_303:162:double_sampleKurtosisStandardError(int):n - 1 => n % 1
AORB_304:162:double_sampleKurtosisStandardError(int):n - 1 => n + 1
AORB_305:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) => 24.0 * n * (n - 1) / (n - 1)
AORB_306:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) => 24.0 * n * (n - 1) % (n - 1)
AORB_307:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) => 24.0 * n * (n - 1) + (n - 1)
AORB_308:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) => 24.0 * n * (n - 1) - (n - 1)
AORB_309:162:double_sampleKurtosisStandardError(int):n - 3 => n * 3
AORB_310:162:double_sampleKurtosisStandardError(int):n - 3 => n / 3
AORB_311:162:double_sampleKurtosisStandardError(int):n - 3 => n % 3
AORB_312:162:double_sampleKurtosisStandardError(int):n - 3 => n + 3
AORB_313:162:double_sampleKurtosisStandardError(int):n - 2 => n * 2
AORB_314:162:double_sampleKurtosisStandardError(int):n - 2 => n / 2
AORB_315:162:double_sampleKurtosisStandardError(int):n - 2 => n % 2
AORB_316:162:double_sampleKurtosisStandardError(int):n - 2 => n + 2
AORB_317:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) => (n - 3) / (n - 2)
AORB_318:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) => (n - 3) % (n - 2)
AORB_319:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) => n - 3 + (n - 2)
AORB_320:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) => n - 3 - (n - 2)
AORB_321:162:double_sampleKurtosisStandardError(int):n + 3 => n * 3
AORB_322:162:double_sampleKurtosisStandardError(int):n + 3 => n / 3
AORB_323:162:double_sampleKurtosisStandardError(int):n + 3 => n % 3
AORB_324:162:double_sampleKurtosisStandardError(int):n + 3 => n - 3
AORB_325:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) => (n - 3) * (n - 2) / (n + 3)
AORB_326:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) => (n - 3) * (n - 2) % (n + 3)
AORB_327:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) => (n - 3) * (n - 2) + (n + 3)
AORB_328:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) => (n - 3) * (n - 2) - (n + 3)
AORB_329:162:double_sampleKurtosisStandardError(int):n + 5 => n * 5
AORB_330:162:double_sampleKurtosisStandardError(int):n + 5 => n / 5
AORB_331:162:double_sampleKurtosisStandardError(int):n + 5 => n % 5
AORB_332:162:double_sampleKurtosisStandardError(int):n + 5 => n - 5
AORB_333:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) * (n + 5) => (n - 3) * (n - 2) * (n + 3) / (n + 5)
AORB_334:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) * (n + 5) => (n - 3) * (n - 2) * (n + 3) % (n + 5)
AORB_335:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) * (n + 5) => (n - 3) * (n - 2) * (n + 3) + (n + 5)
AORB_336:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) * (n + 5) => (n - 3) * (n - 2) * (n + 3) - (n + 5)
AORB_337:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) => 24.0 * n * (n - 1) * (n - 1) * ((n - 3) * (n - 2) * (n + 3) * (n + 5))
AORB_338:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) => 24.0 * n * (n - 1) * (n - 1) % ((n - 3) * (n - 2) * (n + 3) * (n + 5))
AORB_339:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) => 24.0 * n * (n - 1) * (n - 1) + (n - 3) * (n - 2) * (n + 3) * (n + 5)
AORB_340:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) => 24.0 * n * (n - 1) * (n - 1) - (n - 3) * (n - 2) * (n + 3) * (n + 5)
AORB_341:169:double_sampleSkew(int,double,double):moment3 * n => moment3 / n
AORB_342:169:double_sampleSkew(int,double,double):moment3 * n => moment3 % n
AORB_343:169:double_sampleSkew(int,double,double):moment3 * n => moment3 + n
AORB_344:169:double_sampleSkew(int,double,double):moment3 * n => moment3 - n
AORB_345:170:double_sampleSkew(int,double,double):n * m3 => n / m3
AORB_346:170:double_sampleSkew(int,double,double):n * m3 => n % m3
AORB_347:170:double_sampleSkew(int,double,double):n * m3 => n + m3
AORB_348:170:double_sampleSkew(int,double,double):n * m3 => n - m3
AORB_349:170:double_sampleSkew(int,double,double):n - 1 => n * 1
AORB_350:170:double_sampleSkew(int,double,double):n - 1 => n / 1
AORB_351:170:double_sampleSkew(int,double,double):n - 1 => n % 1
AORB_352:170:double_sampleSkew(int,double,double):n - 1 => n + 1
AORB_353:170:double_sampleSkew(int,double,double):n - 2 => n * 2
AORB_354:170:double_sampleSkew(int,double,double):n - 2 => n / 2
AORB_355:170:double_sampleSkew(int,double,double):n - 2 => n % 2
AORB_356:170:double_sampleSkew(int,double,double):n - 2 => n + 2
AORB_357:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) => (n - 1) / (n - 2)
AORB_358:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) => (n - 1) % (n - 2)
AORB_359:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) => n - 1 + (n - 2)
AORB_360:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) => n - 1 - (n - 2)
AORB_361:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => (n - 1) * (n - 2) / s
AORB_362:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => (n - 1) * (n - 2) % s
AORB_363:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => (n - 1) * (n - 2) + s
AORB_364:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => (n - 1) * (n - 2) - s
AORB_365:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => (n - 1) * (n - 2) * s / s
AORB_366:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => (n - 1) * (n - 2) * s % s
AORB_367:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => (n - 1) * (n - 2) * s + s
AORB_368:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => (n - 1) * (n - 2) * s - s
AORB_369:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => (n - 1) * (n - 2) * s * s / s
AORB_370:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => (n - 1) * (n - 2) * s * s % s
AORB_371:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => (n - 1) * (n - 2) * s * s + s
AORB_372:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => (n - 1) * (n - 2) * s * s - s
AORB_373:170:double_sampleSkew(int,double,double):n * m3 / ((n - 1) * (n - 2) * s * s * s) => n * m3 * ((n - 1) * (n - 2) * s * s * s)
AORB_374:170:double_sampleSkew(int,double,double):n * m3 / ((n - 1) * (n - 2) * s * s * s) => n * m3 % ((n - 1) * (n - 2) * s * s * s)
AORB_375:170:double_sampleSkew(int,double,double):n * m3 / ((n - 1) * (n - 2) * s * s * s) => n * m3 + (n - 1) * (n - 2) * s * s * s
AORB_376:170:double_sampleSkew(int,double,double):n * m3 / ((n - 1) * (n - 2) * s * s * s) => n * m3 - (n - 1) * (n - 2) * s * s * s
AORB_377:178:double_sampleVariance(double,double):elements[i] - mean => elements[i] * mean
AORB_378:178:double_sampleVariance(double,double):elements[i] - mean => elements[i] / mean
AORB_379:178:double_sampleVariance(double,double):elements[i] - mean => elements[i] % mean
AORB_380:178:double_sampleVariance(double,double):elements[i] - mean => elements[i] + mean
AORB_381:179:double_sampleVariance(double,double):delta * delta => delta / delta
AORB_382:179:double_sampleVariance(double,double):delta * delta => delta % delta
AORB_383:179:double_sampleVariance(double,double):delta * delta => delta + delta
AORB_384:179:double_sampleVariance(double,double):delta * delta => delta - delta
AORB_385:181:double_sampleVariance(double,double):size - 1 => size * 1
AORB_386:181:double_sampleVariance(double,double):size - 1 => size / 1
AORB_387:181:double_sampleVariance(double,double):size - 1 => size % 1
AORB_388:181:double_sampleVariance(double,double):size - 1 => size + 1
AORB_389:181:double_sampleVariance(double,double):sum / (size - 1) => sum * (size - 1)
AORB_390:181:double_sampleVariance(double,double):sum / (size - 1) => sum % (size - 1)
AORB_391:181:double_sampleVariance(double,double):sum / (size - 1) => sum + (size - 1)
AORB_392:181:double_sampleVariance(double,double):sum / (size - 1) => sum - (size - 1)
AORB_393:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => mean * sortedElements[i]
AORB_394:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => mean / sortedElements[i]
AORB_395:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => mean % sortedElements[i]
AORB_396:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => mean + sortedElements[i]
AORB_397:198:double_trimmedMean(double,double,int,int):(mean - sortedElements[i]) / --N => (mean - sortedElements[i]) * --N
AORB_398:198:double_trimmedMean(double,double,int,int):(mean - sortedElements[i]) / --N => (mean - sortedElements[i]) % --N
AORB_399:198:double_trimmedMean(double,double,int,int):(mean - sortedElements[i]) / --N => mean - sortedElements[i] + --N
AORB_400:198:double_trimmedMean(double,double,int,int):(mean - sortedElements[i]) / --N => mean - sortedElements[i] - --N
AORB_401:201:double_trimmedMean(double,double,int,int):N0 - 1 => N0 * 1
AORB_402:201:double_trimmedMean(double,double,int,int):N0 - 1 => N0 / 1
AORB_403:201:double_trimmedMean(double,double,int,int):N0 - 1 => N0 % 1
AORB_404:201:double_trimmedMean(double,double,int,int):N0 - 1 => N0 + 1
AORB_405:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => (N0 - 1) * i
AORB_406:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => (N0 - 1) / i
AORB_407:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => (N0 - 1) % i
AORB_408:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => N0 - 1 + i
AORB_409:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => mean * sortedElements[N0 - 1 - i]
AORB_410:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => mean / sortedElements[N0 - 1 - i]
AORB_411:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => mean % sortedElements[N0 - 1 - i]
AORB_412:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => mean + sortedElements[N0 - 1 - i]
AORB_413:201:double_trimmedMean(double,double,int,int):(mean - sortedElements[N0 - 1 - i]) / --N => (mean - sortedElements[N0 - 1 - i]) * --N
AORB_414:201:double_trimmedMean(double,double,int,int):(mean - sortedElements[N0 - 1 - i]) / --N => (mean - sortedElements[N0 - 1 - i]) % --N
AORB_415:201:double_trimmedMean(double,double,int,int):(mean - sortedElements[N0 - 1 - i]) / --N => mean - sortedElements[N0 - 1 - i] + --N
AORB_416:201:double_trimmedMean(double,double,int,int):(mean - sortedElements[N0 - 1 - i]) / --N => mean - sortedElements[N0 - 1 - i] - --N
AORB_417:213:double_weightedMean(double,double):elements[i] * w => elements[i] / w
AORB_418:213:double_weightedMean(double,double):elements[i] * w => elements[i] % w
AORB_419:213:double_weightedMean(double,double):elements[i] * w => elements[i] + w
AORB_420:213:double_weightedMean(double,double):elements[i] * w => elements[i] - w
AORB_421:216:double_weightedMean(double,double):sum / weightsSum => sum * weightsSum
AORB_422:216:double_weightedMean(double,double):sum / weightsSum => sum % weightsSum
AORB_423:216:double_weightedMean(double,double):sum / weightsSum => sum + weightsSum
AORB_424:216:double_weightedMean(double,double):sum / weightsSum => sum - weightsSum
AORB_425:223:int_binarySearchFromTo(int,int,int,int):from + to => from * to
AORB_426:223:int_binarySearchFromTo(int,int,int,int):from + to => from / to
AORB_427:223:int_binarySearchFromTo(int,int,int,int):from + to => from % to
AORB_428:223:int_binarySearchFromTo(int,int,int,int):from + to => from - to
AORB_429:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => (from + to) * 2
AORB_430:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => (from + to) % 2
AORB_431:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => from + to + 2
AORB_432:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => from + to - 2
AORB_433:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => mid * 1
AORB_434:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => mid / 1
AORB_435:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => mid % 1
AORB_436:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => mid - 1
AORB_437:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => mid * 1
AORB_438:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => mid / 1
AORB_439:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => mid % 1
AORB_440:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => mid + 1
AORB_441:235:int_binarySearchFromTo(int,int,int,int):from + 1 => from * 1
AORB_442:235:int_binarySearchFromTo(int,int,int,int):from + 1 => from / 1
AORB_443:235:int_binarySearchFromTo(int,int,int,int):from + 1 => from % 1
AORB_444:235:int_binarySearchFromTo(int,int,int,int):from + 1 => from - 1
AORB_445:249:double_binomial(double,long):n - k => n * k
AORB_446:249:double_binomial(double,long):n - k => n / k
AORB_447:249:double_binomial(double,long):n - k => n % k
AORB_448:249:double_binomial(double,long):n - k => n + k
AORB_449:249:double_binomial(double,long):n - k + 1 => (n - k) * 1
AORB_450:249:double_binomial(double,long):n - k + 1 => (n - k) / 1
AORB_451:249:double_binomial(double,long):n - k + 1 => (n - k) % 1
AORB_452:249:double_binomial(double,long):n - k + 1 => n - k - 1
AORB_453:253:double_binomial(double,long):a++ / b++ => a++ * b++
AORB_454:253:double_binomial(double,long):a++ / b++ => a++ % b++
AORB_455:253:double_binomial(double,long):a++ / b++ => a++ + b++
AORB_456:253:double_binomial(double,long):a++ / b++ => a++ - b++
AORB_457:262:double_link(double):1.0 + s => 1.0 * s
AORB_458:262:double_link(double):1.0 + s => 1.0 / s
AORB_459:262:double_link(double):1.0 + s => 1.0 % s
AORB_460:262:double_link(double):1.0 + s => 1.0 - s
AORB_461:262:double_link(double):s / (1.0 + s) => s * (1.0 + s)
AORB_462:262:double_link(double):s / (1.0 + s) => s % (1.0 + s)
AORB_463:262:double_link(double):s / (1.0 + s) => s + (1.0 + s)
AORB_464:262:double_link(double):s / (1.0 + s) => s - (1.0 + s)
AORB_465:265:double_link(double):1.0 + s => 1.0 * s
AORB_466:265:double_link(double):1.0 + s => 1.0 / s
AORB_467:265:double_link(double):1.0 + s => 1.0 % s
AORB_468:265:double_link(double):1.0 + s => 1.0 - s
AORB_469:265:double_link(double):1.0 / (1.0 + s) => 1.0 * (1.0 + s)
AORB_470:265:double_link(double):1.0 / (1.0 + s) => 1.0 % (1.0 + s)
AORB_471:265:double_link(double):1.0 / (1.0 + s) => 1.0 + (1.0 + s)
AORB_472:265:double_link(double):1.0 / (1.0 + s) => 1.0 - (1.0 + s)
AORB_473:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sum * sortedElements.length
AORB_474:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sum % sortedElements.length
AORB_475:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sum + sortedElements.length
AORB_476:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sum - sortedElements.length
AORB_477:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => leftElement * sortedElements[i]
AORB_478:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => leftElement / sortedElements[i]
AORB_479:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => leftElement % sortedElements[i]
AORB_480:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => leftElement + sortedElements[i]
AORB_481:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => (leftElement - sortedElements[i]) * N
AORB_482:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => (leftElement - sortedElements[i]) % N
AORB_483:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => leftElement - sortedElements[i] + N
AORB_484:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => leftElement - sortedElements[i] - N
AORB_485:281:double_winsorizedMean(double,int,int):N - 1 => N * 1
AORB_486:281:double_winsorizedMean(double,int,int):N - 1 => N / 1
AORB_487:281:double_winsorizedMean(double,int,int):N - 1 => N % 1
AORB_488:281:double_winsorizedMean(double,int,int):N - 1 => N + 1
AORB_489:281:double_winsorizedMean(double,int,int):N - 1 - right => (N - 1) * right
AORB_490:281:double_winsorizedMean(double,int,int):N - 1 - right => (N - 1) / right
AORB_491:281:double_winsorizedMean(double,int,int):N - 1 - right => (N - 1) % right
AORB_492:281:double_winsorizedMean(double,int,int):N - 1 - right => N - 1 + right
AORB_493:283:double_winsorizedMean(double,int,int):N - 1 => N * 1
AORB_494:283:double_winsorizedMean(double,int,int):N - 1 => N / 1
AORB_495:283:double_winsorizedMean(double,int,int):N - 1 => N % 1
AORB_496:283:double_winsorizedMean(double,int,int):N - 1 => N + 1
AORB_497:283:double_winsorizedMean(double,int,int):N - 1 - i => (N - 1) * i
AORB_498:283:double_winsorizedMean(double,int,int):N - 1 - i => (N - 1) / i
AORB_499:283:double_winsorizedMean(double,int,int):N - 1 - i => (N - 1) % i
AORB_500:283:double_winsorizedMean(double,int,int):N - 1 - i => N - 1 + i
AORB_501:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => rightElement * sortedElements[N - 1 - i]
AORB_502:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => rightElement / sortedElements[N - 1 - i]
AORB_503:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => rightElement % sortedElements[N - 1 - i]
AORB_504:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => rightElement + sortedElements[N - 1 - i]
AORB_505:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => (rightElement - sortedElements[N - 1 - i]) * N
AORB_506:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => (rightElement - sortedElements[N - 1 - i]) % N
AORB_507:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => rightElement - sortedElements[N - 1 - i] + N
AORB_508:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => rightElement - sortedElements[N - 1 - i] - N
AORB_509:290:double_geometricPdf(int,double):1 - p => 1 * p
AORB_510:290:double_geometricPdf(int,double):1 - p => 1 / p
AORB_511:290:double_geometricPdf(int,double):1 - p => 1 % p
AORB_512:290:double_geometricPdf(int,double):1 - p => 1 + p
AORB_513:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => p / Math.pow( 1 - p, k )
AORB_514:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => p % Math.pow( 1 - p, k )
AORB_515:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => p + Math.pow( 1 - p, k )
AORB_516:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => p - Math.pow( 1 - p, k )
AORB_517:300:double_kurtosis(double):data[i] * data[i] => data[i] / data[i]
AORB_518:300:double_kurtosis(double):data[i] * data[i] => data[i] % data[i]
AORB_519:300:double_kurtosis(double):data[i] * data[i] => data[i] + data[i]
AORB_520:300:double_kurtosis(double):data[i] * data[i] => data[i] - data[i]
AORB_521:302:double_kurtosis(double):sum / data.length => sum * data.length
AORB_522:302:double_kurtosis(double):sum / data.length => sum % data.length
AORB_523:302:double_kurtosis(double):sum / data.length => sum + data.length
AORB_524:302:double_kurtosis(double):sum / data.length => sum - data.length
AORB_525:303:double_kurtosis(double):mean * sum => mean / sum
AORB_526:303:double_kurtosis(double):mean * sum => mean % sum
AORB_527:303:double_kurtosis(double):mean * sum => mean + sum
AORB_528:303:double_kurtosis(double):mean * sum => mean - sum
AORB_529:303:double_kurtosis(double):sumSq - mean * sum => sumSq * (mean * sum)
AORB_530:303:double_kurtosis(double):sumSq - mean * sum => sumSq / (mean * sum)
AORB_531:303:double_kurtosis(double):sumSq - mean * sum => sumSq % (mean * sum)
AORB_532:303:double_kurtosis(double):sumSq - mean * sum => sumSq + mean * sum
AORB_533:303:double_kurtosis(double):(sumSq - mean * sum) / data.length => (sumSq - mean * sum) * data.length
AORB_534:303:double_kurtosis(double):(sumSq - mean * sum) / data.length => (sumSq - mean * sum) % data.length
AORB_535:303:double_kurtosis(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum + data.length
AORB_536:303:double_kurtosis(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum - data.length
AORB_537:305:double_kurtosis(double):data[i] - mean => data[i] * mean
AORB_538:305:double_kurtosis(double):data[i] - mean => data[i] / mean
AORB_539:305:double_kurtosis(double):data[i] - mean => data[i] % mean
AORB_540:305:double_kurtosis(double):data[i] - mean => data[i] + mean
AORB_541:307:double_kurtosis(double):sumPD / data.length => sumPD * data.length
AORB_542:307:double_kurtosis(double):sumPD / data.length => sumPD % data.length
AORB_543:307:double_kurtosis(double):sumPD / data.length => sumPD + data.length
AORB_544:307:double_kurtosis(double):sumPD / data.length => sumPD - data.length
AORB_545:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation / standardDeviation
AORB_546:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation % standardDeviation
AORB_547:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation + standardDeviation
AORB_548:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation - standardDeviation
AORB_549:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation / standardDeviation
AORB_550:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation % standardDeviation
AORB_551:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation + standardDeviation
AORB_552:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation - standardDeviation
AORB_553:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation * standardDeviation / standardDeviation
AORB_554:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation * standardDeviation % standardDeviation
AORB_555:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation * standardDeviation + standardDeviation
AORB_556:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation * standardDeviation - standardDeviation
AORB_557:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => moment4 * (standardDeviation * standardDeviation * standardDeviation * standardDeviation)
AORB_558:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => moment4 % (standardDeviation * standardDeviation * standardDeviation * standardDeviation)
AORB_559:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => moment4 + standardDeviation * standardDeviation * standardDeviation * standardDeviation
AORB_560:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => moment4 - standardDeviation * standardDeviation * standardDeviation * standardDeviation
AORB_561:308:double_kurtosis(double):-3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => -3 * (moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation))
AORB_562:308:double_kurtosis(double):-3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => -3 / (moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation))
AORB_563:308:double_kurtosis(double):-3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => -3 % (moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation))
AORB_564:308:double_kurtosis(double):-3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => -3 - moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation)
AORB_565:314:double_logGamma(double):xx - 1.0 => xx * 1.0
AORB_566:314:double_logGamma(double):xx - 1.0 => xx / 1.0
AORB_567:314:double_logGamma(double):xx - 1.0 => xx % 1.0
AORB_568:314:double_logGamma(double):xx - 1.0 => xx + 1.0
AORB_569:315:double_logGamma(double):x + 5.5 => x * 5.5
AORB_570:315:double_logGamma(double):x + 5.5 => x / 5.5
AORB_571:315:double_logGamma(double):x + 5.5 => x % 5.5
AORB_572:315:double_logGamma(double):x + 5.5 => x - 5.5
AORB_573:316:double_logGamma(double):x + 0.5 => x * 0.5
AORB_574:316:double_logGamma(double):x + 0.5 => x / 0.5
AORB_575:316:double_logGamma(double):x + 0.5 => x % 0.5
AORB_576:316:double_logGamma(double):x + 0.5 => x - 0.5
AORB_577:316:double_logGamma(double):(x + 0.5) * Math.log( tmp ) => (x + 0.5) / Math.log( tmp )
AORB_578:316:double_logGamma(double):(x + 0.5) * Math.log( tmp ) => (x + 0.5) % Math.log( tmp )
AORB_579:316:double_logGamma(double):(x + 0.5) * Math.log( tmp ) => x + 0.5 + Math.log( tmp )
AORB_580:316:double_logGamma(double):(x + 0.5) * Math.log( tmp ) => x + 0.5 - Math.log( tmp )
AORB_581:321:double_logGamma(double):coeff[j] / x => coeff[j] * x
AORB_582:321:double_logGamma(double):coeff[j] / x => coeff[j] % x
AORB_583:321:double_logGamma(double):coeff[j] / x => coeff[j] + x
AORB_584:321:double_logGamma(double):coeff[j] / x => coeff[j] - x
AORB_585:323:double_logGamma(double):2.5066282746310005 * ser => 2.5066282746310005 / ser
AORB_586:323:double_logGamma(double):2.5066282746310005 * ser => 2.5066282746310005 % ser
AORB_587:323:double_logGamma(double):2.5066282746310005 * ser => 2.5066282746310005 + ser
AORB_588:323:double_logGamma(double):2.5066282746310005 * ser => 2.5066282746310005 - ser
AORB_589:323:double_logGamma(double):-tmp + Math.log( 2.5066282746310005 * ser ) => -tmp * Math.log( 2.5066282746310005 * ser )
AORB_590:323:double_logGamma(double):-tmp + Math.log( 2.5066282746310005 * ser ) => -tmp / Math.log( 2.5066282746310005 * ser )
AORB_591:323:double_logGamma(double):-tmp + Math.log( 2.5066282746310005 * ser ) => -tmp % Math.log( 2.5066282746310005 * ser )
AORB_592:323:double_logGamma(double):-tmp + Math.log( 2.5066282746310005 * ser ) => -tmp - Math.log( 2.5066282746310005 * ser )
AORB_593:332:double_pooledMean(double,double):sum1 / data1.length => sum1 * data1.length
AORB_594:332:double_pooledMean(double,double):sum1 / data1.length => sum1 % data1.length
AORB_595:332:double_pooledMean(double,double):sum1 / data1.length => sum1 + data1.length
AORB_596:332:double_pooledMean(double,double):sum1 / data1.length => sum1 - data1.length
AORB_597:337:double_pooledMean(double,double):sum2 / data2.length => sum2 * data2.length
AORB_598:337:double_pooledMean(double,double):sum2 / data2.length => sum2 % data2.length
AORB_599:337:double_pooledMean(double,double):sum2 / data2.length => sum2 + data2.length
AORB_600:337:double_pooledMean(double,double):sum2 / data2.length => sum2 - data2.length
AORB_601:338:double_pooledMean(double,double):data1.length * mean1 => data1.length / mean1
AORB_602:338:double_pooledMean(double,double):data1.length * mean1 => data1.length % mean1
AORB_603:338:double_pooledMean(double,double):data1.length * mean1 => data1.length + mean1
AORB_604:338:double_pooledMean(double,double):data1.length * mean1 => data1.length - mean1
AORB_605:338:double_pooledMean(double,double):data2.length * mean2 => data2.length / mean2
AORB_606:338:double_pooledMean(double,double):data2.length * mean2 => data2.length % mean2
AORB_607:338:double_pooledMean(double,double):data2.length * mean2 => data2.length + mean2
AORB_608:338:double_pooledMean(double,double):data2.length * mean2 => data2.length - mean2
AORB_609:338:double_pooledMean(double,double):data1.length * mean1 + data2.length * mean2 => data1.length * mean1 * (data2.length * mean2)
AORB_610:338:double_pooledMean(double,double):data1.length * mean1 + data2.length * mean2 => data1.length * mean1 / (data2.length * mean2)
AORB_611:338:double_pooledMean(double,double):data1.length * mean1 + data2.length * mean2 => data1.length * mean1 % (data2.length * mean2)
AORB_612:338:double_pooledMean(double,double):data1.length * mean1 + data2.length * mean2 => data1.length * mean1 - data2.length * mean2
AORB_613:338:double_pooledMean(double,double):data1.length + data2.length => data1.length * data2.length
AORB_614:338:double_pooledMean(double,double):data1.length + data2.length => data1.length / data2.length
AORB_615:338:double_pooledMean(double,double):data1.length + data2.length => data1.length % data2.length
AORB_616:338:double_pooledMean(double,double):data1.length + data2.length => data1.length - data2.length
AORB_617:338:double_pooledMean(double,double):(data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length) => (data1.length * mean1 + data2.length * mean2) * (data1.length + data2.length)
AORB_618:338:double_pooledMean(double,double):(data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length) => (data1.length * mean1 + data2.length * mean2) % (data1.length + data2.length)
AORB_619:338:double_pooledMean(double,double):(data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length) => data1.length * mean1 + data2.length * mean2 + (data1.length + data2.length)
AORB_620:338:double_pooledMean(double,double):(data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length) => data1.length * mean1 + data2.length * mean2 - (data1.length + data2.length)
AORB_621:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i] / data1[i]
AORB_622:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i] % data1[i]
AORB_623:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i] + data1[i]
AORB_624:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i] - data1[i]
AORB_625:349:double_pooledVariance(double,double):sum1 / data1.length => sum1 * data1.length
AORB_626:349:double_pooledVariance(double,double):sum1 / data1.length => sum1 % data1.length
AORB_627:349:double_pooledVariance(double,double):sum1 / data1.length => sum1 + data1.length
AORB_628:349:double_pooledVariance(double,double):sum1 / data1.length => sum1 - data1.length
AORB_629:350:double_pooledVariance(double,double):mean1 * sum1 => mean1 / sum1
AORB_630:350:double_pooledVariance(double,double):mean1 * sum1 => mean1 % sum1
AORB_631:350:double_pooledVariance(double,double):mean1 * sum1 => mean1 + sum1
AORB_632:350:double_pooledVariance(double,double):mean1 * sum1 => mean1 - sum1
AORB_633:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => sumSq1 * (mean1 * sum1)
AORB_634:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => sumSq1 / (mean1 * sum1)
AORB_635:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => sumSq1 % (mean1 * sum1)
AORB_636:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => sumSq1 + mean1 * sum1
AORB_637:350:double_pooledVariance(double,double):(sumSq1 - mean1 * sum1) / data1.length => (sumSq1 - mean1 * sum1) * data1.length
AORB_638:350:double_pooledVariance(double,double):(sumSq1 - mean1 * sum1) / data1.length => (sumSq1 - mean1 * sum1) % data1.length
AORB_639:350:double_pooledVariance(double,double):(sumSq1 - mean1 * sum1) / data1.length => sumSq1 - mean1 * sum1 + data1.length
AORB_640:350:double_pooledVariance(double,double):(sumSq1 - mean1 * sum1) / data1.length => sumSq1 - mean1 * sum1 - data1.length
AORB_641:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i] / data2[i]
AORB_642:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i] % data2[i]
AORB_643:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i] + data2[i]
AORB_644:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i] - data2[i]
AORB_645:357:double_pooledVariance(double,double):sum2 / data2.length => sum2 * data2.length
AORB_646:357:double_pooledVariance(double,double):sum2 / data2.length => sum2 % data2.length
AORB_647:357:double_pooledVariance(double,double):sum2 / data2.length => sum2 + data2.length
AORB_648:357:double_pooledVariance(double,double):sum2 / data2.length => sum2 - data2.length
AORB_649:358:double_pooledVariance(double,double):mean2 * sum2 => mean2 / sum2
AORB_650:358:double_pooledVariance(double,double):mean2 * sum2 => mean2 % sum2
AORB_651:358:double_pooledVariance(double,double):mean2 * sum2 => mean2 + sum2
AORB_652:358:double_pooledVariance(double,double):mean2 * sum2 => mean2 - sum2
AORB_653:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => sumSq2 * (mean2 * sum2)
AORB_654:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => sumSq2 / (mean2 * sum2)
AORB_655:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => sumSq2 % (mean2 * sum2)
AORB_656:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => sumSq2 + mean2 * sum2
AORB_657:358:double_pooledVariance(double,double):(sumSq2 - mean2 * sum2) / data2.length => (sumSq2 - mean2 * sum2) * data2.length
AORB_658:358:double_pooledVariance(double,double):(sumSq2 - mean2 * sum2) / data2.length => (sumSq2 - mean2 * sum2) % data2.length
AORB_659:358:double_pooledVariance(double,double):(sumSq2 - mean2 * sum2) / data2.length => sumSq2 - mean2 * sum2 + data2.length
AORB_660:358:double_pooledVariance(double,double):(sumSq2 - mean2 * sum2) / data2.length => sumSq2 - mean2 * sum2 - data2.length
AORB_661:359:double_pooledVariance(double,double):data1.length * var1 => data1.length / var1
AORB_662:359:double_pooledVariance(double,double):data1.length * var1 => data1.length % var1
AORB_663:359:double_pooledVariance(double,double):data1.length * var1 => data1.length + var1
AORB_664:359:double_pooledVariance(double,double):data1.length * var1 => data1.length - var1
AORB_665:359:double_pooledVariance(double,double):data2.length * var2 => data2.length / var2
AORB_666:359:double_pooledVariance(double,double):data2.length * var2 => data2.length % var2
AORB_667:359:double_pooledVariance(double,double):data2.length * var2 => data2.length + var2
AORB_668:359:double_pooledVariance(double,double):data2.length * var2 => data2.length - var2
AORB_669:359:double_pooledVariance(double,double):data1.length * var1 + data2.length * var2 => data1.length * var1 * (data2.length * var2)
AORB_670:359:double_pooledVariance(double,double):data1.length * var1 + data2.length * var2 => data1.length * var1 / (data2.length * var2)
AORB_671:359:double_pooledVariance(double,double):data1.length * var1 + data2.length * var2 => data1.length * var1 % (data2.length * var2)
AORB_672:359:double_pooledVariance(double,double):data1.length * var1 + data2.length * var2 => data1.length * var1 - data2.length * var2
AORB_673:359:double_pooledVariance(double,double):data1.length + data2.length => data1.length * data2.length
AORB_674:359:double_pooledVariance(double,double):data1.length + data2.length => data1.length / data2.length
AORB_675:359:double_pooledVariance(double,double):data1.length + data2.length => data1.length % data2.length
AORB_676:359:double_pooledVariance(double,double):data1.length + data2.length => data1.length - data2.length
AORB_677:359:double_pooledVariance(double,double):(data1.length * var1 + data2.length * var2) / (data1.length + data2.length) => (data1.length * var1 + data2.length * var2) * (data1.length + data2.length)
AORB_678:359:double_pooledVariance(double,double):(data1.length * var1 + data2.length * var2) / (data1.length + data2.length) => (data1.length * var1 + data2.length * var2) % (data1.length + data2.length)
AORB_679:359:double_pooledVariance(double,double):(data1.length * var1 + data2.length * var2) / (data1.length + data2.length) => data1.length * var1 + data2.length * var2 + (data1.length + data2.length)
AORB_680:359:double_pooledVariance(double,double):(data1.length * var1 + data2.length * var2) / (data1.length + data2.length) => data1.length * var1 + data2.length * var2 - (data1.length + data2.length)
AORB_681:368:double_polevl(double,double,int):ans * x => ans / x
AORB_682:368:double_polevl(double,double,int):ans * x => ans % x
AORB_683:368:double_polevl(double,double,int):ans * x => ans + x
AORB_684:368:double_polevl(double,double,int):ans * x => ans - x
AORB_685:368:double_polevl(double,double,int):ans * x + coef[i] => ans * x * coef[i]
AORB_686:368:double_polevl(double,double,int):ans * x + coef[i] => ans * x / coef[i]
AORB_687:368:double_polevl(double,double,int):ans * x + coef[i] => ans * x % coef[i]
AORB_688:368:double_polevl(double,double,int):ans * x + coef[i] => ans * x - coef[i]
AORB_689:376:double_rankInterpolated(double,double,int):index + 1 => index * 1
AORB_690:376:double_rankInterpolated(double,double,int):index + 1 => index / 1
AORB_691:376:double_rankInterpolated(double,double,int):index + 1 => index % 1
AORB_692:376:double_rankInterpolated(double,double,int):index + 1 => index - 1
AORB_693:383:double_rankInterpolated(double,double,int):-index - 1 => -index * 1
AORB_694:383:double_rankInterpolated(double,double,int):-index - 1 => -index / 1
AORB_695:383:double_rankInterpolated(double,double,int):-index - 1 => -index % 1
AORB_696:383:double_rankInterpolated(double,double,int):-index - 1 => -index + 1
AORB_697:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => insertionPoint * 1
AORB_698:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => insertionPoint / 1
AORB_699:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => insertionPoint % 1
AORB_700:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => insertionPoint + 1
AORB_701:389:double_rankInterpolated(double,double,int):element - from => element * from
AORB_702:389:double_rankInterpolated(double,double,int):element - from => element / from
AORB_703:389:double_rankInterpolated(double,double,int):element - from => element % from
AORB_704:389:double_rankInterpolated(double,double,int):element - from => element + from
AORB_705:389:double_rankInterpolated(double,double,int):to - from => to * from
AORB_706:389:double_rankInterpolated(double,double,int):to - from => to / from
AORB_707:389:double_rankInterpolated(double,double,int):to - from => to % from
AORB_708:389:double_rankInterpolated(double,double,int):to - from => to + from
AORB_709:389:double_rankInterpolated(double,double,int):(element - from) / (to - from) => (element - from) * (to - from)
AORB_710:389:double_rankInterpolated(double,double,int):(element - from) / (to - from) => (element - from) % (to - from)
AORB_711:389:double_rankInterpolated(double,double,int):(element - from) / (to - from) => element - from + (to - from)
AORB_712:389:double_rankInterpolated(double,double,int):(element - from) / (to - from) => element - from - (to - from)
AORB_713:390:double_rankInterpolated(double,double,int):insertionPoint + delta => insertionPoint * delta
AORB_714:390:double_rankInterpolated(double,double,int):insertionPoint + delta => insertionPoint / delta
AORB_715:390:double_rankInterpolated(double,double,int):insertionPoint + delta => insertionPoint % delta
AORB_716:390:double_rankInterpolated(double,double,int):insertionPoint + delta => insertionPoint - delta
AORB_717:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => data[i] / weights[i]
AORB_718:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => data[i] % weights[i]
AORB_719:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => data[i] + weights[i]
AORB_720:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => data[i] - weights[i]
AORB_721:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i] / data[i]
AORB_722:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i] % data[i]
AORB_723:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i] + data[i]
AORB_724:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i] - data[i]
AORB_725:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] / weights[i]
AORB_726:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] % weights[i]
AORB_727:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] + weights[i]
AORB_728:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] - weights[i]
AORB_729:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts / sumOfProducts
AORB_730:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts % sumOfProducts
AORB_731:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts + sumOfProducts
AORB_732:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts - sumOfProducts
AORB_733:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts * sumOfWeights
AORB_734:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts % sumOfWeights
AORB_735:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts + sumOfWeights
AORB_736:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts - sumOfWeights
AORB_737:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfSquaredProducts * (sumOfProducts * sumOfProducts / sumOfWeights)
AORB_738:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfSquaredProducts / (sumOfProducts * sumOfProducts / sumOfWeights)
AORB_739:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfSquaredProducts % (sumOfProducts * sumOfProducts / sumOfWeights)
AORB_740:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfSquaredProducts + sumOfProducts * sumOfProducts / sumOfWeights
AORB_741:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => sumOfWeights * 1
AORB_742:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => sumOfWeights / 1
AORB_743:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => sumOfWeights % 1
AORB_744:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => sumOfWeights + 1
AORB_745:403:double_sampleWeightedVariance(double,double):(sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1) => (sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) * (sumOfWeights - 1)
AORB_746:403:double_sampleWeightedVariance(double,double):(sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1) => (sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) % (sumOfWeights - 1)
AORB_747:403:double_sampleWeightedVariance(double,double):(sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1) => sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights + (sumOfWeights - 1)
AORB_748:403:double_sampleWeightedVariance(double,double):(sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1) => sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights - (sumOfWeights - 1)
AORB_749:413:double_skew(double):data[i] * data[i] => data[i] / data[i]
AORB_750:413:double_skew(double):data[i] * data[i] => data[i] % data[i]
AORB_751:413:double_skew(double):data[i] * data[i] => data[i] + data[i]
AORB_752:413:double_skew(double):data[i] * data[i] => data[i] - data[i]
AORB_753:415:double_skew(double):sum / data.length => sum * data.length
AORB_754:415:double_skew(double):sum / data.length => sum % data.length
AORB_755:415:double_skew(double):sum / data.length => sum + data.length
AORB_756:415:double_skew(double):sum / data.length => sum - data.length
AORB_757:416:double_skew(double):mean * sum => mean / sum
AORB_758:416:double_skew(double):mean * sum => mean % sum
AORB_759:416:double_skew(double):mean * sum => mean + sum
AORB_760:416:double_skew(double):mean * sum => mean - sum
AORB_761:416:double_skew(double):sumSq - mean * sum => sumSq * (mean * sum)
AORB_762:416:double_skew(double):sumSq - mean * sum => sumSq / (mean * sum)
AORB_763:416:double_skew(double):sumSq - mean * sum => sumSq % (mean * sum)
AORB_764:416:double_skew(double):sumSq - mean * sum => sumSq + mean * sum
AORB_765:416:double_skew(double):(sumSq - mean * sum) / data.length => (sumSq - mean * sum) * data.length
AORB_766:416:double_skew(double):(sumSq - mean * sum) / data.length => (sumSq - mean * sum) % data.length
AORB_767:416:double_skew(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum + data.length
AORB_768:416:double_skew(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum - data.length
AORB_769:418:double_skew(double):data[i] - mean => data[i] * mean
AORB_770:418:double_skew(double):data[i] - mean => data[i] / mean
AORB_771:418:double_skew(double):data[i] - mean => data[i] % mean
AORB_772:418:double_skew(double):data[i] - mean => data[i] + mean
AORB_773:420:double_skew(double):sumPD / data.length => sumPD * data.length
AORB_774:420:double_skew(double):sumPD / data.length => sumPD % data.length
AORB_775:420:double_skew(double):sumPD / data.length => sumPD + data.length
AORB_776:420:double_skew(double):sumPD / data.length => sumPD - data.length
AORB_777:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation / standardDeviation
AORB_778:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation % standardDeviation
AORB_779:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation + standardDeviation
AORB_780:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation - standardDeviation
AORB_781:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation / standardDeviation
AORB_782:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation % standardDeviation
AORB_783:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation + standardDeviation
AORB_784:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation - standardDeviation
AORB_785:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => moment3 * (standardDeviation * standardDeviation * standardDeviation)
AORB_786:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => moment3 % (standardDeviation * standardDeviation * standardDeviation)
AORB_787:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => moment3 + standardDeviation * standardDeviation * standardDeviation
AORB_788:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => moment3 - standardDeviation * standardDeviation * standardDeviation
AORB_789:430:double_standardize(double):data[i] * data[i] => data[i] / data[i]
AORB_790:430:double_standardize(double):data[i] * data[i] => data[i] % data[i]
AORB_791:430:double_standardize(double):data[i] * data[i] => data[i] + data[i]
AORB_792:430:double_standardize(double):data[i] * data[i] => data[i] - data[i]
AORB_793:432:double_standardize(double):sum / data.length => sum * data.length
AORB_794:432:double_standardize(double):sum / data.length => sum % data.length
AORB_795:432:double_standardize(double):sum / data.length => sum + data.length
AORB_796:432:double_standardize(double):sum / data.length => sum - data.length
AORB_797:433:double_standardize(double):mean * sum => mean / sum
AORB_798:433:double_standardize(double):mean * sum => mean % sum
AORB_799:433:double_standardize(double):mean * sum => mean + sum
AORB_800:433:double_standardize(double):mean * sum => mean - sum
AORB_801:433:double_standardize(double):sumSq - mean * sum => sumSq * (mean * sum)
AORB_802:433:double_standardize(double):sumSq - mean * sum => sumSq / (mean * sum)
AORB_803:433:double_standardize(double):sumSq - mean * sum => sumSq % (mean * sum)
AORB_804:433:double_standardize(double):sumSq - mean * sum => sumSq + mean * sum
AORB_805:433:double_standardize(double):(sumSq - mean * sum) / data.length => (sumSq - mean * sum) * data.length
AORB_806:433:double_standardize(double):(sumSq - mean * sum) / data.length => (sumSq - mean * sum) % data.length
AORB_807:433:double_standardize(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum + data.length
AORB_808:433:double_standardize(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum - data.length
AORB_809:435:double_standardize(double):data[i] - mean => data[i] * mean
AORB_810:435:double_standardize(double):data[i] - mean => data[i] / mean
AORB_811:435:double_standardize(double):data[i] - mean => data[i] % mean
AORB_812:435:double_standardize(double):data[i] - mean => data[i] + mean
AORB_813:435:double_standardize(double):(data[i] - mean) / sd => (data[i] - mean) * sd
AORB_814:435:double_standardize(double):(data[i] - mean) / sd => (data[i] - mean) % sd
AORB_815:435:double_standardize(double):(data[i] - mean) / sd => data[i] - mean + sd
AORB_816:435:double_standardize(double):(data[i] - mean) / sd => data[i] - mean - sd
AORB_817:445:double_weightedRMS(double,double):data[i] * weights[i] => data[i] / weights[i]
AORB_818:445:double_weightedRMS(double,double):data[i] * weights[i] => data[i] % weights[i]
AORB_819:445:double_weightedRMS(double,double):data[i] * weights[i] => data[i] + weights[i]
AORB_820:445:double_weightedRMS(double,double):data[i] * weights[i] => data[i] - weights[i]
AORB_821:446:double_weightedRMS(double,double):data[i] * data[i] => data[i] / data[i]
AORB_822:446:double_weightedRMS(double,double):data[i] * data[i] => data[i] % data[i]
AORB_823:446:double_weightedRMS(double,double):data[i] * data[i] => data[i] + data[i]
AORB_824:446:double_weightedRMS(double,double):data[i] * data[i] => data[i] - data[i]
AORB_825:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] / weights[i]
AORB_826:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] % weights[i]
AORB_827:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] + weights[i]
AORB_828:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => data[i] * data[i] - weights[i]
AORB_829:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfProducts * sumOfSquaredProducts
AORB_830:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfProducts % sumOfSquaredProducts
AORB_831:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfProducts + sumOfSquaredProducts
AORB_832:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfProducts - sumOfSquaredProducts
AORB_833:455:double_harmonicMean(double):1 / data[i] => 1 * data[i]
AORB_834:455:double_harmonicMean(double):1 / data[i] => 1 % data[i]
AORB_835:455:double_harmonicMean(double):1 / data[i] => 1 + data[i]
AORB_836:455:double_harmonicMean(double):1 / data[i] => 1 - data[i]
AORB_837:457:double_harmonicMean(double):data.length / sumOfInversions => data.length * sumOfInversions
AORB_838:457:double_harmonicMean(double):data.length / sumOfInversions => data.length % sumOfInversions
AORB_839:457:double_harmonicMean(double):data.length / sumOfInversions => data.length + sumOfInversions
AORB_840:457:double_harmonicMean(double):data.length / sumOfInversions => data.length - sumOfInversions
AORB_841:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => data[i] * c
AORB_842:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => data[i] / c
AORB_843:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => data[i] % c
AORB_844:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => data[i] + c
AORB_845:480:double_square(double):data[i] * data[i] => data[i] / data[i]
AORB_846:480:double_square(double):data[i] * data[i] => data[i] % data[i]
AORB_847:480:double_square(double):data[i] * data[i] => data[i] + data[i]
AORB_848:480:double_square(double):data[i] * data[i] => data[i] - data[i]
AORS_1:20:double_autoCorrelation(double,int,double,double):++i => i--
AORS_2:52:double_covariance(double,double):++i => i--
AORS_3:66:double_durbinWatson(double):++i => i--
AORS_4:79:double_lag1(double,double):i++ => i--
AORS_5:93:double_max(double):--i => i--
AORS_6:93:double_max(double):--i => i++
AORS_7:93:double_max(double):--i => ++i
AORS_8:105:double_meanDeviation(double,double):--i => i--
AORS_9:105:double_meanDeviation(double,double):--i => i++
AORS_10:105:double_meanDeviation(double,double):--i => ++i
AORS_11:115:double_min(double):--i => i--
AORS_12:115:double_min(double):--i => i++
AORS_13:115:double_min(double):--i => ++i
AORS_14:127:double_product(double):--i => i--
AORS_15:127:double_product(double):--i => i++
AORS_16:127:double_product(double):--i => ++i
AORS_17:177:double_sampleVariance(double,double):--i => i--
AORS_18:177:double_sampleVariance(double,double):--i => i++
AORS_19:177:double_sampleVariance(double,double):--i => ++i
AORS_20:187:double_sumOfLogarithms(double):i++ => i--
AORS_21:197:double_trimmedMean(double,double,int,int):++i => i--
AORS_22:198:double_trimmedMean(double,double,int,int):--N => N++
AORS_23:200:double_trimmedMean(double,double,int,int):++i => i--
AORS_24:201:double_trimmedMean(double,double,int,int):--N => N++
AORS_25:211:double_weightedMean(double,double):--i => i--
AORS_26:211:double_weightedMean(double,double):--i => i++
AORS_27:211:double_weightedMean(double,double):--i => ++i
AORS_28:252:double_binomial(double,long):i-- => i++
AORS_29:252:double_binomial(double,long):i-- => --i
AORS_30:252:double_binomial(double,long):i-- => ++i
AORS_31:253:double_binomial(double,long):a++ => a--
AORS_32:253:double_binomial(double,long):a++ => --a
AORS_33:253:double_binomial(double,long):a++ => ++a
AORS_34:253:double_binomial(double,long):b++ => b--
AORS_35:253:double_binomial(double,long):b++ => --b
AORS_36:253:double_binomial(double,long):b++ => ++b
AORS_37:273:double_winsorizedMean(double,int,int):i++ => i--
AORS_38:278:double_winsorizedMean(double,int,int):++i => i--
AORS_39:282:double_winsorizedMean(double,int,int):++i => i--
AORS_40:298:double_kurtosis(double):i++ => i--
AORS_41:304:double_kurtosis(double):i++ => i--
AORS_42:319:double_logGamma(double):j++ => j--
AORS_43:320:double_logGamma(double):x++ => x--
AORS_44:329:double_pooledMean(double,double):i++ => i--
AORS_45:334:double_pooledMean(double,double):i++ => i--
AORS_46:345:double_pooledVariance(double,double):i++ => i--
AORS_47:353:double_pooledVariance(double,double):i++ => i--
AORS_48:367:double_polevl(double,double,int):i++ => i--
AORS_49:379:double_rankInterpolated(double,double,int):to++ => to--
AORS_50:398:double_sampleWeightedVariance(double,double):i++ => i--
AORS_51:411:double_skew(double):i++ => i--
AORS_52:417:double_skew(double):i++ => i--
AORS_53:428:double_standardize(double):i++ => i--
AORS_54:434:double_standardize(double):i++ => i--
AORS_55:444:double_weightedRMS(double,double):i++ => i--
AORS_56:454:double_harmonicMean(double):i++ => i--
AORS_57:463:double_sumOfPowerOfDeviations(double,int,double):i++ => i--
AORS_58:471:double_power(double,int):i++ => i--
AORS_59:479:double_square(double):i++ => i--
AODU_1:43:int_binarySearchFromTo(double,double,int,int):-(low + 1) => low + 1
AODU_2:235:int_binarySearchFromTo(int,int,int,int):-(from + 1) => from + 1
AODU_3:264:double_link(double):-r => r
AODU_4:308:double_kurtosis(double):-3 => 3
AODU_5:313:double_logGamma(double):-86.50532032941677 => 86.50532032941677
AODU_6:313:double_logGamma(double):-1.231739572450155 => 1.231739572450155
AODU_7:313:double_logGamma(double):-0.5395239384953e-5 => 0.5395239384953e-5
AODU_8:323:double_logGamma(double):-tmp => tmp
AODU_9:383:double_rankInterpolated(double,double,int):-index => index
AODS_1:198:double_trimmedMean(double,double,int,int):--N => N
AODS_2:201:double_trimmedMean(double,double,int,int):--N => N
AODS_3:253:double_binomial(double,long):a++ => a
AODS_4:253:double_binomial(double,long):b++ => b
AODS_5:320:double_logGamma(double):x++ => x
AODS_6:379:double_rankInterpolated(double,double,int):to++ => to
AOIU_1:18:double_autoCorrelation(double,int,double,double):data.length => -data.length
AOIU_2:21:double_autoCorrelation(double,int,double,double):i => -i
AOIU_3:21:double_autoCorrelation(double,int,double,double):i => -i
AOIU_4:23:double_autoCorrelation(double,int,double,double):run => -run
AOIU_5:23:double_autoCorrelation(double,int,double,double):N => -N
AOIU_6:23:double_autoCorrelation(double,int,double,double):variance => -variance
AOIU_7:28:int_binarySearchFromTo(double,double,int,int):from => -from
AOIU_8:29:int_binarySearchFromTo(double,double,int,int):to => -to
AOIU_9:31:int_binarySearchFromTo(double,double,int,int):low => -low
AOIU_10:32:int_binarySearchFromTo(double,double,int,int):mid => -mid
AOIU_11:34:int_binarySearchFromTo(double,double,int,int):mid => -mid
AOIU_12:37:int_binarySearchFromTo(double,double,int,int):mid => -mid
AOIU_13:39:int_binarySearchFromTo(double,double,int,int):mid => -mid
AOIU_14:48:double_covariance(double,double):elements1.length => -elements1.length
AOIU_15:53:double_covariance(double,double):i => -i
AOIU_16:54:double_covariance(double,double):i => -i
AOIU_17:55:double_covariance(double,double):x => -x
AOIU_18:56:double_covariance(double,double):x => -x
AOIU_19:56:double_covariance(double,double):y => -y
AOIU_20:57:double_covariance(double,double):y => -y
AOIU_21:59:double_covariance(double,double):Sxy => -Sxy
AOIU_22:59:double_covariance(double,double):size => -size
AOIU_23:64:double_durbinWatson(double):elements.length => -elements.length
AOIU_24:67:double_durbinWatson(double):i => -i
AOIU_25:68:double_durbinWatson(double):x => -x
AOIU_26:70:double_durbinWatson(double):run => -run
AOIU_27:75:double_lag1(double,double):elements.length => -elements.length
AOIU_28:80:double_lag1(double,double):i => -i
AOIU_29:81:double_lag1(double,double):i => -i
AOIU_30:82:double_lag1(double,double):delta0 => -delta0
AOIU_31:82:double_lag1(double,double):i => -i
AOIU_32:83:double_lag1(double,double):delta1 => -delta1
AOIU_33:83:double_lag1(double,double):i => -i
AOIU_34:85:double_lag1(double,double):q => -q
AOIU_35:86:double_lag1(double,double):r1 => -r1
AOIU_36:91:double_max(double):elements.length => -elements.length
AOIU_37:92:double_max(double):size => -size
AOIU_38:95:double_max(double):i => -i
AOIU_39:98:double_max(double):max => -max
AOIU_40:103:double_meanDeviation(double,double):elements.length => -elements.length
AOIU_41:106:double_meanDeviation(double,double):i => -i
AOIU_42:108:double_meanDeviation(double,double):sum => -sum
AOIU_43:113:double_min(double):elements.length => -elements.length
AOIU_44:114:double_min(double):size => -size
AOIU_45:117:double_min(double):i => -i
AOIU_46:120:double_min(double):min => -min
AOIU_47:125:double_product(double):elements.length => -elements.length
AOIU_48:128:double_product(double):i => -i
AOIU_49:130:double_product(double):product => -product
AOIU_50:135:double_quantile(double,double):sortedElements.length => -sortedElements.length
AOIU_51:136:double_quantile(double,double):phi => -phi
AOIU_52:136:double_quantile(double,double):n => -n
AOIU_53:137:double_quantile(double,double):index => -index
AOIU_54:138:double_quantile(double,double):index => -index
AOIU_55:144:double_quantile(double,double):lhs => -lhs
AOIU_56:146:double_quantile(double,double):lhs => -lhs
AOIU_57:148:double_quantile(double,double):result => -result
AOIU_58:153:double_sampleKurtosis(int,double,double):size => -size
AOIU_59:154:double_sampleKurtosis(int,double,double):sampleVariance => -sampleVariance
AOIU_60:155:double_sampleKurtosis(int,double,double):moment4 => -moment4
AOIU_61:156:double_sampleKurtosis(int,double,double):m4 => -m4
AOIU_62:156:double_sampleKurtosis(int,double,double):n => -n
AOIU_63:156:double_sampleKurtosis(int,double,double):n => -n
AOIU_64:156:double_sampleKurtosis(int,double,double):n => -n
AOIU_65:156:double_sampleKurtosis(int,double,double):n => -n
AOIU_66:156:double_sampleKurtosis(int,double,double):s2 => -s2
AOIU_67:156:double_sampleKurtosis(int,double,double):s2 => -s2
AOIU_68:161:double_sampleKurtosisStandardError(int):size => -size
AOIU_69:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_70:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_71:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_72:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_73:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_74:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_75:162:double_sampleKurtosisStandardError(int):n => -n
AOIU_76:167:double_sampleSkew(int,double,double):size => -size
AOIU_77:168:double_sampleSkew(int,double,double):sampleVariance => -sampleVariance
AOIU_78:169:double_sampleSkew(int,double,double):moment3 => -moment3
AOIU_79:170:double_sampleSkew(int,double,double):n => -n
AOIU_80:170:double_sampleSkew(int,double,double):n => -n
AOIU_81:170:double_sampleSkew(int,double,double):n => -n
AOIU_82:170:double_sampleSkew(int,double,double):s => -s
AOIU_83:170:double_sampleSkew(int,double,double):s => -s
AOIU_84:170:double_sampleSkew(int,double,double):s => -s
AOIU_85:175:double_sampleVariance(double,double):elements.length => -elements.length
AOIU_86:178:double_sampleVariance(double,double):i => -i
AOIU_87:179:double_sampleVariance(double,double):delta => -delta
AOIU_88:181:double_sampleVariance(double,double):sum => -sum
AOIU_89:181:double_sampleVariance(double,double):size => -size
AOIU_90:188:double_sumOfLogarithms(double):i => -i
AOIU_91:190:double_sumOfLogarithms(double):logsum => -logsum
AOIU_92:195:double_trimmedMean(double,double,int,int):sortedElements.length => -sortedElements.length
AOIU_93:196:double_trimmedMean(double,double,int,int):N => -N
AOIU_94:198:double_trimmedMean(double,double,int,int):mean => -mean
AOIU_95:201:double_trimmedMean(double,double,int,int):mean => -mean
AOIU_96:203:double_trimmedMean(double,double,int,int):mean => -mean
AOIU_97:208:double_weightedMean(double,double):elements.length => -elements.length
AOIU_98:212:double_weightedMean(double,double):i => -i
AOIU_99:213:double_weightedMean(double,double):i => -i
AOIU_100:213:double_weightedMean(double,double):w => -w
AOIU_101:214:double_weightedMean(double,double):w => -w
AOIU_102:216:double_weightedMean(double,double):sum => -sum
AOIU_103:223:int_binarySearchFromTo(int,int,int,int):from => -from
AOIU_104:224:int_binarySearchFromTo(int,int,int,int):mid => -mid
AOIU_105:226:int_binarySearchFromTo(int,int,int,int):mid => -mid
AOIU_106:229:int_binarySearchFromTo(int,int,int,int):mid => -mid
AOIU_107:231:int_binarySearchFromTo(int,int,int,int):mid => -mid
AOIU_108:247:double_binomial(double,long):n => -n
AOIU_109:249:double_binomial(double,long):n => -n
AOIU_110:255:double_binomial(double,long):binomial => -binomial
AOIU_111:261:double_link(double):r => -r
AOIU_112:262:double_link(double):s => -s
AOIU_113:271:double_winsorizedMean(double,int,int):sortedElements.length => -sortedElements.length
AOIU_114:274:double_winsorizedMean(double,int,int):i => -i
AOIU_115:276:double_winsorizedMean(double,int,int):sum => -sum
AOIU_116:277:double_winsorizedMean(double,int,int):left => -left
AOIU_117:279:double_winsorizedMean(double,int,int):leftElement => -leftElement
AOIU_118:279:double_winsorizedMean(double,int,int):N => -N
AOIU_119:281:double_winsorizedMean(double,int,int):N => -N
AOIU_120:283:double_winsorizedMean(double,int,int):rightElement => -rightElement
AOIU_121:283:double_winsorizedMean(double,int,int):N => -N
AOIU_122:285:double_winsorizedMean(double,int,int):mean => -mean
AOIU_123:290:double_geometricPdf(int,double):p => -p
AOIU_124:290:double_geometricPdf(int,double):k => -k
AOIU_125:299:double_kurtosis(double):i => -i
AOIU_126:300:double_kurtosis(double):i => -i
AOIU_127:300:double_kurtosis(double):i => -i
AOIU_128:302:double_kurtosis(double):sum => -sum
AOIU_129:303:double_kurtosis(double):sumSq => -sumSq
AOIU_130:303:double_kurtosis(double):data.length => -data.length
AOIU_131:305:double_kurtosis(double):i => -i
AOIU_132:307:double_kurtosis(double):sumPD => -sumPD
AOIU_133:314:double_logGamma(double):xx => -xx
AOIU_134:315:double_logGamma(double):x => -x
AOIU_135:316:double_logGamma(double):x => -x
AOIU_136:316:double_logGamma(double):tmp => -tmp
AOIU_137:321:double_logGamma(double):j => -j
AOIU_138:321:double_logGamma(double):x => -x
AOIU_139:330:double_pooledMean(double,double):i => -i
AOIU_140:332:double_pooledMean(double,double):sum1 => -sum1
AOIU_141:335:double_pooledMean(double,double):i => -i
AOIU_142:337:double_pooledMean(double,double):sum2 => -sum2
AOIU_143:338:double_pooledMean(double,double):data1.length => -data1.length
AOIU_144:338:double_pooledMean(double,double):data1.length => -data1.length
AOIU_145:346:double_pooledVariance(double,double):i => -i
AOIU_146:347:double_pooledVariance(double,double):i => -i
AOIU_147:347:double_pooledVariance(double,double):i => -i
AOIU_148:349:double_pooledVariance(double,double):sum1 => -sum1
AOIU_149:350:double_pooledVariance(double,double):sumSq1 => -sumSq1
AOIU_150:350:double_pooledVariance(double,double):data1.length => -data1.length
AOIU_151:354:double_pooledVariance(double,double):i => -i
AOIU_152:355:double_pooledVariance(double,double):i => -i
AOIU_153:355:double_pooledVariance(double,double):i => -i
AOIU_154:357:double_pooledVariance(double,double):sum2 => -sum2
AOIU_155:358:double_pooledVariance(double,double):sumSq2 => -sumSq2
AOIU_156:358:double_pooledVariance(double,double):data2.length => -data2.length
AOIU_157:359:double_pooledVariance(double,double):data1.length => -data1.length
AOIU_158:359:double_pooledVariance(double,double):data1.length => -data1.length
AOIU_159:368:double_polevl(double,double,int):ans => -ans
AOIU_160:370:double_polevl(double,double,int):ans => -ans
AOIU_161:376:double_rankInterpolated(double,double,int):index => -index
AOIU_162:377:double_rankInterpolated(double,double,int):sortedList.length => -sortedList.length
AOIU_163:381:double_rankInterpolated(double,double,int):to => -to
AOIU_164:385:double_rankInterpolated(double,double,int):insertionPoint => -insertionPoint
AOIU_165:387:double_rankInterpolated(double,double,int):insertionPoint => -insertionPoint
AOIU_166:388:double_rankInterpolated(double,double,int):insertionPoint => -insertionPoint
AOIU_167:389:double_rankInterpolated(double,double,int):element => -element
AOIU_168:389:double_rankInterpolated(double,double,int):to => -to
AOIU_169:390:double_rankInterpolated(double,double,int):insertionPoint => -insertionPoint
AOIU_170:399:double_sampleWeightedVariance(double,double):i => -i
AOIU_171:400:double_sampleWeightedVariance(double,double):i => -i
AOIU_172:400:double_sampleWeightedVariance(double,double):i => -i
AOIU_173:401:double_sampleWeightedVariance(double,double):i => -i
AOIU_174:401:double_sampleWeightedVariance(double,double):i => -i
AOIU_175:401:double_sampleWeightedVariance(double,double):i => -i
AOIU_176:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts => -sumOfSquaredProducts
AOIU_177:403:double_sampleWeightedVariance(double,double):sumOfWeights => -sumOfWeights
AOIU_178:412:double_skew(double):i => -i
AOIU_179:413:double_skew(double):i => -i
AOIU_180:413:double_skew(double):i => -i
AOIU_181:415:double_skew(double):sum => -sum
AOIU_182:416:double_skew(double):sumSq => -sumSq
AOIU_183:416:double_skew(double):data.length => -data.length
AOIU_184:418:double_skew(double):i => -i
AOIU_185:420:double_skew(double):sumPD => -sumPD
AOIU_186:421:double_skew(double):moment3 => -moment3
AOIU_187:421:double_skew(double):standardDeviation => -standardDeviation
AOIU_188:421:double_skew(double):standardDeviation => -standardDeviation
AOIU_189:429:double_standardize(double):i => -i
AOIU_190:430:double_standardize(double):i => -i
AOIU_191:430:double_standardize(double):i => -i
AOIU_192:432:double_standardize(double):sum => -sum
AOIU_193:433:double_standardize(double):sumSq => -sumSq
AOIU_194:433:double_standardize(double):data.length => -data.length
AOIU_195:435:double_standardize(double):i => -i
AOIU_196:435:double_standardize(double):sd => -sd
AOIU_197:445:double_weightedRMS(double,double):i => -i
AOIU_198:445:double_weightedRMS(double,double):i => -i
AOIU_199:446:double_weightedRMS(double,double):i => -i
AOIU_200:446:double_weightedRMS(double,double):i => -i
AOIU_201:446:double_weightedRMS(double,double):i => -i
AOIU_202:448:double_weightedRMS(double,double):sumOfProducts => -sumOfProducts
AOIU_203:455:double_harmonicMean(double):i => -i
AOIU_204:457:double_harmonicMean(double):data.length => -data.length
AOIU_205:464:double_sumOfPowerOfDeviations(double,int,double):i => -i
AOIU_206:464:double_sumOfPowerOfDeviations(double,int,double):k => -k
AOIU_207:466:double_sumOfPowerOfDeviations(double,int,double):sum => -sum
AOIU_208:472:double_power(double,int):i => -i
AOIU_209:472:double_power(double,int):k => -k
AOIU_210:480:double_square(double):i => -i
AOIU_211:480:double_square(double):i => -i
AOIS_1:18:double_autoCorrelation(double,int,double,double):data.length => data.length++
AOIS_2:18:double_autoCorrelation(double,int,double,double):data.length => data.length--
AOIS_3:20:double_autoCorrelation(double,int,double,double):i => ++i
AOIS_4:20:double_autoCorrelation(double,int,double,double):i => --i
AOIS_5:20:double_autoCorrelation(double,int,double,double):i => i++
AOIS_6:20:double_autoCorrelation(double,int,double,double):i => i--
AOIS_7:20:double_autoCorrelation(double,int,double,double):N => ++N
AOIS_8:20:double_autoCorrelation(double,int,double,double):N => --N
AOIS_9:20:double_autoCorrelation(double,int,double,double):N => N++
AOIS_10:20:double_autoCorrelation(double,int,double,double):N => N--
AOIS_11:21:double_autoCorrelation(double,int,double,double):i => ++i
AOIS_12:21:double_autoCorrelation(double,int,double,double):i => --i
AOIS_13:21:double_autoCorrelation(double,int,double,double):i => i++
AOIS_14:21:double_autoCorrelation(double,int,double,double):i => i--
AOIS_15:21:double_autoCorrelation(double,int,double,double):mean => ++mean
AOIS_16:21:double_autoCorrelation(double,int,double,double):mean => --mean
AOIS_17:21:double_autoCorrelation(double,int,double,double):mean => mean++
AOIS_18:21:double_autoCorrelation(double,int,double,double):mean => mean--
AOIS_19:21:double_autoCorrelation(double,int,double,double):i => ++i
AOIS_20:21:double_autoCorrelation(double,int,double,double):i => --i
AOIS_21:21:double_autoCorrelation(double,int,double,double):i => i++
AOIS_22:21:double_autoCorrelation(double,int,double,double):i => i--
AOIS_23:21:double_autoCorrelation(double,int,double,double):lag => ++lag
AOIS_24:21:double_autoCorrelation(double,int,double,double):lag => --lag
AOIS_25:21:double_autoCorrelation(double,int,double,double):lag => lag++
AOIS_26:21:double_autoCorrelation(double,int,double,double):lag => lag--
AOIS_27:21:double_autoCorrelation(double,int,double,double):mean => mean++
AOIS_28:21:double_autoCorrelation(double,int,double,double):mean => mean--
AOIS_29:23:double_autoCorrelation(double,int,double,double):run => ++run
AOIS_30:23:double_autoCorrelation(double,int,double,double):run => --run
AOIS_31:23:double_autoCorrelation(double,int,double,double):run => run++
AOIS_32:23:double_autoCorrelation(double,int,double,double):run => run--
AOIS_33:23:double_autoCorrelation(double,int,double,double):N => ++N
AOIS_34:23:double_autoCorrelation(double,int,double,double):N => --N
AOIS_35:23:double_autoCorrelation(double,int,double,double):N => N++
AOIS_36:23:double_autoCorrelation(double,int,double,double):N => N--
AOIS_37:23:double_autoCorrelation(double,int,double,double):lag => ++lag
AOIS_38:23:double_autoCorrelation(double,int,double,double):lag => --lag
AOIS_39:23:double_autoCorrelation(double,int,double,double):lag => lag++
AOIS_40:23:double_autoCorrelation(double,int,double,double):lag => lag--
AOIS_41:23:double_autoCorrelation(double,int,double,double):variance => variance++
AOIS_42:23:double_autoCorrelation(double,int,double,double):variance => variance--
AOIS_43:28:int_binarySearchFromTo(double,double,int,int):from => from++
AOIS_44:28:int_binarySearchFromTo(double,double,int,int):from => from--
AOIS_45:29:int_binarySearchFromTo(double,double,int,int):to => to++
AOIS_46:29:int_binarySearchFromTo(double,double,int,int):to => to--
AOIS_47:30:int_binarySearchFromTo(double,double,int,int):low => ++low
AOIS_48:30:int_binarySearchFromTo(double,double,int,int):low => --low
AOIS_49:30:int_binarySearchFromTo(double,double,int,int):low => low++
AOIS_50:30:int_binarySearchFromTo(double,double,int,int):low => low--
AOIS_51:30:int_binarySearchFromTo(double,double,int,int):high => ++high
AOIS_52:30:int_binarySearchFromTo(double,double,int,int):high => --high
AOIS_53:30:int_binarySearchFromTo(double,double,int,int):high => high++
AOIS_54:30:int_binarySearchFromTo(double,double,int,int):high => high--
AOIS_55:31:int_binarySearchFromTo(double,double,int,int):low => ++low
AOIS_56:31:int_binarySearchFromTo(double,double,int,int):low => --low
AOIS_57:31:int_binarySearchFromTo(double,double,int,int):low => low++
AOIS_58:31:int_binarySearchFromTo(double,double,int,int):low => low--
AOIS_59:31:int_binarySearchFromTo(double,double,int,int):high => ++high
AOIS_60:31:int_binarySearchFromTo(double,double,int,int):high => --high
AOIS_61:31:int_binarySearchFromTo(double,double,int,int):high => high++
AOIS_62:31:int_binarySearchFromTo(double,double,int,int):high => high--
AOIS_63:32:int_binarySearchFromTo(double,double,int,int):mid => mid++
AOIS_64:32:int_binarySearchFromTo(double,double,int,int):mid => mid--
AOIS_65:33:int_binarySearchFromTo(double,double,int,int):midVal => ++midVal
AOIS_66:33:int_binarySearchFromTo(double,double,int,int):midVal => --midVal
AOIS_67:33:int_binarySearchFromTo(double,double,int,int):midVal => midVal++
AOIS_68:33:int_binarySearchFromTo(double,double,int,int):midVal => midVal--
AOIS_69:33:int_binarySearchFromTo(double,double,int,int):key => ++key
AOIS_70:33:int_binarySearchFromTo(double,double,int,int):key => --key
AOIS_71:33:int_binarySearchFromTo(double,double,int,int):key => key++
AOIS_72:33:int_binarySearchFromTo(double,double,int,int):key => key--
AOIS_73:34:int_binarySearchFromTo(double,double,int,int):mid => ++mid
AOIS_74:34:int_binarySearchFromTo(double,double,int,int):mid => --mid
AOIS_75:34:int_binarySearchFromTo(double,double,int,int):mid => mid++
AOIS_76:34:int_binarySearchFromTo(double,double,int,int):mid => mid--
AOIS_77:36:int_binarySearchFromTo(double,double,int,int):midVal => ++midVal
AOIS_78:36:int_binarySearchFromTo(double,double,int,int):midVal => --midVal
AOIS_79:36:int_binarySearchFromTo(double,double,int,int):midVal => midVal++
AOIS_80:36:int_binarySearchFromTo(double,double,int,int):midVal => midVal--
AOIS_81:36:int_binarySearchFromTo(double,double,int,int):key => ++key
AOIS_82:36:int_binarySearchFromTo(double,double,int,int):key => --key
AOIS_83:36:int_binarySearchFromTo(double,double,int,int):key => key++
AOIS_84:36:int_binarySearchFromTo(double,double,int,int):key => key--
AOIS_85:37:int_binarySearchFromTo(double,double,int,int):mid => ++mid
AOIS_86:37:int_binarySearchFromTo(double,double,int,int):mid => --mid
AOIS_87:37:int_binarySearchFromTo(double,double,int,int):mid => mid++
AOIS_88:37:int_binarySearchFromTo(double,double,int,int):mid => mid--
AOIS_89:39:int_binarySearchFromTo(double,double,int,int):mid => mid++
AOIS_90:39:int_binarySearchFromTo(double,double,int,int):mid => mid--
AOIS_91:48:double_covariance(double,double):elements1.length => elements1.length++
AOIS_92:48:double_covariance(double,double):elements1.length => elements1.length--
AOIS_93:52:double_covariance(double,double):i => ++i
AOIS_94:52:double_covariance(double,double):i => --i
AOIS_95:52:double_covariance(double,double):i => i++
AOIS_96:52:double_covariance(double,double):i => i--
AOIS_97:52:double_covariance(double,double):size => ++size
AOIS_98:52:double_covariance(double,double):size => --size
AOIS_99:52:double_covariance(double,double):size => size++
AOIS_100:52:double_covariance(double,double):size => size--
AOIS_101:53:double_covariance(double,double):i => i++
AOIS_102:53:double_covariance(double,double):i => i--
AOIS_103:54:double_covariance(double,double):i => i++
AOIS_104:54:double_covariance(double,double):i => i--
AOIS_105:55:double_covariance(double,double):x => ++x
AOIS_106:55:double_covariance(double,double):x => --x
AOIS_107:55:double_covariance(double,double):x => x++
AOIS_108:55:double_covariance(double,double):x => x--
AOIS_109:56:double_covariance(double,double):x => ++x
AOIS_110:56:double_covariance(double,double):x => --x
AOIS_111:56:double_covariance(double,double):x => x++
AOIS_112:56:double_covariance(double,double):x => x--
AOIS_113:56:double_covariance(double,double):sumx => ++sumx
AOIS_114:56:double_covariance(double,double):sumx => --sumx
AOIS_115:56:double_covariance(double,double):sumx => sumx++
AOIS_116:56:double_covariance(double,double):sumx => sumx--
AOIS_117:56:double_covariance(double,double):i => ++i
AOIS_118:56:double_covariance(double,double):i => --i
AOIS_119:56:double_covariance(double,double):i => i++
AOIS_120:56:double_covariance(double,double):i => i--
AOIS_121:56:double_covariance(double,double):y => ++y
AOIS_122:56:double_covariance(double,double):y => --y
AOIS_123:56:double_covariance(double,double):y => y++
AOIS_124:56:double_covariance(double,double):y => y--
AOIS_125:56:double_covariance(double,double):sumy => ++sumy
AOIS_126:56:double_covariance(double,double):sumy => --sumy
AOIS_127:56:double_covariance(double,double):sumy => sumy++
AOIS_128:56:double_covariance(double,double):sumy => sumy--
AOIS_129:56:double_covariance(double,double):i => ++i
AOIS_130:56:double_covariance(double,double):i => --i
AOIS_131:56:double_covariance(double,double):i => i++
AOIS_132:56:double_covariance(double,double):i => i--
AOIS_133:57:double_covariance(double,double):y => ++y
AOIS_134:57:double_covariance(double,double):y => --y
AOIS_135:57:double_covariance(double,double):y => y++
AOIS_136:57:double_covariance(double,double):y => y--
AOIS_137:59:double_covariance(double,double):Sxy => ++Sxy
AOIS_138:59:double_covariance(double,double):Sxy => --Sxy
AOIS_139:59:double_covariance(double,double):Sxy => Sxy++
AOIS_140:59:double_covariance(double,double):Sxy => Sxy--
AOIS_141:59:double_covariance(double,double):size => ++size
AOIS_142:59:double_covariance(double,double):size => --size
AOIS_143:59:double_covariance(double,double):size => size++
AOIS_144:59:double_covariance(double,double):size => size--
AOIS_145:64:double_durbinWatson(double):elements.length => elements.length++
AOIS_146:64:double_durbinWatson(double):elements.length => elements.length--
AOIS_147:66:double_durbinWatson(double):i => ++i
AOIS_148:66:double_durbinWatson(double):i => --i
AOIS_149:66:double_durbinWatson(double):i => i++
AOIS_150:66:double_durbinWatson(double):i => i--
AOIS_151:66:double_durbinWatson(double):size => ++size
AOIS_152:66:double_durbinWatson(double):size => --size
AOIS_153:66:double_durbinWatson(double):size => size++
AOIS_154:66:double_durbinWatson(double):size => size--
AOIS_155:67:double_durbinWatson(double):i => ++i
AOIS_156:67:double_durbinWatson(double):i => --i
AOIS_157:67:double_durbinWatson(double):i => i++
AOIS_158:67:double_durbinWatson(double):i => i--
AOIS_159:67:double_durbinWatson(double):i => ++i
AOIS_160:67:double_durbinWatson(double):i => --i
AOIS_161:67:double_durbinWatson(double):i => i++
AOIS_162:67:double_durbinWatson(double):i => i--
AOIS_163:68:double_durbinWatson(double):x => ++x
AOIS_164:68:double_durbinWatson(double):x => --x
AOIS_165:68:double_durbinWatson(double):x => x++
AOIS_166:68:double_durbinWatson(double):x => x--
AOIS_167:68:double_durbinWatson(double):x => ++x
AOIS_168:68:double_durbinWatson(double):x => --x
AOIS_169:68:double_durbinWatson(double):x => x++
AOIS_170:68:double_durbinWatson(double):x => x--
AOIS_171:70:double_durbinWatson(double):run => run++
AOIS_172:70:double_durbinWatson(double):run => run--
AOIS_173:75:double_lag1(double,double):elements.length => elements.length++
AOIS_174:75:double_lag1(double,double):elements.length => elements.length--
AOIS_175:78:double_lag1(double,double):mean => ++mean
AOIS_176:78:double_lag1(double,double):mean => --mean
AOIS_177:78:double_lag1(double,double):mean => mean++
AOIS_178:78:double_lag1(double,double):mean => mean--
AOIS_179:78:double_lag1(double,double):mean => ++mean
AOIS_180:78:double_lag1(double,double):mean => --mean
AOIS_181:78:double_lag1(double,double):mean => mean++
AOIS_182:78:double_lag1(double,double):mean => mean--
AOIS_183:79:double_lag1(double,double):i => ++i
AOIS_184:79:double_lag1(double,double):i => --i
AOIS_185:79:double_lag1(double,double):i => i++
AOIS_186:79:double_lag1(double,double):i => i--
AOIS_187:79:double_lag1(double,double):size => ++size
AOIS_188:79:double_lag1(double,double):size => --size
AOIS_189:79:double_lag1(double,double):size => size++
AOIS_190:79:double_lag1(double,double):size => size--
AOIS_191:80:double_lag1(double,double):i => ++i
AOIS_192:80:double_lag1(double,double):i => --i
AOIS_193:80:double_lag1(double,double):i => i++
AOIS_194:80:double_lag1(double,double):i => i--
AOIS_195:80:double_lag1(double,double):mean => mean++
AOIS_196:80:double_lag1(double,double):mean => mean--
AOIS_197:81:double_lag1(double,double):i => ++i
AOIS_198:81:double_lag1(double,double):i => --i
AOIS_199:81:double_lag1(double,double):i => i++
AOIS_200:81:double_lag1(double,double):i => i--
AOIS_201:81:double_lag1(double,double):mean => ++mean
AOIS_202:81:double_lag1(double,double):mean => --mean
AOIS_203:81:double_lag1(double,double):mean => mean++
AOIS_204:81:double_lag1(double,double):mean => mean--
AOIS_205:82:double_lag1(double,double):delta0 => ++delta0
AOIS_206:82:double_lag1(double,double):delta0 => --delta0
AOIS_207:82:double_lag1(double,double):delta0 => delta0++
AOIS_208:82:double_lag1(double,double):delta0 => delta0--
AOIS_209:82:double_lag1(double,double):delta1 => ++delta1
AOIS_210:82:double_lag1(double,double):delta1 => --delta1
AOIS_211:82:double_lag1(double,double):delta1 => delta1++
AOIS_212:82:double_lag1(double,double):delta1 => delta1--
AOIS_213:82:double_lag1(double,double):q => q++
AOIS_214:82:double_lag1(double,double):q => q--
AOIS_215:82:double_lag1(double,double):i => ++i
AOIS_216:82:double_lag1(double,double):i => --i
AOIS_217:82:double_lag1(double,double):i => i++
AOIS_218:82:double_lag1(double,double):i => i--
AOIS_219:83:double_lag1(double,double):delta1 => ++delta1
AOIS_220:83:double_lag1(double,double):delta1 => --delta1
AOIS_221:83:double_lag1(double,double):delta1 => delta1++
AOIS_222:83:double_lag1(double,double):delta1 => delta1--
AOIS_223:83:double_lag1(double,double):delta1 => ++delta1
AOIS_224:83:double_lag1(double,double):delta1 => --delta1
AOIS_225:83:double_lag1(double,double):delta1 => delta1++
AOIS_226:83:double_lag1(double,double):delta1 => delta1--
AOIS_227:83:double_lag1(double,double):v => v++
AOIS_228:83:double_lag1(double,double):v => v--
AOIS_229:83:double_lag1(double,double):i => ++i
AOIS_230:83:double_lag1(double,double):i => --i
AOIS_231:83:double_lag1(double,double):i => i++
AOIS_232:83:double_lag1(double,double):i => i--
AOIS_233:85:double_lag1(double,double):q => ++q
AOIS_234:85:double_lag1(double,double):q => --q
AOIS_235:85:double_lag1(double,double):q => q++
AOIS_236:85:double_lag1(double,double):q => q--
AOIS_237:85:double_lag1(double,double):v => ++v
AOIS_238:85:double_lag1(double,double):v => --v
AOIS_239:85:double_lag1(double,double):v => v++
AOIS_240:85:double_lag1(double,double):v => v--
AOIS_241:86:double_lag1(double,double):r1 => r1++
AOIS_242:86:double_lag1(double,double):r1 => r1--
AOIS_243:91:double_max(double):elements.length => elements.length++
AOIS_244:91:double_max(double):elements.length => elements.length--
AOIS_245:92:double_max(double):size => ++size
AOIS_246:92:double_max(double):size => --size
AOIS_247:92:double_max(double):size => size++
AOIS_248:92:double_max(double):size => size--
AOIS_249:94:double_max(double):i => ++i
AOIS_250:94:double_max(double):i => --i
AOIS_251:94:double_max(double):i => i++
AOIS_252:94:double_max(double):i => i--
AOIS_253:94:double_max(double):max => ++max
AOIS_254:94:double_max(double):max => --max
AOIS_255:94:double_max(double):max => max++
AOIS_256:94:double_max(double):max => max--
AOIS_257:95:double_max(double):i => ++i
AOIS_258:95:double_max(double):i => --i
AOIS_259:95:double_max(double):i => i++
AOIS_260:95:double_max(double):i => i--
AOIS_261:98:double_max(double):max => max++
AOIS_262:98:double_max(double):max => max--
AOIS_263:103:double_meanDeviation(double,double):elements.length => elements.length++
AOIS_264:103:double_meanDeviation(double,double):elements.length => elements.length--
AOIS_265:106:double_meanDeviation(double,double):i => ++i
AOIS_266:106:double_meanDeviation(double,double):i => --i
AOIS_267:106:double_meanDeviation(double,double):i => i++
AOIS_268:106:double_meanDeviation(double,double):i => i--
AOIS_269:106:double_meanDeviation(double,double):mean => ++mean
AOIS_270:106:double_meanDeviation(double,double):mean => --mean
AOIS_271:106:double_meanDeviation(double,double):mean => mean++
AOIS_272:106:double_meanDeviation(double,double):mean => mean--
AOIS_273:108:double_meanDeviation(double,double):sum => ++sum
AOIS_274:108:double_meanDeviation(double,double):sum => --sum
AOIS_275:108:double_meanDeviation(double,double):sum => sum++
AOIS_276:108:double_meanDeviation(double,double):sum => sum--
AOIS_277:108:double_meanDeviation(double,double):size => ++size
AOIS_278:108:double_meanDeviation(double,double):size => --size
AOIS_279:108:double_meanDeviation(double,double):size => size++
AOIS_280:108:double_meanDeviation(double,double):size => size--
AOIS_281:113:double_min(double):elements.length => elements.length++
AOIS_282:113:double_min(double):elements.length => elements.length--
AOIS_283:114:double_min(double):size => ++size
AOIS_284:114:double_min(double):size => --size
AOIS_285:114:double_min(double):size => size++
AOIS_286:114:double_min(double):size => size--
AOIS_287:116:double_min(double):i => ++i
AOIS_288:116:double_min(double):i => --i
AOIS_289:116:double_min(double):i => i++
AOIS_290:116:double_min(double):i => i--
AOIS_291:116:double_min(double):min => ++min
AOIS_292:116:double_min(double):min => --min
AOIS_293:116:double_min(double):min => min++
AOIS_294:116:double_min(double):min => min--
AOIS_295:117:double_min(double):i => ++i
AOIS_296:117:double_min(double):i => --i
AOIS_297:117:double_min(double):i => i++
AOIS_298:117:double_min(double):i => i--
AOIS_299:120:double_min(double):min => min++
AOIS_300:120:double_min(double):min => min--
AOIS_301:125:double_product(double):elements.length => elements.length++
AOIS_302:125:double_product(double):elements.length => elements.length--
AOIS_303:128:double_product(double):i => ++i
AOIS_304:128:double_product(double):i => --i
AOIS_305:128:double_product(double):i => i++
AOIS_306:128:double_product(double):i => i--
AOIS_307:130:double_product(double):product => product++
AOIS_308:130:double_product(double):product => product--
AOIS_309:135:double_quantile(double,double):sortedElements.length => sortedElements.length++
AOIS_310:135:double_quantile(double,double):sortedElements.length => sortedElements.length--
AOIS_311:136:double_quantile(double,double):phi => ++phi
AOIS_312:136:double_quantile(double,double):phi => --phi
AOIS_313:136:double_quantile(double,double):phi => phi++
AOIS_314:136:double_quantile(double,double):phi => phi--
AOIS_315:136:double_quantile(double,double):n => ++n
AOIS_316:136:double_quantile(double,double):n => --n
AOIS_317:136:double_quantile(double,double):n => n++
AOIS_318:136:double_quantile(double,double):n => n--
AOIS_319:137:double_quantile(double,double):index => index++
AOIS_320:137:double_quantile(double,double):index => index--
AOIS_321:138:double_quantile(double,double):index => ++index
AOIS_322:138:double_quantile(double,double):index => --index
AOIS_323:138:double_quantile(double,double):index => index++
AOIS_324:138:double_quantile(double,double):index => index--
AOIS_325:138:double_quantile(double,double):lhs => ++lhs
AOIS_326:138:double_quantile(double,double):lhs => --lhs
AOIS_327:138:double_quantile(double,double):lhs => lhs++
AOIS_328:138:double_quantile(double,double):lhs => lhs--
AOIS_329:140:double_quantile(double,double):n => ++n
AOIS_330:140:double_quantile(double,double):n => --n
AOIS_331:140:double_quantile(double,double):n => n++
AOIS_332:140:double_quantile(double,double):n => n--
AOIS_333:143:double_quantile(double,double):lhs => ++lhs
AOIS_334:143:double_quantile(double,double):lhs => --lhs
AOIS_335:143:double_quantile(double,double):lhs => lhs++
AOIS_336:143:double_quantile(double,double):lhs => lhs--
AOIS_337:143:double_quantile(double,double):n => ++n
AOIS_338:143:double_quantile(double,double):n => --n
AOIS_339:143:double_quantile(double,double):n => n++
AOIS_340:143:double_quantile(double,double):n => n--
AOIS_341:144:double_quantile(double,double):lhs => ++lhs
AOIS_342:144:double_quantile(double,double):lhs => --lhs
AOIS_343:144:double_quantile(double,double):lhs => lhs++
AOIS_344:144:double_quantile(double,double):lhs => lhs--
AOIS_345:146:double_quantile(double,double):delta => ++delta
AOIS_346:146:double_quantile(double,double):delta => --delta
AOIS_347:146:double_quantile(double,double):delta => delta++
AOIS_348:146:double_quantile(double,double):delta => delta--
AOIS_349:146:double_quantile(double,double):lhs => lhs++
AOIS_350:146:double_quantile(double,double):lhs => lhs--
AOIS_351:146:double_quantile(double,double):delta => ++delta
AOIS_352:146:double_quantile(double,double):delta => --delta
AOIS_353:146:double_quantile(double,double):delta => delta++
AOIS_354:146:double_quantile(double,double):delta => delta--
AOIS_355:146:double_quantile(double,double):lhs => ++lhs
AOIS_356:146:double_quantile(double,double):lhs => --lhs
AOIS_357:146:double_quantile(double,double):lhs => lhs++
AOIS_358:146:double_quantile(double,double):lhs => lhs--
AOIS_359:148:double_quantile(double,double):result => result++
AOIS_360:148:double_quantile(double,double):result => result--
AOIS_361:153:double_sampleKurtosis(int,double,double):size => size++
AOIS_362:153:double_sampleKurtosis(int,double,double):size => size--
AOIS_363:154:double_sampleKurtosis(int,double,double):sampleVariance => sampleVariance++
AOIS_364:154:double_sampleKurtosis(int,double,double):sampleVariance => sampleVariance--
AOIS_365:155:double_sampleKurtosis(int,double,double):moment4 => ++moment4
AOIS_366:155:double_sampleKurtosis(int,double,double):moment4 => --moment4
AOIS_367:155:double_sampleKurtosis(int,double,double):moment4 => moment4++
AOIS_368:155:double_sampleKurtosis(int,double,double):moment4 => moment4--
AOIS_369:155:double_sampleKurtosis(int,double,double):n => ++n
AOIS_370:155:double_sampleKurtosis(int,double,double):n => --n
AOIS_371:155:double_sampleKurtosis(int,double,double):n => n++
AOIS_372:155:double_sampleKurtosis(int,double,double):n => n--
AOIS_373:156:double_sampleKurtosis(int,double,double):m4 => ++m4
AOIS_374:156:double_sampleKurtosis(int,double,double):m4 => --m4
AOIS_375:156:double_sampleKurtosis(int,double,double):m4 => m4++
AOIS_376:156:double_sampleKurtosis(int,double,double):m4 => m4--
AOIS_377:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_378:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_379:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_380:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_381:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_382:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_383:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_384:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_385:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_386:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_387:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_388:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_389:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_390:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_391:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_392:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_393:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_394:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_395:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_396:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_397:156:double_sampleKurtosis(int,double,double):s2 => s2++
AOIS_398:156:double_sampleKurtosis(int,double,double):s2 => s2--
AOIS_399:156:double_sampleKurtosis(int,double,double):s2 => s2++
AOIS_400:156:double_sampleKurtosis(int,double,double):s2 => s2--
AOIS_401:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_402:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_403:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_404:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_405:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_406:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_407:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_408:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_409:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_410:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_411:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_412:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_413:156:double_sampleKurtosis(int,double,double):n => ++n
AOIS_414:156:double_sampleKurtosis(int,double,double):n => --n
AOIS_415:156:double_sampleKurtosis(int,double,double):n => n++
AOIS_416:156:double_sampleKurtosis(int,double,double):n => n--
AOIS_417:161:double_sampleKurtosisStandardError(int):size => size++
AOIS_418:161:double_sampleKurtosisStandardError(int):size => size--
AOIS_419:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_420:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_421:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_422:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_423:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_424:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_425:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_426:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_427:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_428:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_429:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_430:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_431:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_432:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_433:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_434:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_435:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_436:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_437:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_438:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_439:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_440:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_441:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_442:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_443:162:double_sampleKurtosisStandardError(int):n => ++n
AOIS_444:162:double_sampleKurtosisStandardError(int):n => --n
AOIS_445:162:double_sampleKurtosisStandardError(int):n => n++
AOIS_446:162:double_sampleKurtosisStandardError(int):n => n--
AOIS_447:167:double_sampleSkew(int,double,double):size => size++
AOIS_448:167:double_sampleSkew(int,double,double):size => size--
AOIS_449:168:double_sampleSkew(int,double,double):sampleVariance => sampleVariance++
AOIS_450:168:double_sampleSkew(int,double,double):sampleVariance => sampleVariance--
AOIS_451:169:double_sampleSkew(int,double,double):moment3 => ++moment3
AOIS_452:169:double_sampleSkew(int,double,double):moment3 => --moment3
AOIS_453:169:double_sampleSkew(int,double,double):moment3 => moment3++
AOIS_454:169:double_sampleSkew(int,double,double):moment3 => moment3--
AOIS_455:169:double_sampleSkew(int,double,double):n => ++n
AOIS_456:169:double_sampleSkew(int,double,double):n => --n
AOIS_457:169:double_sampleSkew(int,double,double):n => n++
AOIS_458:169:double_sampleSkew(int,double,double):n => n--
AOIS_459:170:double_sampleSkew(int,double,double):n => ++n
AOIS_460:170:double_sampleSkew(int,double,double):n => --n
AOIS_461:170:double_sampleSkew(int,double,double):n => n++
AOIS_462:170:double_sampleSkew(int,double,double):n => n--
AOIS_463:170:double_sampleSkew(int,double,double):m3 => ++m3
AOIS_464:170:double_sampleSkew(int,double,double):m3 => --m3
AOIS_465:170:double_sampleSkew(int,double,double):m3 => m3++
AOIS_466:170:double_sampleSkew(int,double,double):m3 => m3--
AOIS_467:170:double_sampleSkew(int,double,double):n => ++n
AOIS_468:170:double_sampleSkew(int,double,double):n => --n
AOIS_469:170:double_sampleSkew(int,double,double):n => n++
AOIS_470:170:double_sampleSkew(int,double,double):n => n--
AOIS_471:170:double_sampleSkew(int,double,double):n => ++n
AOIS_472:170:double_sampleSkew(int,double,double):n => --n
AOIS_473:170:double_sampleSkew(int,double,double):n => n++
AOIS_474:170:double_sampleSkew(int,double,double):n => n--
AOIS_475:170:double_sampleSkew(int,double,double):s => s++
AOIS_476:170:double_sampleSkew(int,double,double):s => s--
AOIS_477:170:double_sampleSkew(int,double,double):s => s++
AOIS_478:170:double_sampleSkew(int,double,double):s => s--
AOIS_479:170:double_sampleSkew(int,double,double):s => s++
AOIS_480:170:double_sampleSkew(int,double,double):s => s--
AOIS_481:175:double_sampleVariance(double,double):elements.length => elements.length++
AOIS_482:175:double_sampleVariance(double,double):elements.length => elements.length--
AOIS_483:178:double_sampleVariance(double,double):i => ++i
AOIS_484:178:double_sampleVariance(double,double):i => --i
AOIS_485:178:double_sampleVariance(double,double):i => i++
AOIS_486:178:double_sampleVariance(double,double):i => i--
AOIS_487:178:double_sampleVariance(double,double):mean => ++mean
AOIS_488:178:double_sampleVariance(double,double):mean => --mean
AOIS_489:178:double_sampleVariance(double,double):mean => mean++
AOIS_490:178:double_sampleVariance(double,double):mean => mean--
AOIS_491:179:double_sampleVariance(double,double):delta => ++delta
AOIS_492:179:double_sampleVariance(double,double):delta => --delta
AOIS_493:179:double_sampleVariance(double,double):delta => delta++
AOIS_494:179:double_sampleVariance(double,double):delta => delta--
AOIS_495:179:double_sampleVariance(double,double):delta => ++delta
AOIS_496:179:double_sampleVariance(double,double):delta => --delta
AOIS_497:179:double_sampleVariance(double,double):delta => delta++
AOIS_498:179:double_sampleVariance(double,double):delta => delta--
AOIS_499:181:double_sampleVariance(double,double):sum => ++sum
AOIS_500:181:double_sampleVariance(double,double):sum => --sum
AOIS_501:181:double_sampleVariance(double,double):sum => sum++
AOIS_502:181:double_sampleVariance(double,double):sum => sum--
AOIS_503:181:double_sampleVariance(double,double):size => ++size
AOIS_504:181:double_sampleVariance(double,double):size => --size
AOIS_505:181:double_sampleVariance(double,double):size => size++
AOIS_506:181:double_sampleVariance(double,double):size => size--
AOIS_507:187:double_sumOfLogarithms(double):i => ++i
AOIS_508:187:double_sumOfLogarithms(double):i => --i
AOIS_509:187:double_sumOfLogarithms(double):i => i++
AOIS_510:187:double_sumOfLogarithms(double):i => i--
AOIS_511:187:double_sumOfLogarithms(double):elements.length => ++elements.length
AOIS_512:187:double_sumOfLogarithms(double):elements.length => --elements.length
AOIS_513:187:double_sumOfLogarithms(double):elements.length => elements.length++
AOIS_514:187:double_sumOfLogarithms(double):elements.length => elements.length--
AOIS_515:188:double_sumOfLogarithms(double):i => ++i
AOIS_516:188:double_sumOfLogarithms(double):i => --i
AOIS_517:188:double_sumOfLogarithms(double):i => i++
AOIS_518:188:double_sumOfLogarithms(double):i => i--
AOIS_519:190:double_sumOfLogarithms(double):logsum => logsum++
AOIS_520:190:double_sumOfLogarithms(double):logsum => logsum--
AOIS_521:195:double_trimmedMean(double,double,int,int):sortedElements.length => sortedElements.length++
AOIS_522:195:double_trimmedMean(double,double,int,int):sortedElements.length => sortedElements.length--
AOIS_523:196:double_trimmedMean(double,double,int,int):N => N++
AOIS_524:196:double_trimmedMean(double,double,int,int):N => N--
AOIS_525:197:double_trimmedMean(double,double,int,int):i => ++i
AOIS_526:197:double_trimmedMean(double,double,int,int):i => --i
AOIS_527:197:double_trimmedMean(double,double,int,int):i => i++
AOIS_528:197:double_trimmedMean(double,double,int,int):i => i--
AOIS_529:197:double_trimmedMean(double,double,int,int):left => ++left
AOIS_530:197:double_trimmedMean(double,double,int,int):left => --left
AOIS_531:197:double_trimmedMean(double,double,int,int):left => left++
AOIS_532:197:double_trimmedMean(double,double,int,int):left => left--
AOIS_533:198:double_trimmedMean(double,double,int,int):mean => ++mean
AOIS_534:198:double_trimmedMean(double,double,int,int):mean => --mean
AOIS_535:198:double_trimmedMean(double,double,int,int):mean => mean++
AOIS_536:198:double_trimmedMean(double,double,int,int):mean => mean--
AOIS_537:198:double_trimmedMean(double,double,int,int):i => ++i
AOIS_538:198:double_trimmedMean(double,double,int,int):i => --i
AOIS_539:198:double_trimmedMean(double,double,int,int):i => i++
AOIS_540:198:double_trimmedMean(double,double,int,int):i => i--
AOIS_541:200:double_trimmedMean(double,double,int,int):i => ++i
AOIS_542:200:double_trimmedMean(double,double,int,int):i => --i
AOIS_543:200:double_trimmedMean(double,double,int,int):i => i++
AOIS_544:200:double_trimmedMean(double,double,int,int):i => i--
AOIS_545:200:double_trimmedMean(double,double,int,int):right => ++right
AOIS_546:200:double_trimmedMean(double,double,int,int):right => --right
AOIS_547:200:double_trimmedMean(double,double,int,int):right => right++
AOIS_548:200:double_trimmedMean(double,double,int,int):right => right--
AOIS_549:201:double_trimmedMean(double,double,int,int):mean => ++mean
AOIS_550:201:double_trimmedMean(double,double,int,int):mean => --mean
AOIS_551:201:double_trimmedMean(double,double,int,int):mean => mean++
AOIS_552:201:double_trimmedMean(double,double,int,int):mean => mean--
AOIS_553:201:double_trimmedMean(double,double,int,int):N0 => ++N0
AOIS_554:201:double_trimmedMean(double,double,int,int):N0 => --N0
AOIS_555:201:double_trimmedMean(double,double,int,int):N0 => N0++
AOIS_556:201:double_trimmedMean(double,double,int,int):N0 => N0--
AOIS_557:201:double_trimmedMean(double,double,int,int):i => i++
AOIS_558:201:double_trimmedMean(double,double,int,int):i => i--
AOIS_559:203:double_trimmedMean(double,double,int,int):mean => mean++
AOIS_560:203:double_trimmedMean(double,double,int,int):mean => mean--
AOIS_561:208:double_weightedMean(double,double):elements.length => elements.length++
AOIS_562:208:double_weightedMean(double,double):elements.length => elements.length--
AOIS_563:212:double_weightedMean(double,double):i => i++
AOIS_564:212:double_weightedMean(double,double):i => i--
AOIS_565:213:double_weightedMean(double,double):i => ++i
AOIS_566:213:double_weightedMean(double,double):i => --i
AOIS_567:213:double_weightedMean(double,double):i => i++
AOIS_568:213:double_weightedMean(double,double):i => i--
AOIS_569:213:double_weightedMean(double,double):w => ++w
AOIS_570:213:double_weightedMean(double,double):w => --w
AOIS_571:213:double_weightedMean(double,double):w => w++
AOIS_572:213:double_weightedMean(double,double):w => w--
AOIS_573:214:double_weightedMean(double,double):w => ++w
AOIS_574:214:double_weightedMean(double,double):w => --w
AOIS_575:214:double_weightedMean(double,double):w => w++
AOIS_576:214:double_weightedMean(double,double):w => w--
AOIS_577:216:double_weightedMean(double,double):sum => ++sum
AOIS_578:216:double_weightedMean(double,double):sum => --sum
AOIS_579:216:double_weightedMean(double,double):sum => sum++
AOIS_580:216:double_weightedMean(double,double):sum => sum--
AOIS_581:216:double_weightedMean(double,double):weightsSum => ++weightsSum
AOIS_582:216:double_weightedMean(double,double):weightsSum => --weightsSum
AOIS_583:216:double_weightedMean(double,double):weightsSum => weightsSum++
AOIS_584:216:double_weightedMean(double,double):weightsSum => weightsSum--
AOIS_585:222:int_binarySearchFromTo(int,int,int,int):from => ++from
AOIS_586:222:int_binarySearchFromTo(int,int,int,int):from => --from
AOIS_587:222:int_binarySearchFromTo(int,int,int,int):from => from++
AOIS_588:222:int_binarySearchFromTo(int,int,int,int):from => from--
AOIS_589:222:int_binarySearchFromTo(int,int,int,int):to => ++to
AOIS_590:222:int_binarySearchFromTo(int,int,int,int):to => --to
AOIS_591:222:int_binarySearchFromTo(int,int,int,int):to => to++
AOIS_592:222:int_binarySearchFromTo(int,int,int,int):to => to--
AOIS_593:223:int_binarySearchFromTo(int,int,int,int):from => ++from
AOIS_594:223:int_binarySearchFromTo(int,int,int,int):from => --from
AOIS_595:223:int_binarySearchFromTo(int,int,int,int):from => from++
AOIS_596:223:int_binarySearchFromTo(int,int,int,int):from => from--
AOIS_597:223:int_binarySearchFromTo(int,int,int,int):to => ++to
AOIS_598:223:int_binarySearchFromTo(int,int,int,int):to => --to
AOIS_599:223:int_binarySearchFromTo(int,int,int,int):to => to++
AOIS_600:223:int_binarySearchFromTo(int,int,int,int):to => to--
AOIS_601:224:int_binarySearchFromTo(int,int,int,int):mid => ++mid
AOIS_602:224:int_binarySearchFromTo(int,int,int,int):mid => --mid
AOIS_603:224:int_binarySearchFromTo(int,int,int,int):mid => mid++
AOIS_604:224:int_binarySearchFromTo(int,int,int,int):mid => mid--
AOIS_605:225:int_binarySearchFromTo(int,int,int,int):midVal => ++midVal
AOIS_606:225:int_binarySearchFromTo(int,int,int,int):midVal => --midVal
AOIS_607:225:int_binarySearchFromTo(int,int,int,int):midVal => midVal++
AOIS_608:225:int_binarySearchFromTo(int,int,int,int):midVal => midVal--
AOIS_609:225:int_binarySearchFromTo(int,int,int,int):key => ++key
AOIS_610:225:int_binarySearchFromTo(int,int,int,int):key => --key
AOIS_611:225:int_binarySearchFromTo(int,int,int,int):key => key++
AOIS_612:225:int_binarySearchFromTo(int,int,int,int):key => key--
AOIS_613:226:int_binarySearchFromTo(int,int,int,int):mid => ++mid
AOIS_614:226:int_binarySearchFromTo(int,int,int,int):mid => --mid
AOIS_615:226:int_binarySearchFromTo(int,int,int,int):mid => mid++
AOIS_616:226:int_binarySearchFromTo(int,int,int,int):mid => mid--
AOIS_617:228:int_binarySearchFromTo(int,int,int,int):midVal => ++midVal
AOIS_618:228:int_binarySearchFromTo(int,int,int,int):midVal => --midVal
AOIS_619:228:int_binarySearchFromTo(int,int,int,int):midVal => midVal++
AOIS_620:228:int_binarySearchFromTo(int,int,int,int):midVal => midVal--
AOIS_621:228:int_binarySearchFromTo(int,int,int,int):key => ++key
AOIS_622:228:int_binarySearchFromTo(int,int,int,int):key => --key
AOIS_623:228:int_binarySearchFromTo(int,int,int,int):key => key++
AOIS_624:228:int_binarySearchFromTo(int,int,int,int):key => key--
AOIS_625:229:int_binarySearchFromTo(int,int,int,int):mid => ++mid
AOIS_626:229:int_binarySearchFromTo(int,int,int,int):mid => --mid
AOIS_627:229:int_binarySearchFromTo(int,int,int,int):mid => mid++
AOIS_628:229:int_binarySearchFromTo(int,int,int,int):mid => mid--
AOIS_629:231:int_binarySearchFromTo(int,int,int,int):mid => mid++
AOIS_630:231:int_binarySearchFromTo(int,int,int,int):mid => mid--
AOIS_631:240:double_binomial(double,long):k => ++k
AOIS_632:240:double_binomial(double,long):k => --k
AOIS_633:240:double_binomial(double,long):k => k++
AOIS_634:240:double_binomial(double,long):k => k--
AOIS_635:243:double_binomial(double,long):k => ++k
AOIS_636:243:double_binomial(double,long):k => --k
AOIS_637:243:double_binomial(double,long):k => k++
AOIS_638:243:double_binomial(double,long):k => k--
AOIS_639:246:double_binomial(double,long):k => ++k
AOIS_640:246:double_binomial(double,long):k => --k
AOIS_641:246:double_binomial(double,long):k => k++
AOIS_642:246:double_binomial(double,long):k => k--
AOIS_643:247:double_binomial(double,long):n => n++
AOIS_644:247:double_binomial(double,long):n => n--
AOIS_645:249:double_binomial(double,long):n => ++n
AOIS_646:249:double_binomial(double,long):n => --n
AOIS_647:249:double_binomial(double,long):n => n++
AOIS_648:249:double_binomial(double,long):n => n--
AOIS_649:249:double_binomial(double,long):k => ++k
AOIS_650:249:double_binomial(double,long):k => --k
AOIS_651:249:double_binomial(double,long):k => k++
AOIS_652:249:double_binomial(double,long):k => k--
AOIS_653:255:double_binomial(double,long):binomial => binomial++
AOIS_654:255:double_binomial(double,long):binomial => binomial--
AOIS_655:260:double_link(double):r => ++r
AOIS_656:260:double_link(double):r => --r
AOIS_657:260:double_link(double):r => r++
AOIS_658:260:double_link(double):r => r--
AOIS_659:261:double_link(double):r => r++
AOIS_660:261:double_link(double):r => r--
AOIS_661:262:double_link(double):s => ++s
AOIS_662:262:double_link(double):s => --s
AOIS_663:262:double_link(double):s => s++
AOIS_664:262:double_link(double):s => s--
AOIS_665:262:double_link(double):s => ++s
AOIS_666:262:double_link(double):s => --s
AOIS_667:262:double_link(double):s => s++
AOIS_668:262:double_link(double):s => s--
AOIS_669:265:double_link(double):s => ++s
AOIS_670:265:double_link(double):s => --s
AOIS_671:265:double_link(double):s => s++
AOIS_672:265:double_link(double):s => s--
AOIS_673:271:double_winsorizedMean(double,int,int):sortedElements.length => sortedElements.length++
AOIS_674:271:double_winsorizedMean(double,int,int):sortedElements.length => sortedElements.length--
AOIS_675:273:double_winsorizedMean(double,int,int):i => ++i
AOIS_676:273:double_winsorizedMean(double,int,int):i => --i
AOIS_677:273:double_winsorizedMean(double,int,int):i => i++
AOIS_678:273:double_winsorizedMean(double,int,int):i => i--
AOIS_679:273:double_winsorizedMean(double,int,int):sortedElements.length => ++sortedElements.length
AOIS_680:273:double_winsorizedMean(double,int,int):sortedElements.length => --sortedElements.length
AOIS_681:273:double_winsorizedMean(double,int,int):sortedElements.length => sortedElements.length++
AOIS_682:273:double_winsorizedMean(double,int,int):sortedElements.length => sortedElements.length--
AOIS_683:274:double_winsorizedMean(double,int,int):i => ++i
AOIS_684:274:double_winsorizedMean(double,int,int):i => --i
AOIS_685:274:double_winsorizedMean(double,int,int):i => i++
AOIS_686:274:double_winsorizedMean(double,int,int):i => i--
AOIS_687:276:double_winsorizedMean(double,int,int):sum => ++sum
AOIS_688:276:double_winsorizedMean(double,int,int):sum => --sum
AOIS_689:276:double_winsorizedMean(double,int,int):sum => sum++
AOIS_690:276:double_winsorizedMean(double,int,int):sum => sum--
AOIS_691:276:double_winsorizedMean(double,int,int):sortedElements.length => ++sortedElements.length
AOIS_692:276:double_winsorizedMean(double,int,int):sortedElements.length => --sortedElements.length
AOIS_693:276:double_winsorizedMean(double,int,int):sortedElements.length => sortedElements.length++
AOIS_694:276:double_winsorizedMean(double,int,int):sortedElements.length => sortedElements.length--
AOIS_695:277:double_winsorizedMean(double,int,int):left => left++
AOIS_696:277:double_winsorizedMean(double,int,int):left => left--
AOIS_697:278:double_winsorizedMean(double,int,int):i => ++i
AOIS_698:278:double_winsorizedMean(double,int,int):i => --i
AOIS_699:278:double_winsorizedMean(double,int,int):i => i++
AOIS_700:278:double_winsorizedMean(double,int,int):i => i--
AOIS_701:278:double_winsorizedMean(double,int,int):left => ++left
AOIS_702:278:double_winsorizedMean(double,int,int):left => --left
AOIS_703:278:double_winsorizedMean(double,int,int):left => left++
AOIS_704:278:double_winsorizedMean(double,int,int):left => left--
AOIS_705:279:double_winsorizedMean(double,int,int):leftElement => ++leftElement
AOIS_706:279:double_winsorizedMean(double,int,int):leftElement => --leftElement
AOIS_707:279:double_winsorizedMean(double,int,int):leftElement => leftElement++
AOIS_708:279:double_winsorizedMean(double,int,int):leftElement => leftElement--
AOIS_709:279:double_winsorizedMean(double,int,int):i => ++i
AOIS_710:279:double_winsorizedMean(double,int,int):i => --i
AOIS_711:279:double_winsorizedMean(double,int,int):i => i++
AOIS_712:279:double_winsorizedMean(double,int,int):i => i--
AOIS_713:279:double_winsorizedMean(double,int,int):N => N++
AOIS_714:279:double_winsorizedMean(double,int,int):N => N--
AOIS_715:281:double_winsorizedMean(double,int,int):N => ++N
AOIS_716:281:double_winsorizedMean(double,int,int):N => --N
AOIS_717:281:double_winsorizedMean(double,int,int):N => N++
AOIS_718:281:double_winsorizedMean(double,int,int):N => N--
AOIS_719:281:double_winsorizedMean(double,int,int):right => right++
AOIS_720:281:double_winsorizedMean(double,int,int):right => right--
AOIS_721:282:double_winsorizedMean(double,int,int):i => ++i
AOIS_722:282:double_winsorizedMean(double,int,int):i => --i
AOIS_723:282:double_winsorizedMean(double,int,int):i => i++
AOIS_724:282:double_winsorizedMean(double,int,int):i => i--
AOIS_725:282:double_winsorizedMean(double,int,int):right => ++right
AOIS_726:282:double_winsorizedMean(double,int,int):right => --right
AOIS_727:282:double_winsorizedMean(double,int,int):right => right++
AOIS_728:282:double_winsorizedMean(double,int,int):right => right--
AOIS_729:283:double_winsorizedMean(double,int,int):rightElement => ++rightElement
AOIS_730:283:double_winsorizedMean(double,int,int):rightElement => --rightElement
AOIS_731:283:double_winsorizedMean(double,int,int):rightElement => rightElement++
AOIS_732:283:double_winsorizedMean(double,int,int):rightElement => rightElement--
AOIS_733:283:double_winsorizedMean(double,int,int):N => ++N
AOIS_734:283:double_winsorizedMean(double,int,int):N => --N
AOIS_735:283:double_winsorizedMean(double,int,int):N => N++
AOIS_736:283:double_winsorizedMean(double,int,int):N => N--
AOIS_737:283:double_winsorizedMean(double,int,int):i => i++
AOIS_738:283:double_winsorizedMean(double,int,int):i => i--
AOIS_739:283:double_winsorizedMean(double,int,int):N => N++
AOIS_740:283:double_winsorizedMean(double,int,int):N => N--
AOIS_741:285:double_winsorizedMean(double,int,int):mean => mean++
AOIS_742:285:double_winsorizedMean(double,int,int):mean => mean--
AOIS_743:290:double_geometricPdf(int,double):p => ++p
AOIS_744:290:double_geometricPdf(int,double):p => --p
AOIS_745:290:double_geometricPdf(int,double):p => p++
AOIS_746:290:double_geometricPdf(int,double):p => p--
AOIS_747:290:double_geometricPdf(int,double):p => ++p
AOIS_748:290:double_geometricPdf(int,double):p => --p
AOIS_749:290:double_geometricPdf(int,double):p => p++
AOIS_750:290:double_geometricPdf(int,double):p => p--
AOIS_751:290:double_geometricPdf(int,double):k => k++
AOIS_752:290:double_geometricPdf(int,double):k => k--
AOIS_753:298:double_kurtosis(double):i => ++i
AOIS_754:298:double_kurtosis(double):i => --i
AOIS_755:298:double_kurtosis(double):i => i++
AOIS_756:298:double_kurtosis(double):i => i--
AOIS_757:298:double_kurtosis(double):data.length => ++data.length
AOIS_758:298:double_kurtosis(double):data.length => --data.length
AOIS_759:298:double_kurtosis(double):data.length => data.length++
AOIS_760:298:double_kurtosis(double):data.length => data.length--
AOIS_761:299:double_kurtosis(double):i => ++i
AOIS_762:299:double_kurtosis(double):i => --i
AOIS_763:299:double_kurtosis(double):i => i++
AOIS_764:299:double_kurtosis(double):i => i--
AOIS_765:300:double_kurtosis(double):i => ++i
AOIS_766:300:double_kurtosis(double):i => --i
AOIS_767:300:double_kurtosis(double):i => i++
AOIS_768:300:double_kurtosis(double):i => i--
AOIS_769:300:double_kurtosis(double):i => ++i
AOIS_770:300:double_kurtosis(double):i => --i
AOIS_771:300:double_kurtosis(double):i => i++
AOIS_772:300:double_kurtosis(double):i => i--
AOIS_773:302:double_kurtosis(double):sum => ++sum
AOIS_774:302:double_kurtosis(double):sum => --sum
AOIS_775:302:double_kurtosis(double):sum => sum++
AOIS_776:302:double_kurtosis(double):sum => sum--
AOIS_777:302:double_kurtosis(double):data.length => ++data.length
AOIS_778:302:double_kurtosis(double):data.length => --data.length
AOIS_779:302:double_kurtosis(double):data.length => data.length++
AOIS_780:302:double_kurtosis(double):data.length => data.length--
AOIS_781:303:double_kurtosis(double):sumSq => ++sumSq
AOIS_782:303:double_kurtosis(double):sumSq => --sumSq
AOIS_783:303:double_kurtosis(double):sumSq => sumSq++
AOIS_784:303:double_kurtosis(double):sumSq => sumSq--
AOIS_785:303:double_kurtosis(double):mean => ++mean
AOIS_786:303:double_kurtosis(double):mean => --mean
AOIS_787:303:double_kurtosis(double):mean => mean++
AOIS_788:303:double_kurtosis(double):mean => mean--
AOIS_789:303:double_kurtosis(double):sum => ++sum
AOIS_790:303:double_kurtosis(double):sum => --sum
AOIS_791:303:double_kurtosis(double):sum => sum++
AOIS_792:303:double_kurtosis(double):sum => sum--
AOIS_793:303:double_kurtosis(double):data.length => data.length++
AOIS_794:303:double_kurtosis(double):data.length => data.length--
AOIS_795:304:double_kurtosis(double):i => ++i
AOIS_796:304:double_kurtosis(double):i => --i
AOIS_797:304:double_kurtosis(double):i => i++
AOIS_798:304:double_kurtosis(double):i => i--
AOIS_799:304:double_kurtosis(double):data.length => ++data.length
AOIS_800:304:double_kurtosis(double):data.length => --data.length
AOIS_801:304:double_kurtosis(double):data.length => data.length++
AOIS_802:304:double_kurtosis(double):data.length => data.length--
AOIS_803:305:double_kurtosis(double):i => ++i
AOIS_804:305:double_kurtosis(double):i => --i
AOIS_805:305:double_kurtosis(double):i => i++
AOIS_806:305:double_kurtosis(double):i => i--
AOIS_807:305:double_kurtosis(double):mean => ++mean
AOIS_808:305:double_kurtosis(double):mean => --mean
AOIS_809:305:double_kurtosis(double):mean => mean++
AOIS_810:305:double_kurtosis(double):mean => mean--
AOIS_811:307:double_kurtosis(double):sumPD => ++sumPD
AOIS_812:307:double_kurtosis(double):sumPD => --sumPD
AOIS_813:307:double_kurtosis(double):sumPD => sumPD++
AOIS_814:307:double_kurtosis(double):sumPD => sumPD--
AOIS_815:307:double_kurtosis(double):data.length => ++data.length
AOIS_816:307:double_kurtosis(double):data.length => --data.length
AOIS_817:307:double_kurtosis(double):data.length => data.length++
AOIS_818:307:double_kurtosis(double):data.length => data.length--
AOIS_819:308:double_kurtosis(double):moment4 => ++moment4
AOIS_820:308:double_kurtosis(double):moment4 => --moment4
AOIS_821:308:double_kurtosis(double):moment4 => moment4++
AOIS_822:308:double_kurtosis(double):moment4 => moment4--
AOIS_823:308:double_kurtosis(double):standardDeviation => ++standardDeviation
AOIS_824:308:double_kurtosis(double):standardDeviation => --standardDeviation
AOIS_825:308:double_kurtosis(double):standardDeviation => standardDeviation++
AOIS_826:308:double_kurtosis(double):standardDeviation => standardDeviation--
AOIS_827:308:double_kurtosis(double):standardDeviation => ++standardDeviation
AOIS_828:308:double_kurtosis(double):standardDeviation => --standardDeviation
AOIS_829:308:double_kurtosis(double):standardDeviation => standardDeviation++
AOIS_830:308:double_kurtosis(double):standardDeviation => standardDeviation--
AOIS_831:308:double_kurtosis(double):standardDeviation => standardDeviation++
AOIS_832:308:double_kurtosis(double):standardDeviation => standardDeviation--
AOIS_833:308:double_kurtosis(double):standardDeviation => standardDeviation++
AOIS_834:308:double_kurtosis(double):standardDeviation => standardDeviation--
AOIS_835:314:double_logGamma(double):xx => ++xx
AOIS_836:314:double_logGamma(double):xx => --xx
AOIS_837:314:double_logGamma(double):xx => xx++
AOIS_838:314:double_logGamma(double):xx => xx--
AOIS_839:315:double_logGamma(double):x => ++x
AOIS_840:315:double_logGamma(double):x => --x
AOIS_841:315:double_logGamma(double):x => x++
AOIS_842:315:double_logGamma(double):x => x--
AOIS_843:316:double_logGamma(double):x => ++x
AOIS_844:316:double_logGamma(double):x => --x
AOIS_845:316:double_logGamma(double):x => x++
AOIS_846:316:double_logGamma(double):x => x--
AOIS_847:316:double_logGamma(double):tmp => tmp++
AOIS_848:316:double_logGamma(double):tmp => tmp--
AOIS_849:319:double_logGamma(double):j => ++j
AOIS_850:319:double_logGamma(double):j => --j
AOIS_851:319:double_logGamma(double):j => j++
AOIS_852:319:double_logGamma(double):j => j--
AOIS_853:321:double_logGamma(double):j => ++j
AOIS_854:321:double_logGamma(double):j => --j
AOIS_855:321:double_logGamma(double):j => j++
AOIS_856:321:double_logGamma(double):j => j--
AOIS_857:321:double_logGamma(double):x => ++x
AOIS_858:321:double_logGamma(double):x => --x
AOIS_859:321:double_logGamma(double):x => x++
AOIS_860:321:double_logGamma(double):x => x--
AOIS_861:323:double_logGamma(double):ser => ++ser
AOIS_862:323:double_logGamma(double):ser => --ser
AOIS_863:323:double_logGamma(double):ser => ser++
AOIS_864:323:double_logGamma(double):ser => ser--
AOIS_865:329:double_pooledMean(double,double):i => ++i
AOIS_866:329:double_pooledMean(double,double):i => --i
AOIS_867:329:double_pooledMean(double,double):i => i++
AOIS_868:329:double_pooledMean(double,double):i => i--
AOIS_869:329:double_pooledMean(double,double):data1.length => ++data1.length
AOIS_870:329:double_pooledMean(double,double):data1.length => --data1.length
AOIS_871:329:double_pooledMean(double,double):data1.length => data1.length++
AOIS_872:329:double_pooledMean(double,double):data1.length => data1.length--
AOIS_873:330:double_pooledMean(double,double):i => ++i
AOIS_874:330:double_pooledMean(double,double):i => --i
AOIS_875:330:double_pooledMean(double,double):i => i++
AOIS_876:330:double_pooledMean(double,double):i => i--
AOIS_877:332:double_pooledMean(double,double):sum1 => ++sum1
AOIS_878:332:double_pooledMean(double,double):sum1 => --sum1
AOIS_879:332:double_pooledMean(double,double):sum1 => sum1++
AOIS_880:332:double_pooledMean(double,double):sum1 => sum1--
AOIS_881:332:double_pooledMean(double,double):data1.length => ++data1.length
AOIS_882:332:double_pooledMean(double,double):data1.length => --data1.length
AOIS_883:332:double_pooledMean(double,double):data1.length => data1.length++
AOIS_884:332:double_pooledMean(double,double):data1.length => data1.length--
AOIS_885:334:double_pooledMean(double,double):i => ++i
AOIS_886:334:double_pooledMean(double,double):i => --i
AOIS_887:334:double_pooledMean(double,double):i => i++
AOIS_888:334:double_pooledMean(double,double):i => i--
AOIS_889:334:double_pooledMean(double,double):data2.length => ++data2.length
AOIS_890:334:double_pooledMean(double,double):data2.length => --data2.length
AOIS_891:334:double_pooledMean(double,double):data2.length => data2.length++
AOIS_892:334:double_pooledMean(double,double):data2.length => data2.length--
AOIS_893:335:double_pooledMean(double,double):i => ++i
AOIS_894:335:double_pooledMean(double,double):i => --i
AOIS_895:335:double_pooledMean(double,double):i => i++
AOIS_896:335:double_pooledMean(double,double):i => i--
AOIS_897:337:double_pooledMean(double,double):sum2 => ++sum2
AOIS_898:337:double_pooledMean(double,double):sum2 => --sum2
AOIS_899:337:double_pooledMean(double,double):sum2 => sum2++
AOIS_900:337:double_pooledMean(double,double):sum2 => sum2--
AOIS_901:337:double_pooledMean(double,double):data2.length => ++data2.length
AOIS_902:337:double_pooledMean(double,double):data2.length => --data2.length
AOIS_903:337:double_pooledMean(double,double):data2.length => data2.length++
AOIS_904:337:double_pooledMean(double,double):data2.length => data2.length--
AOIS_905:338:double_pooledMean(double,double):data1.length => ++data1.length
AOIS_906:338:double_pooledMean(double,double):data1.length => --data1.length
AOIS_907:338:double_pooledMean(double,double):data1.length => data1.length++
AOIS_908:338:double_pooledMean(double,double):data1.length => data1.length--
AOIS_909:338:double_pooledMean(double,double):mean1 => ++mean1
AOIS_910:338:double_pooledMean(double,double):mean1 => --mean1
AOIS_911:338:double_pooledMean(double,double):mean1 => mean1++
AOIS_912:338:double_pooledMean(double,double):mean1 => mean1--
AOIS_913:338:double_pooledMean(double,double):data2.length => ++data2.length
AOIS_914:338:double_pooledMean(double,double):data2.length => --data2.length
AOIS_915:338:double_pooledMean(double,double):data2.length => data2.length++
AOIS_916:338:double_pooledMean(double,double):data2.length => data2.length--
AOIS_917:338:double_pooledMean(double,double):mean2 => ++mean2
AOIS_918:338:double_pooledMean(double,double):mean2 => --mean2
AOIS_919:338:double_pooledMean(double,double):mean2 => mean2++
AOIS_920:338:double_pooledMean(double,double):mean2 => mean2--
AOIS_921:338:double_pooledMean(double,double):data1.length => ++data1.length
AOIS_922:338:double_pooledMean(double,double):data1.length => --data1.length
AOIS_923:338:double_pooledMean(double,double):data1.length => data1.length++
AOIS_924:338:double_pooledMean(double,double):data1.length => data1.length--
AOIS_925:338:double_pooledMean(double,double):data2.length => ++data2.length
AOIS_926:338:double_pooledMean(double,double):data2.length => --data2.length
AOIS_927:338:double_pooledMean(double,double):data2.length => data2.length++
AOIS_928:338:double_pooledMean(double,double):data2.length => data2.length--
AOIS_929:345:double_pooledVariance(double,double):i => ++i
AOIS_930:345:double_pooledVariance(double,double):i => --i
AOIS_931:345:double_pooledVariance(double,double):i => i++
AOIS_932:345:double_pooledVariance(double,double):i => i--
AOIS_933:345:double_pooledVariance(double,double):data1.length => ++data1.length
AOIS_934:345:double_pooledVariance(double,double):data1.length => --data1.length
AOIS_935:345:double_pooledVariance(double,double):data1.length => data1.length++
AOIS_936:345:double_pooledVariance(double,double):data1.length => data1.length--
AOIS_937:346:double_pooledVariance(double,double):i => ++i
AOIS_938:346:double_pooledVariance(double,double):i => --i
AOIS_939:346:double_pooledVariance(double,double):i => i++
AOIS_940:346:double_pooledVariance(double,double):i => i--
AOIS_941:347:double_pooledVariance(double,double):i => ++i
AOIS_942:347:double_pooledVariance(double,double):i => --i
AOIS_943:347:double_pooledVariance(double,double):i => i++
AOIS_944:347:double_pooledVariance(double,double):i => i--
AOIS_945:347:double_pooledVariance(double,double):i => ++i
AOIS_946:347:double_pooledVariance(double,double):i => --i
AOIS_947:347:double_pooledVariance(double,double):i => i++
AOIS_948:347:double_pooledVariance(double,double):i => i--
AOIS_949:349:double_pooledVariance(double,double):sum1 => ++sum1
AOIS_950:349:double_pooledVariance(double,double):sum1 => --sum1
AOIS_951:349:double_pooledVariance(double,double):sum1 => sum1++
AOIS_952:349:double_pooledVariance(double,double):sum1 => sum1--
AOIS_953:349:double_pooledVariance(double,double):data1.length => ++data1.length
AOIS_954:349:double_pooledVariance(double,double):data1.length => --data1.length
AOIS_955:349:double_pooledVariance(double,double):data1.length => data1.length++
AOIS_956:349:double_pooledVariance(double,double):data1.length => data1.length--
AOIS_957:350:double_pooledVariance(double,double):sumSq1 => ++sumSq1
AOIS_958:350:double_pooledVariance(double,double):sumSq1 => --sumSq1
AOIS_959:350:double_pooledVariance(double,double):sumSq1 => sumSq1++
AOIS_960:350:double_pooledVariance(double,double):sumSq1 => sumSq1--
AOIS_961:350:double_pooledVariance(double,double):mean1 => ++mean1
AOIS_962:350:double_pooledVariance(double,double):mean1 => --mean1
AOIS_963:350:double_pooledVariance(double,double):mean1 => mean1++
AOIS_964:350:double_pooledVariance(double,double):mean1 => mean1--
AOIS_965:350:double_pooledVariance(double,double):sum1 => ++sum1
AOIS_966:350:double_pooledVariance(double,double):sum1 => --sum1
AOIS_967:350:double_pooledVariance(double,double):sum1 => sum1++
AOIS_968:350:double_pooledVariance(double,double):sum1 => sum1--
AOIS_969:350:double_pooledVariance(double,double):data1.length => data1.length++
AOIS_970:350:double_pooledVariance(double,double):data1.length => data1.length--
AOIS_971:353:double_pooledVariance(double,double):i => ++i
AOIS_972:353:double_pooledVariance(double,double):i => --i
AOIS_973:353:double_pooledVariance(double,double):i => i++
AOIS_974:353:double_pooledVariance(double,double):i => i--
AOIS_975:353:double_pooledVariance(double,double):data2.length => ++data2.length
AOIS_976:353:double_pooledVariance(double,double):data2.length => --data2.length
AOIS_977:353:double_pooledVariance(double,double):data2.length => data2.length++
AOIS_978:353:double_pooledVariance(double,double):data2.length => data2.length--
AOIS_979:354:double_pooledVariance(double,double):i => ++i
AOIS_980:354:double_pooledVariance(double,double):i => --i
AOIS_981:354:double_pooledVariance(double,double):i => i++
AOIS_982:354:double_pooledVariance(double,double):i => i--
AOIS_983:355:double_pooledVariance(double,double):i => ++i
AOIS_984:355:double_pooledVariance(double,double):i => --i
AOIS_985:355:double_pooledVariance(double,double):i => i++
AOIS_986:355:double_pooledVariance(double,double):i => i--
AOIS_987:355:double_pooledVariance(double,double):i => ++i
AOIS_988:355:double_pooledVariance(double,double):i => --i
AOIS_989:355:double_pooledVariance(double,double):i => i++
AOIS_990:355:double_pooledVariance(double,double):i => i--
AOIS_991:357:double_pooledVariance(double,double):sum2 => ++sum2
AOIS_992:357:double_pooledVariance(double,double):sum2 => --sum2
AOIS_993:357:double_pooledVariance(double,double):sum2 => sum2++
AOIS_994:357:double_pooledVariance(double,double):sum2 => sum2--
AOIS_995:357:double_pooledVariance(double,double):data2.length => ++data2.length
AOIS_996:357:double_pooledVariance(double,double):data2.length => --data2.length
AOIS_997:357:double_pooledVariance(double,double):data2.length => data2.length++
AOIS_998:357:double_pooledVariance(double,double):data2.length => data2.length--
AOIS_999:358:double_pooledVariance(double,double):sumSq2 => ++sumSq2
AOIS_1000:358:double_pooledVariance(double,double):sumSq2 => --sumSq2
AOIS_1001:358:double_pooledVariance(double,double):sumSq2 => sumSq2++
AOIS_1002:358:double_pooledVariance(double,double):sumSq2 => sumSq2--
AOIS_1003:358:double_pooledVariance(double,double):mean2 => ++mean2
AOIS_1004:358:double_pooledVariance(double,double):mean2 => --mean2
AOIS_1005:358:double_pooledVariance(double,double):mean2 => mean2++
AOIS_1006:358:double_pooledVariance(double,double):mean2 => mean2--
AOIS_1007:358:double_pooledVariance(double,double):sum2 => ++sum2
AOIS_1008:358:double_pooledVariance(double,double):sum2 => --sum2
AOIS_1009:358:double_pooledVariance(double,double):sum2 => sum2++
AOIS_1010:358:double_pooledVariance(double,double):sum2 => sum2--
AOIS_1011:358:double_pooledVariance(double,double):data2.length => data2.length++
AOIS_1012:358:double_pooledVariance(double,double):data2.length => data2.length--
AOIS_1013:359:double_pooledVariance(double,double):data1.length => ++data1.length
AOIS_1014:359:double_pooledVariance(double,double):data1.length => --data1.length
AOIS_1015:359:double_pooledVariance(double,double):data1.length => data1.length++
AOIS_1016:359:double_pooledVariance(double,double):data1.length => data1.length--
AOIS_1017:359:double_pooledVariance(double,double):var1 => ++var1
AOIS_1018:359:double_pooledVariance(double,double):var1 => --var1
AOIS_1019:359:double_pooledVariance(double,double):var1 => var1++
AOIS_1020:359:double_pooledVariance(double,double):var1 => var1--
AOIS_1021:359:double_pooledVariance(double,double):data2.length => ++data2.length
AOIS_1022:359:double_pooledVariance(double,double):data2.length => --data2.length
AOIS_1023:359:double_pooledVariance(double,double):data2.length => data2.length++
AOIS_1024:359:double_pooledVariance(double,double):data2.length => data2.length--
AOIS_1025:359:double_pooledVariance(double,double):var2 => ++var2
AOIS_1026:359:double_pooledVariance(double,double):var2 => --var2
AOIS_1027:359:double_pooledVariance(double,double):var2 => var2++
AOIS_1028:359:double_pooledVariance(double,double):var2 => var2--
AOIS_1029:359:double_pooledVariance(double,double):data1.length => ++data1.length
AOIS_1030:359:double_pooledVariance(double,double):data1.length => --data1.length
AOIS_1031:359:double_pooledVariance(double,double):data1.length => data1.length++
AOIS_1032:359:double_pooledVariance(double,double):data1.length => data1.length--
AOIS_1033:359:double_pooledVariance(double,double):data2.length => ++data2.length
AOIS_1034:359:double_pooledVariance(double,double):data2.length => --data2.length
AOIS_1035:359:double_pooledVariance(double,double):data2.length => data2.length++
AOIS_1036:359:double_pooledVariance(double,double):data2.length => data2.length--
AOIS_1037:367:double_polevl(double,double,int):i => ++i
AOIS_1038:367:double_polevl(double,double,int):i => --i
AOIS_1039:367:double_polevl(double,double,int):i => i++
AOIS_1040:367:double_polevl(double,double,int):i => i--
AOIS_1041:367:double_polevl(double,double,int):N => ++N
AOIS_1042:367:double_polevl(double,double,int):N => --N
AOIS_1043:367:double_polevl(double,double,int):N => N++
AOIS_1044:367:double_polevl(double,double,int):N => N--
AOIS_1045:368:double_polevl(double,double,int):ans => ++ans
AOIS_1046:368:double_polevl(double,double,int):ans => --ans
AOIS_1047:368:double_polevl(double,double,int):ans => ans++
AOIS_1048:368:double_polevl(double,double,int):ans => ans--
AOIS_1049:368:double_polevl(double,double,int):x => ++x
AOIS_1050:368:double_polevl(double,double,int):x => --x
AOIS_1051:368:double_polevl(double,double,int):x => x++
AOIS_1052:368:double_polevl(double,double,int):x => x--
AOIS_1053:368:double_polevl(double,double,int):i => i++
AOIS_1054:368:double_polevl(double,double,int):i => i--
AOIS_1055:370:double_polevl(double,double,int):ans => ans++
AOIS_1056:370:double_polevl(double,double,int):ans => ans--
AOIS_1057:375:double_rankInterpolated(double,double,int):index => ++index
AOIS_1058:375:double_rankInterpolated(double,double,int):index => --index
AOIS_1059:375:double_rankInterpolated(double,double,int):index => index++
AOIS_1060:375:double_rankInterpolated(double,double,int):index => index--
AOIS_1061:376:double_rankInterpolated(double,double,int):index => ++index
AOIS_1062:376:double_rankInterpolated(double,double,int):index => --index
AOIS_1063:376:double_rankInterpolated(double,double,int):index => index++
AOIS_1064:376:double_rankInterpolated(double,double,int):index => index--
AOIS_1065:377:double_rankInterpolated(double,double,int):sortedList.length => sortedList.length++
AOIS_1066:377:double_rankInterpolated(double,double,int):sortedList.length => sortedList.length--
AOIS_1067:378:double_rankInterpolated(double,double,int):to => ++to
AOIS_1068:378:double_rankInterpolated(double,double,int):to => --to
AOIS_1069:378:double_rankInterpolated(double,double,int):to => to++
AOIS_1070:378:double_rankInterpolated(double,double,int):to => to--
AOIS_1071:378:double_rankInterpolated(double,double,int):s => ++s
AOIS_1072:378:double_rankInterpolated(double,double,int):s => --s
AOIS_1073:378:double_rankInterpolated(double,double,int):s => s++
AOIS_1074:378:double_rankInterpolated(double,double,int):s => s--
AOIS_1075:378:double_rankInterpolated(double,double,int):to => ++to
AOIS_1076:378:double_rankInterpolated(double,double,int):to => --to
AOIS_1077:378:double_rankInterpolated(double,double,int):to => to++
AOIS_1078:378:double_rankInterpolated(double,double,int):to => to--
AOIS_1079:378:double_rankInterpolated(double,double,int):element => ++element
AOIS_1080:378:double_rankInterpolated(double,double,int):element => --element
AOIS_1081:378:double_rankInterpolated(double,double,int):element => element++
AOIS_1082:378:double_rankInterpolated(double,double,int):element => element--
AOIS_1083:381:double_rankInterpolated(double,double,int):to => to++
AOIS_1084:381:double_rankInterpolated(double,double,int):to => to--
AOIS_1085:384:double_rankInterpolated(double,double,int):insertionPoint => ++insertionPoint
AOIS_1086:384:double_rankInterpolated(double,double,int):insertionPoint => --insertionPoint
AOIS_1087:384:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint++
AOIS_1088:384:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint--
AOIS_1089:384:double_rankInterpolated(double,double,int):insertionPoint => ++insertionPoint
AOIS_1090:384:double_rankInterpolated(double,double,int):insertionPoint => --insertionPoint
AOIS_1091:384:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint++
AOIS_1092:384:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint--
AOIS_1093:384:double_rankInterpolated(double,double,int):sortedList.length => ++sortedList.length
AOIS_1094:384:double_rankInterpolated(double,double,int):sortedList.length => --sortedList.length
AOIS_1095:384:double_rankInterpolated(double,double,int):sortedList.length => sortedList.length++
AOIS_1096:384:double_rankInterpolated(double,double,int):sortedList.length => sortedList.length--
AOIS_1097:385:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint++
AOIS_1098:385:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint--
AOIS_1099:387:double_rankInterpolated(double,double,int):insertionPoint => ++insertionPoint
AOIS_1100:387:double_rankInterpolated(double,double,int):insertionPoint => --insertionPoint
AOIS_1101:387:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint++
AOIS_1102:387:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint--
AOIS_1103:388:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint++
AOIS_1104:388:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint--
AOIS_1105:389:double_rankInterpolated(double,double,int):element => ++element
AOIS_1106:389:double_rankInterpolated(double,double,int):element => --element
AOIS_1107:389:double_rankInterpolated(double,double,int):element => element++
AOIS_1108:389:double_rankInterpolated(double,double,int):element => element--
AOIS_1109:389:double_rankInterpolated(double,double,int):from => ++from
AOIS_1110:389:double_rankInterpolated(double,double,int):from => --from
AOIS_1111:389:double_rankInterpolated(double,double,int):from => from++
AOIS_1112:389:double_rankInterpolated(double,double,int):from => from--
AOIS_1113:389:double_rankInterpolated(double,double,int):to => ++to
AOIS_1114:389:double_rankInterpolated(double,double,int):to => --to
AOIS_1115:389:double_rankInterpolated(double,double,int):to => to++
AOIS_1116:389:double_rankInterpolated(double,double,int):to => to--
AOIS_1117:389:double_rankInterpolated(double,double,int):from => ++from
AOIS_1118:389:double_rankInterpolated(double,double,int):from => --from
AOIS_1119:389:double_rankInterpolated(double,double,int):from => from++
AOIS_1120:389:double_rankInterpolated(double,double,int):from => from--
AOIS_1121:390:double_rankInterpolated(double,double,int):insertionPoint => ++insertionPoint
AOIS_1122:390:double_rankInterpolated(double,double,int):insertionPoint => --insertionPoint
AOIS_1123:390:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint++
AOIS_1124:390:double_rankInterpolated(double,double,int):insertionPoint => insertionPoint--
AOIS_1125:390:double_rankInterpolated(double,double,int):delta => ++delta
AOIS_1126:390:double_rankInterpolated(double,double,int):delta => --delta
AOIS_1127:390:double_rankInterpolated(double,double,int):delta => delta++
AOIS_1128:390:double_rankInterpolated(double,double,int):delta => delta--
AOIS_1129:398:double_sampleWeightedVariance(double,double):i => ++i
AOIS_1130:398:double_sampleWeightedVariance(double,double):i => --i
AOIS_1131:398:double_sampleWeightedVariance(double,double):i => i++
AOIS_1132:398:double_sampleWeightedVariance(double,double):i => i--
AOIS_1133:398:double_sampleWeightedVariance(double,double):data.length => ++data.length
AOIS_1134:398:double_sampleWeightedVariance(double,double):data.length => --data.length
AOIS_1135:398:double_sampleWeightedVariance(double,double):data.length => data.length++
AOIS_1136:398:double_sampleWeightedVariance(double,double):data.length => data.length--
AOIS_1137:399:double_sampleWeightedVariance(double,double):i => ++i
AOIS_1138:399:double_sampleWeightedVariance(double,double):i => --i
AOIS_1139:399:double_sampleWeightedVariance(double,double):i => i++
AOIS_1140:399:double_sampleWeightedVariance(double,double):i => i--
AOIS_1141:400:double_sampleWeightedVariance(double,double):i => ++i
AOIS_1142:400:double_sampleWeightedVariance(double,double):i => --i
AOIS_1143:400:double_sampleWeightedVariance(double,double):i => i++
AOIS_1144:400:double_sampleWeightedVariance(double,double):i => i--
AOIS_1145:400:double_sampleWeightedVariance(double,double):i => ++i
AOIS_1146:400:double_sampleWeightedVariance(double,double):i => --i
AOIS_1147:400:double_sampleWeightedVariance(double,double):i => i++
AOIS_1148:400:double_sampleWeightedVariance(double,double):i => i--
AOIS_1149:401:double_sampleWeightedVariance(double,double):i => ++i
AOIS_1150:401:double_sampleWeightedVariance(double,double):i => --i
AOIS_1151:401:double_sampleWeightedVariance(double,double):i => i++
AOIS_1152:401:double_sampleWeightedVariance(double,double):i => i--
AOIS_1153:401:double_sampleWeightedVariance(double,double):i => ++i
AOIS_1154:401:double_sampleWeightedVariance(double,double):i => --i
AOIS_1155:401:double_sampleWeightedVariance(double,double):i => i++
AOIS_1156:401:double_sampleWeightedVariance(double,double):i => i--
AOIS_1157:401:double_sampleWeightedVariance(double,double):i => i++
AOIS_1158:401:double_sampleWeightedVariance(double,double):i => i--
AOIS_1159:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts => ++sumOfSquaredProducts
AOIS_1160:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts => --sumOfSquaredProducts
AOIS_1161:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts => sumOfSquaredProducts++
AOIS_1162:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts => sumOfSquaredProducts--
AOIS_1163:403:double_sampleWeightedVariance(double,double):sumOfProducts => ++sumOfProducts
AOIS_1164:403:double_sampleWeightedVariance(double,double):sumOfProducts => --sumOfProducts
AOIS_1165:403:double_sampleWeightedVariance(double,double):sumOfProducts => sumOfProducts++
AOIS_1166:403:double_sampleWeightedVariance(double,double):sumOfProducts => sumOfProducts--
AOIS_1167:403:double_sampleWeightedVariance(double,double):sumOfProducts => ++sumOfProducts
AOIS_1168:403:double_sampleWeightedVariance(double,double):sumOfProducts => --sumOfProducts
AOIS_1169:403:double_sampleWeightedVariance(double,double):sumOfProducts => sumOfProducts++
AOIS_1170:403:double_sampleWeightedVariance(double,double):sumOfProducts => sumOfProducts--
AOIS_1171:403:double_sampleWeightedVariance(double,double):sumOfWeights => sumOfWeights++
AOIS_1172:403:double_sampleWeightedVariance(double,double):sumOfWeights => sumOfWeights--
AOIS_1173:403:double_sampleWeightedVariance(double,double):sumOfWeights => ++sumOfWeights
AOIS_1174:403:double_sampleWeightedVariance(double,double):sumOfWeights => --sumOfWeights
AOIS_1175:403:double_sampleWeightedVariance(double,double):sumOfWeights => sumOfWeights++
AOIS_1176:403:double_sampleWeightedVariance(double,double):sumOfWeights => sumOfWeights--
AOIS_1177:411:double_skew(double):i => ++i
AOIS_1178:411:double_skew(double):i => --i
AOIS_1179:411:double_skew(double):i => i++
AOIS_1180:411:double_skew(double):i => i--
AOIS_1181:411:double_skew(double):data.length => ++data.length
AOIS_1182:411:double_skew(double):data.length => --data.length
AOIS_1183:411:double_skew(double):data.length => data.length++
AOIS_1184:411:double_skew(double):data.length => data.length--
AOIS_1185:412:double_skew(double):i => ++i
AOIS_1186:412:double_skew(double):i => --i
AOIS_1187:412:double_skew(double):i => i++
AOIS_1188:412:double_skew(double):i => i--
AOIS_1189:413:double_skew(double):i => ++i
AOIS_1190:413:double_skew(double):i => --i
AOIS_1191:413:double_skew(double):i => i++
AOIS_1192:413:double_skew(double):i => i--
AOIS_1193:413:double_skew(double):i => ++i
AOIS_1194:413:double_skew(double):i => --i
AOIS_1195:413:double_skew(double):i => i++
AOIS_1196:413:double_skew(double):i => i--
AOIS_1197:415:double_skew(double):sum => ++sum
AOIS_1198:415:double_skew(double):sum => --sum
AOIS_1199:415:double_skew(double):sum => sum++
AOIS_1200:415:double_skew(double):sum => sum--
AOIS_1201:415:double_skew(double):data.length => ++data.length
AOIS_1202:415:double_skew(double):data.length => --data.length
AOIS_1203:415:double_skew(double):data.length => data.length++
AOIS_1204:415:double_skew(double):data.length => data.length--
AOIS_1205:416:double_skew(double):sumSq => ++sumSq
AOIS_1206:416:double_skew(double):sumSq => --sumSq
AOIS_1207:416:double_skew(double):sumSq => sumSq++
AOIS_1208:416:double_skew(double):sumSq => sumSq--
AOIS_1209:416:double_skew(double):mean => ++mean
AOIS_1210:416:double_skew(double):mean => --mean
AOIS_1211:416:double_skew(double):mean => mean++
AOIS_1212:416:double_skew(double):mean => mean--
AOIS_1213:416:double_skew(double):sum => ++sum
AOIS_1214:416:double_skew(double):sum => --sum
AOIS_1215:416:double_skew(double):sum => sum++
AOIS_1216:416:double_skew(double):sum => sum--
AOIS_1217:416:double_skew(double):data.length => data.length++
AOIS_1218:416:double_skew(double):data.length => data.length--
AOIS_1219:417:double_skew(double):i => ++i
AOIS_1220:417:double_skew(double):i => --i
AOIS_1221:417:double_skew(double):i => i++
AOIS_1222:417:double_skew(double):i => i--
AOIS_1223:417:double_skew(double):data.length => ++data.length
AOIS_1224:417:double_skew(double):data.length => --data.length
AOIS_1225:417:double_skew(double):data.length => data.length++
AOIS_1226:417:double_skew(double):data.length => data.length--
AOIS_1227:418:double_skew(double):i => ++i
AOIS_1228:418:double_skew(double):i => --i
AOIS_1229:418:double_skew(double):i => i++
AOIS_1230:418:double_skew(double):i => i--
AOIS_1231:418:double_skew(double):mean => ++mean
AOIS_1232:418:double_skew(double):mean => --mean
AOIS_1233:418:double_skew(double):mean => mean++
AOIS_1234:418:double_skew(double):mean => mean--
AOIS_1235:420:double_skew(double):sumPD => ++sumPD
AOIS_1236:420:double_skew(double):sumPD => --sumPD
AOIS_1237:420:double_skew(double):sumPD => sumPD++
AOIS_1238:420:double_skew(double):sumPD => sumPD--
AOIS_1239:420:double_skew(double):data.length => ++data.length
AOIS_1240:420:double_skew(double):data.length => --data.length
AOIS_1241:420:double_skew(double):data.length => data.length++
AOIS_1242:420:double_skew(double):data.length => data.length--
AOIS_1243:421:double_skew(double):moment3 => ++moment3
AOIS_1244:421:double_skew(double):moment3 => --moment3
AOIS_1245:421:double_skew(double):moment3 => moment3++
AOIS_1246:421:double_skew(double):moment3 => moment3--
AOIS_1247:421:double_skew(double):standardDeviation => ++standardDeviation
AOIS_1248:421:double_skew(double):standardDeviation => --standardDeviation
AOIS_1249:421:double_skew(double):standardDeviation => standardDeviation++
AOIS_1250:421:double_skew(double):standardDeviation => standardDeviation--
AOIS_1251:421:double_skew(double):standardDeviation => ++standardDeviation
AOIS_1252:421:double_skew(double):standardDeviation => --standardDeviation
AOIS_1253:421:double_skew(double):standardDeviation => standardDeviation++
AOIS_1254:421:double_skew(double):standardDeviation => standardDeviation--
AOIS_1255:421:double_skew(double):standardDeviation => standardDeviation++
AOIS_1256:421:double_skew(double):standardDeviation => standardDeviation--
AOIS_1257:428:double_standardize(double):i => ++i
AOIS_1258:428:double_standardize(double):i => --i
AOIS_1259:428:double_standardize(double):i => i++
AOIS_1260:428:double_standardize(double):i => i--
AOIS_1261:428:double_standardize(double):data.length => ++data.length
AOIS_1262:428:double_standardize(double):data.length => --data.length
AOIS_1263:428:double_standardize(double):data.length => data.length++
AOIS_1264:428:double_standardize(double):data.length => data.length--
AOIS_1265:429:double_standardize(double):i => ++i
AOIS_1266:429:double_standardize(double):i => --i
AOIS_1267:429:double_standardize(double):i => i++
AOIS_1268:429:double_standardize(double):i => i--
AOIS_1269:430:double_standardize(double):i => ++i
AOIS_1270:430:double_standardize(double):i => --i
AOIS_1271:430:double_standardize(double):i => i++
AOIS_1272:430:double_standardize(double):i => i--
AOIS_1273:430:double_standardize(double):i => ++i
AOIS_1274:430:double_standardize(double):i => --i
AOIS_1275:430:double_standardize(double):i => i++
AOIS_1276:430:double_standardize(double):i => i--
AOIS_1277:432:double_standardize(double):sum => ++sum
AOIS_1278:432:double_standardize(double):sum => --sum
AOIS_1279:432:double_standardize(double):sum => sum++
AOIS_1280:432:double_standardize(double):sum => sum--
AOIS_1281:432:double_standardize(double):data.length => ++data.length
AOIS_1282:432:double_standardize(double):data.length => --data.length
AOIS_1283:432:double_standardize(double):data.length => data.length++
AOIS_1284:432:double_standardize(double):data.length => data.length--
AOIS_1285:433:double_standardize(double):sumSq => ++sumSq
AOIS_1286:433:double_standardize(double):sumSq => --sumSq
AOIS_1287:433:double_standardize(double):sumSq => sumSq++
AOIS_1288:433:double_standardize(double):sumSq => sumSq--
AOIS_1289:433:double_standardize(double):mean => ++mean
AOIS_1290:433:double_standardize(double):mean => --mean
AOIS_1291:433:double_standardize(double):mean => mean++
AOIS_1292:433:double_standardize(double):mean => mean--
AOIS_1293:433:double_standardize(double):sum => ++sum
AOIS_1294:433:double_standardize(double):sum => --sum
AOIS_1295:433:double_standardize(double):sum => sum++
AOIS_1296:433:double_standardize(double):sum => sum--
AOIS_1297:433:double_standardize(double):data.length => data.length++
AOIS_1298:433:double_standardize(double):data.length => data.length--
AOIS_1299:434:double_standardize(double):i => ++i
AOIS_1300:434:double_standardize(double):i => --i
AOIS_1301:434:double_standardize(double):i => i++
AOIS_1302:434:double_standardize(double):i => i--
AOIS_1303:434:double_standardize(double):data.length => ++data.length
AOIS_1304:434:double_standardize(double):data.length => --data.length
AOIS_1305:434:double_standardize(double):data.length => data.length++
AOIS_1306:434:double_standardize(double):data.length => data.length--
AOIS_1307:435:double_standardize(double):i => ++i
AOIS_1308:435:double_standardize(double):i => --i
AOIS_1309:435:double_standardize(double):i => i++
AOIS_1310:435:double_standardize(double):i => i--
AOIS_1311:435:double_standardize(double):mean => ++mean
AOIS_1312:435:double_standardize(double):mean => --mean
AOIS_1313:435:double_standardize(double):mean => mean++
AOIS_1314:435:double_standardize(double):mean => mean--
AOIS_1315:435:double_standardize(double):sd => sd++
AOIS_1316:435:double_standardize(double):sd => sd--
AOIS_1317:444:double_weightedRMS(double,double):i => ++i
AOIS_1318:444:double_weightedRMS(double,double):i => --i
AOIS_1319:444:double_weightedRMS(double,double):i => i++
AOIS_1320:444:double_weightedRMS(double,double):i => i--
AOIS_1321:444:double_weightedRMS(double,double):data.length => ++data.length
AOIS_1322:444:double_weightedRMS(double,double):data.length => --data.length
AOIS_1323:444:double_weightedRMS(double,double):data.length => data.length++
AOIS_1324:444:double_weightedRMS(double,double):data.length => data.length--
AOIS_1325:445:double_weightedRMS(double,double):i => ++i
AOIS_1326:445:double_weightedRMS(double,double):i => --i
AOIS_1327:445:double_weightedRMS(double,double):i => i++
AOIS_1328:445:double_weightedRMS(double,double):i => i--
AOIS_1329:445:double_weightedRMS(double,double):i => ++i
AOIS_1330:445:double_weightedRMS(double,double):i => --i
AOIS_1331:445:double_weightedRMS(double,double):i => i++
AOIS_1332:445:double_weightedRMS(double,double):i => i--
AOIS_1333:446:double_weightedRMS(double,double):i => ++i
AOIS_1334:446:double_weightedRMS(double,double):i => --i
AOIS_1335:446:double_weightedRMS(double,double):i => i++
AOIS_1336:446:double_weightedRMS(double,double):i => i--
AOIS_1337:446:double_weightedRMS(double,double):i => ++i
AOIS_1338:446:double_weightedRMS(double,double):i => --i
AOIS_1339:446:double_weightedRMS(double,double):i => i++
AOIS_1340:446:double_weightedRMS(double,double):i => i--
AOIS_1341:446:double_weightedRMS(double,double):i => i++
AOIS_1342:446:double_weightedRMS(double,double):i => i--
AOIS_1343:448:double_weightedRMS(double,double):sumOfProducts => ++sumOfProducts
AOIS_1344:448:double_weightedRMS(double,double):sumOfProducts => --sumOfProducts
AOIS_1345:448:double_weightedRMS(double,double):sumOfProducts => sumOfProducts++
AOIS_1346:448:double_weightedRMS(double,double):sumOfProducts => sumOfProducts--
AOIS_1347:448:double_weightedRMS(double,double):sumOfSquaredProducts => ++sumOfSquaredProducts
AOIS_1348:448:double_weightedRMS(double,double):sumOfSquaredProducts => --sumOfSquaredProducts
AOIS_1349:448:double_weightedRMS(double,double):sumOfSquaredProducts => sumOfSquaredProducts++
AOIS_1350:448:double_weightedRMS(double,double):sumOfSquaredProducts => sumOfSquaredProducts--
AOIS_1351:454:double_harmonicMean(double):i => ++i
AOIS_1352:454:double_harmonicMean(double):i => --i
AOIS_1353:454:double_harmonicMean(double):i => i++
AOIS_1354:454:double_harmonicMean(double):i => i--
AOIS_1355:454:double_harmonicMean(double):data.length => ++data.length
AOIS_1356:454:double_harmonicMean(double):data.length => --data.length
AOIS_1357:454:double_harmonicMean(double):data.length => data.length++
AOIS_1358:454:double_harmonicMean(double):data.length => data.length--
AOIS_1359:455:double_harmonicMean(double):i => ++i
AOIS_1360:455:double_harmonicMean(double):i => --i
AOIS_1361:455:double_harmonicMean(double):i => i++
AOIS_1362:455:double_harmonicMean(double):i => i--
AOIS_1363:457:double_harmonicMean(double):data.length => ++data.length
AOIS_1364:457:double_harmonicMean(double):data.length => --data.length
AOIS_1365:457:double_harmonicMean(double):data.length => data.length++
AOIS_1366:457:double_harmonicMean(double):data.length => data.length--
AOIS_1367:457:double_harmonicMean(double):sumOfInversions => ++sumOfInversions
AOIS_1368:457:double_harmonicMean(double):sumOfInversions => --sumOfInversions
AOIS_1369:457:double_harmonicMean(double):sumOfInversions => sumOfInversions++
AOIS_1370:457:double_harmonicMean(double):sumOfInversions => sumOfInversions--
AOIS_1371:463:double_sumOfPowerOfDeviations(double,int,double):i => ++i
AOIS_1372:463:double_sumOfPowerOfDeviations(double,int,double):i => --i
AOIS_1373:463:double_sumOfPowerOfDeviations(double,int,double):i => i++
AOIS_1374:463:double_sumOfPowerOfDeviations(double,int,double):i => i--
AOIS_1375:463:double_sumOfPowerOfDeviations(double,int,double):data.length => ++data.length
AOIS_1376:463:double_sumOfPowerOfDeviations(double,int,double):data.length => --data.length
AOIS_1377:463:double_sumOfPowerOfDeviations(double,int,double):data.length => data.length++
AOIS_1378:463:double_sumOfPowerOfDeviations(double,int,double):data.length => data.length--
AOIS_1379:464:double_sumOfPowerOfDeviations(double,int,double):i => ++i
AOIS_1380:464:double_sumOfPowerOfDeviations(double,int,double):i => --i
AOIS_1381:464:double_sumOfPowerOfDeviations(double,int,double):i => i++
AOIS_1382:464:double_sumOfPowerOfDeviations(double,int,double):i => i--
AOIS_1383:464:double_sumOfPowerOfDeviations(double,int,double):c => ++c
AOIS_1384:464:double_sumOfPowerOfDeviations(double,int,double):c => --c
AOIS_1385:464:double_sumOfPowerOfDeviations(double,int,double):c => c++
AOIS_1386:464:double_sumOfPowerOfDeviations(double,int,double):c => c--
AOIS_1387:464:double_sumOfPowerOfDeviations(double,int,double):k => k++
AOIS_1388:464:double_sumOfPowerOfDeviations(double,int,double):k => k--
AOIS_1389:466:double_sumOfPowerOfDeviations(double,int,double):sum => sum++
AOIS_1390:466:double_sumOfPowerOfDeviations(double,int,double):sum => sum--
AOIS_1391:471:double_power(double,int):i => ++i
AOIS_1392:471:double_power(double,int):i => --i
AOIS_1393:471:double_power(double,int):i => i++
AOIS_1394:471:double_power(double,int):i => i--
AOIS_1395:471:double_power(double,int):data.length => ++data.length
AOIS_1396:471:double_power(double,int):data.length => --data.length
AOIS_1397:471:double_power(double,int):data.length => data.length++
AOIS_1398:471:double_power(double,int):data.length => data.length--
AOIS_1399:472:double_power(double,int):i => ++i
AOIS_1400:472:double_power(double,int):i => --i
AOIS_1401:472:double_power(double,int):i => i++
AOIS_1402:472:double_power(double,int):i => i--
AOIS_1403:472:double_power(double,int):k => ++k
AOIS_1404:472:double_power(double,int):k => --k
AOIS_1405:472:double_power(double,int):k => k++
AOIS_1406:472:double_power(double,int):k => k--
AOIS_1407:479:double_square(double):i => ++i
AOIS_1408:479:double_square(double):i => --i
AOIS_1409:479:double_square(double):i => i++
AOIS_1410:479:double_square(double):i => i--
AOIS_1411:479:double_square(double):data.length => ++data.length
AOIS_1412:479:double_square(double):data.length => --data.length
AOIS_1413:479:double_square(double):data.length => data.length++
AOIS_1414:479:double_square(double):data.length => data.length--
AOIS_1415:480:double_square(double):i => ++i
AOIS_1416:480:double_square(double):i => --i
AOIS_1417:480:double_square(double):i => i++
AOIS_1418:480:double_square(double):i => i--
AOIS_1419:480:double_square(double):i => ++i
AOIS_1420:480:double_square(double):i => --i
AOIS_1421:480:double_square(double):i => i++
AOIS_1422:480:double_square(double):i => i--
ROR_1:20:double_autoCorrelation(double,int,double,double): i < N  =>   i > N
ROR_2:20:double_autoCorrelation(double,int,double,double): i < N  =>   i >= N
ROR_3:20:double_autoCorrelation(double,int,double,double): i < N  =>   i <= N
ROR_4:20:double_autoCorrelation(double,int,double,double): i < N  =>   i == N
ROR_5:20:double_autoCorrelation(double,int,double,double): i < N  =>   i != N
ROR_6:20:double_autoCorrelation(double,int,double,double): i < N  =>   true
ROR_7:20:double_autoCorrelation(double,int,double,double): i < N  =>   false
ROR_8:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   low > high
ROR_9:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   low >= high
ROR_10:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   low < high
ROR_11:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   low == high
ROR_12:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   low != high
ROR_13:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   true
ROR_14:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>   false
ROR_15:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   midVal > key
ROR_16:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   midVal >= key
ROR_17:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   midVal <= key
ROR_18:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   midVal == key
ROR_19:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   midVal != key
ROR_20:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   true
ROR_21:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>   false
ROR_22:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   midVal >= key
ROR_23:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   midVal < key
ROR_24:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   midVal <= key
ROR_25:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   midVal == key
ROR_26:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   midVal != key
ROR_27:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   true
ROR_28:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>   false
ROR_29:52:double_covariance(double,double): i < size  =>   i > size
ROR_30:52:double_covariance(double,double): i < size  =>   i >= size
ROR_31:52:double_covariance(double,double): i < size  =>   i <= size
ROR_32:52:double_covariance(double,double): i < size  =>   i == size
ROR_33:52:double_covariance(double,double): i < size  =>   i != size
ROR_34:52:double_covariance(double,double): i < size  =>   true
ROR_35:52:double_covariance(double,double): i < size  =>   false
ROR_36:66:double_durbinWatson(double): i < size  =>   i > size
ROR_37:66:double_durbinWatson(double): i < size  =>   i >= size
ROR_38:66:double_durbinWatson(double): i < size  =>   i <= size
ROR_39:66:double_durbinWatson(double): i < size  =>   i == size
ROR_40:66:double_durbinWatson(double): i < size  =>   i != size
ROR_41:66:double_durbinWatson(double): i < size  =>   true
ROR_42:66:double_durbinWatson(double): i < size  =>   false
ROR_43:79:double_lag1(double,double): i < size  =>   i > size
ROR_44:79:double_lag1(double,double): i < size  =>   i >= size
ROR_45:79:double_lag1(double,double): i < size  =>   i <= size
ROR_46:79:double_lag1(double,double): i < size  =>   i == size
ROR_47:79:double_lag1(double,double): i < size  =>   i != size
ROR_48:79:double_lag1(double,double): i < size  =>   true
ROR_49:79:double_lag1(double,double): i < size  =>   false
ROR_50:93:double_max(double): --i >= 0  =>   --i > 0
ROR_51:93:double_max(double): --i >= 0  =>   --i < 0
ROR_52:93:double_max(double): --i >= 0  =>   --i <= 0
ROR_53:93:double_max(double): --i >= 0  =>   --i == 0
ROR_54:93:double_max(double): --i >= 0  =>   --i != 0
ROR_55:93:double_max(double): --i >= 0  =>   true
ROR_56:93:double_max(double): --i >= 0  =>   false
ROR_57:94:double_max(double): elements[i] > max  =>   elements[i] >= max
ROR_58:94:double_max(double): elements[i] > max  =>   elements[i] < max
ROR_59:94:double_max(double): elements[i] > max  =>   elements[i] <= max
ROR_60:94:double_max(double): elements[i] > max  =>   elements[i] == max
ROR_61:94:double_max(double): elements[i] > max  =>   elements[i] != max
ROR_62:94:double_max(double): elements[i] > max  =>   true
ROR_63:94:double_max(double): elements[i] > max  =>   false
ROR_64:105:double_meanDeviation(double,double): --i >= 0  =>   --i > 0
ROR_65:105:double_meanDeviation(double,double): --i >= 0  =>   --i < 0
ROR_66:105:double_meanDeviation(double,double): --i >= 0  =>   --i <= 0
ROR_67:105:double_meanDeviation(double,double): --i >= 0  =>   --i == 0
ROR_68:105:double_meanDeviation(double,double): --i >= 0  =>   --i != 0
ROR_69:105:double_meanDeviation(double,double): --i >= 0  =>   true
ROR_70:105:double_meanDeviation(double,double): --i >= 0  =>   false
ROR_71:115:double_min(double): --i >= 0  =>   --i > 0
ROR_72:115:double_min(double): --i >= 0  =>   --i < 0
ROR_73:115:double_min(double): --i >= 0  =>   --i <= 0
ROR_74:115:double_min(double): --i >= 0  =>   --i == 0
ROR_75:115:double_min(double): --i >= 0  =>   --i != 0
ROR_76:115:double_min(double): --i >= 0  =>   true
ROR_77:115:double_min(double): --i >= 0  =>   false
ROR_78:116:double_min(double): elements[i] < min  =>   elements[i] > min
ROR_79:116:double_min(double): elements[i] < min  =>   elements[i] >= min
ROR_80:116:double_min(double): elements[i] < min  =>   elements[i] <= min
ROR_81:116:double_min(double): elements[i] < min  =>   elements[i] == min
ROR_82:116:double_min(double): elements[i] < min  =>   elements[i] != min
ROR_83:116:double_min(double): elements[i] < min  =>   true
ROR_84:116:double_min(double): elements[i] < min  =>   false
ROR_85:127:double_product(double): --i >= 0  =>   --i > 0
ROR_86:127:double_product(double): --i >= 0  =>   --i < 0
ROR_87:127:double_product(double): --i >= 0  =>   --i <= 0
ROR_88:127:double_product(double): --i >= 0  =>   --i == 0
ROR_89:127:double_product(double): --i >= 0  =>   --i != 0
ROR_90:127:double_product(double): --i >= 0  =>   true
ROR_91:127:double_product(double): --i >= 0  =>   false
ROR_92:140:double_quantile(double,double): n == 0  =>   n > 0
ROR_93:140:double_quantile(double,double): n == 0  =>   n >= 0
ROR_94:140:double_quantile(double,double): n == 0  =>   n < 0
ROR_95:140:double_quantile(double,double): n == 0  =>   n <= 0
ROR_96:140:double_quantile(double,double): n == 0  =>   n != 0
ROR_97:140:double_quantile(double,double): n == 0  =>   true
ROR_98:140:double_quantile(double,double): n == 0  =>   false
ROR_99:143:double_quantile(double,double): lhs == n - 1  =>   lhs > n - 1
ROR_100:143:double_quantile(double,double): lhs == n - 1  =>   lhs >= n - 1
ROR_101:143:double_quantile(double,double): lhs == n - 1  =>   lhs < n - 1
ROR_102:143:double_quantile(double,double): lhs == n - 1  =>   lhs <= n - 1
ROR_103:143:double_quantile(double,double): lhs == n - 1  =>   lhs != n - 1
ROR_104:143:double_quantile(double,double): lhs == n - 1  =>   true
ROR_105:143:double_quantile(double,double): lhs == n - 1  =>   false
ROR_106:177:double_sampleVariance(double,double): --i >= 0  =>   --i > 0
ROR_107:177:double_sampleVariance(double,double): --i >= 0  =>   --i < 0
ROR_108:177:double_sampleVariance(double,double): --i >= 0  =>   --i <= 0
ROR_109:177:double_sampleVariance(double,double): --i >= 0  =>   --i == 0
ROR_110:177:double_sampleVariance(double,double): --i >= 0  =>   --i != 0
ROR_111:177:double_sampleVariance(double,double): --i >= 0  =>   true
ROR_112:177:double_sampleVariance(double,double): --i >= 0  =>   false
ROR_113:187:double_sumOfLogarithms(double): i < elements.length  =>   i > elements.length
ROR_114:187:double_sumOfLogarithms(double): i < elements.length  =>   i >= elements.length
ROR_115:187:double_sumOfLogarithms(double): i < elements.length  =>   i <= elements.length
ROR_116:187:double_sumOfLogarithms(double): i < elements.length  =>   i == elements.length
ROR_117:187:double_sumOfLogarithms(double): i < elements.length  =>   i != elements.length
ROR_118:187:double_sumOfLogarithms(double): i < elements.length  =>   true
ROR_119:187:double_sumOfLogarithms(double): i < elements.length  =>   false
ROR_120:197:double_trimmedMean(double,double,int,int): i < left  =>   i > left
ROR_121:197:double_trimmedMean(double,double,int,int): i < left  =>   i >= left
ROR_122:197:double_trimmedMean(double,double,int,int): i < left  =>   i <= left
ROR_123:197:double_trimmedMean(double,double,int,int): i < left  =>   i == left
ROR_124:197:double_trimmedMean(double,double,int,int): i < left  =>   i != left
ROR_125:197:double_trimmedMean(double,double,int,int): i < left  =>   true
ROR_126:197:double_trimmedMean(double,double,int,int): i < left  =>   false
ROR_127:200:double_trimmedMean(double,double,int,int): i < right  =>   i > right
ROR_128:200:double_trimmedMean(double,double,int,int): i < right  =>   i >= right
ROR_129:200:double_trimmedMean(double,double,int,int): i < right  =>   i <= right
ROR_130:200:double_trimmedMean(double,double,int,int): i < right  =>   i == right
ROR_131:200:double_trimmedMean(double,double,int,int): i < right  =>   i != right
ROR_132:200:double_trimmedMean(double,double,int,int): i < right  =>   true
ROR_133:200:double_trimmedMean(double,double,int,int): i < right  =>   false
ROR_134:211:double_weightedMean(double,double): --i >= 0  =>   --i > 0
ROR_135:211:double_weightedMean(double,double): --i >= 0  =>   --i < 0
ROR_136:211:double_weightedMean(double,double): --i >= 0  =>   --i <= 0
ROR_137:211:double_weightedMean(double,double): --i >= 0  =>   --i == 0
ROR_138:211:double_weightedMean(double,double): --i >= 0  =>   --i != 0
ROR_139:211:double_weightedMean(double,double): --i >= 0  =>   true
ROR_140:211:double_weightedMean(double,double): --i >= 0  =>   false
ROR_141:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   from > to
ROR_142:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   from >= to
ROR_143:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   from < to
ROR_144:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   from == to
ROR_145:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   from != to
ROR_146:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   true
ROR_147:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>   false
ROR_148:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   midVal > key
ROR_149:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   midVal >= key
ROR_150:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   midVal <= key
ROR_151:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   midVal == key
ROR_152:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   midVal != key
ROR_153:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   true
ROR_154:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>   false
ROR_155:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   midVal >= key
ROR_156:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   midVal < key
ROR_157:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   midVal <= key
ROR_158:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   midVal == key
ROR_159:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   midVal != key
ROR_160:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   true
ROR_161:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>   false
ROR_162:240:double_binomial(double,long): k < 0  =>   k > 0
ROR_163:240:double_binomial(double,long): k < 0  =>   k >= 0
ROR_164:240:double_binomial(double,long): k < 0  =>   k <= 0
ROR_165:240:double_binomial(double,long): k < 0  =>   k == 0
ROR_166:240:double_binomial(double,long): k < 0  =>   k != 0
ROR_167:240:double_binomial(double,long): k < 0  =>   true
ROR_168:240:double_binomial(double,long): k < 0  =>   false
ROR_169:243:double_binomial(double,long): k == 0  =>   k > 0
ROR_170:243:double_binomial(double,long): k == 0  =>   k >= 0
ROR_171:243:double_binomial(double,long): k == 0  =>   k < 0
ROR_172:243:double_binomial(double,long): k == 0  =>   k <= 0
ROR_173:243:double_binomial(double,long): k == 0  =>   k != 0
ROR_174:243:double_binomial(double,long): k == 0  =>   true
ROR_175:243:double_binomial(double,long): k == 0  =>   false
ROR_176:246:double_binomial(double,long): k == 1  =>   k > 1
ROR_177:246:double_binomial(double,long): k == 1  =>   k >= 1
ROR_178:246:double_binomial(double,long): k == 1  =>   k < 1
ROR_179:246:double_binomial(double,long): k == 1  =>   k <= 1
ROR_180:246:double_binomial(double,long): k == 1  =>   k != 1
ROR_181:246:double_binomial(double,long): k == 1  =>   true
ROR_182:246:double_binomial(double,long): k == 1  =>   false
ROR_183:252:double_binomial(double,long): i-- > 0  =>   i-- >= 0
ROR_184:252:double_binomial(double,long): i-- > 0  =>   i-- < 0
ROR_185:252:double_binomial(double,long): i-- > 0  =>   i-- <= 0
ROR_186:252:double_binomial(double,long): i-- > 0  =>   i-- == 0
ROR_187:252:double_binomial(double,long): i-- > 0  =>   i-- != 0
ROR_188:252:double_binomial(double,long): i-- > 0  =>   true
ROR_189:252:double_binomial(double,long): i-- > 0  =>   false
ROR_190:260:double_link(double): r < 0.0  =>   r > 0.0
ROR_191:260:double_link(double): r < 0.0  =>   r >= 0.0
ROR_192:260:double_link(double): r < 0.0  =>   r <= 0.0
ROR_193:260:double_link(double): r < 0.0  =>   r == 0.0
ROR_194:260:double_link(double): r < 0.0  =>   r != 0.0
ROR_195:260:double_link(double): r < 0.0  =>   true
ROR_196:260:double_link(double): r < 0.0  =>   false
ROR_197:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   i > sortedElements.length
ROR_198:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   i >= sortedElements.length
ROR_199:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   i <= sortedElements.length
ROR_200:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   i == sortedElements.length
ROR_201:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   i != sortedElements.length
ROR_202:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   true
ROR_203:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>   false
ROR_204:278:double_winsorizedMean(double,int,int): i < left  =>   i > left
ROR_205:278:double_winsorizedMean(double,int,int): i < left  =>   i >= left
ROR_206:278:double_winsorizedMean(double,int,int): i < left  =>   i <= left
ROR_207:278:double_winsorizedMean(double,int,int): i < left  =>   i == left
ROR_208:278:double_winsorizedMean(double,int,int): i < left  =>   i != left
ROR_209:278:double_winsorizedMean(double,int,int): i < left  =>   true
ROR_210:278:double_winsorizedMean(double,int,int): i < left  =>   false
ROR_211:282:double_winsorizedMean(double,int,int): i < right  =>   i > right
ROR_212:282:double_winsorizedMean(double,int,int): i < right  =>   i >= right
ROR_213:282:double_winsorizedMean(double,int,int): i < right  =>   i <= right
ROR_214:282:double_winsorizedMean(double,int,int): i < right  =>   i == right
ROR_215:282:double_winsorizedMean(double,int,int): i < right  =>   i != right
ROR_216:282:double_winsorizedMean(double,int,int): i < right  =>   true
ROR_217:282:double_winsorizedMean(double,int,int): i < right  =>   false
ROR_218:298:double_kurtosis(double): i < data.length  =>   i > data.length
ROR_219:298:double_kurtosis(double): i < data.length  =>   i >= data.length
ROR_220:298:double_kurtosis(double): i < data.length  =>   i <= data.length
ROR_221:298:double_kurtosis(double): i < data.length  =>   i == data.length
ROR_222:298:double_kurtosis(double): i < data.length  =>   i != data.length
ROR_223:298:double_kurtosis(double): i < data.length  =>   true
ROR_224:298:double_kurtosis(double): i < data.length  =>   false
ROR_225:304:double_kurtosis(double): i < data.length  =>   i > data.length
ROR_226:304:double_kurtosis(double): i < data.length  =>   i >= data.length
ROR_227:304:double_kurtosis(double): i < data.length  =>   i <= data.length
ROR_228:304:double_kurtosis(double): i < data.length  =>   i == data.length
ROR_229:304:double_kurtosis(double): i < data.length  =>   i != data.length
ROR_230:304:double_kurtosis(double): i < data.length  =>   true
ROR_231:304:double_kurtosis(double): i < data.length  =>   false
ROR_232:319:double_logGamma(double): j <= 5  =>   j > 5
ROR_233:319:double_logGamma(double): j <= 5  =>   j >= 5
ROR_234:319:double_logGamma(double): j <= 5  =>   j < 5
ROR_235:319:double_logGamma(double): j <= 5  =>   j == 5
ROR_236:319:double_logGamma(double): j <= 5  =>   j != 5
ROR_237:319:double_logGamma(double): j <= 5  =>   true
ROR_238:319:double_logGamma(double): j <= 5  =>   false
ROR_239:329:double_pooledMean(double,double): i < data1.length  =>   i > data1.length
ROR_240:329:double_pooledMean(double,double): i < data1.length  =>   i >= data1.length
ROR_241:329:double_pooledMean(double,double): i < data1.length  =>   i <= data1.length
ROR_242:329:double_pooledMean(double,double): i < data1.length  =>   i == data1.length
ROR_243:329:double_pooledMean(double,double): i < data1.length  =>   i != data1.length
ROR_244:329:double_pooledMean(double,double): i < data1.length  =>   true
ROR_245:329:double_pooledMean(double,double): i < data1.length  =>   false
ROR_246:334:double_pooledMean(double,double): i < data2.length  =>   i > data2.length
ROR_247:334:double_pooledMean(double,double): i < data2.length  =>   i >= data2.length
ROR_248:334:double_pooledMean(double,double): i < data2.length  =>   i <= data2.length
ROR_249:334:double_pooledMean(double,double): i < data2.length  =>   i == data2.length
ROR_250:334:double_pooledMean(double,double): i < data2.length  =>   i != data2.length
ROR_251:334:double_pooledMean(double,double): i < data2.length  =>   true
ROR_252:334:double_pooledMean(double,double): i < data2.length  =>   false
ROR_253:345:double_pooledVariance(double,double): i < data1.length  =>   i > data1.length
ROR_254:345:double_pooledVariance(double,double): i < data1.length  =>   i >= data1.length
ROR_255:345:double_pooledVariance(double,double): i < data1.length  =>   i <= data1.length
ROR_256:345:double_pooledVariance(double,double): i < data1.length  =>   i == data1.length
ROR_257:345:double_pooledVariance(double,double): i < data1.length  =>   i != data1.length
ROR_258:345:double_pooledVariance(double,double): i < data1.length  =>   true
ROR_259:345:double_pooledVariance(double,double): i < data1.length  =>   false
ROR_260:353:double_pooledVariance(double,double): i < data2.length  =>   i > data2.length
ROR_261:353:double_pooledVariance(double,double): i < data2.length  =>   i >= data2.length
ROR_262:353:double_pooledVariance(double,double): i < data2.length  =>   i <= data2.length
ROR_263:353:double_pooledVariance(double,double): i < data2.length  =>   i == data2.length
ROR_264:353:double_pooledVariance(double,double): i < data2.length  =>   i != data2.length
ROR_265:353:double_pooledVariance(double,double): i < data2.length  =>   true
ROR_266:353:double_pooledVariance(double,double): i < data2.length  =>   false
ROR_267:367:double_polevl(double,double,int): i <= N  =>   i > N
ROR_268:367:double_polevl(double,double,int): i <= N  =>   i >= N
ROR_269:367:double_polevl(double,double,int): i <= N  =>   i < N
ROR_270:367:double_polevl(double,double,int): i <= N  =>   i == N
ROR_271:367:double_polevl(double,double,int): i <= N  =>   i != N
ROR_272:367:double_polevl(double,double,int): i <= N  =>   true
ROR_273:367:double_polevl(double,double,int): i <= N  =>   false
ROR_274:375:double_rankInterpolated(double,double,int): index >= 0  =>   index > 0
ROR_275:375:double_rankInterpolated(double,double,int): index >= 0  =>   index < 0
ROR_276:375:double_rankInterpolated(double,double,int): index >= 0  =>   index <= 0
ROR_277:375:double_rankInterpolated(double,double,int): index >= 0  =>   index == 0
ROR_278:375:double_rankInterpolated(double,double,int): index >= 0  =>   index != 0
ROR_279:375:double_rankInterpolated(double,double,int): index >= 0  =>   true
ROR_280:375:double_rankInterpolated(double,double,int): index >= 0  =>   false
ROR_281:378:double_rankInterpolated(double,double,int): to < s  =>   to > s
ROR_282:378:double_rankInterpolated(double,double,int): to < s  =>   to >= s
ROR_283:378:double_rankInterpolated(double,double,int): to < s  =>   to <= s
ROR_284:378:double_rankInterpolated(double,double,int): to < s  =>   to == s
ROR_285:378:double_rankInterpolated(double,double,int): to < s  =>   to != s
ROR_286:378:double_rankInterpolated(double,double,int): to < s  =>   true
ROR_287:378:double_rankInterpolated(double,double,int): to < s  =>   false
ROR_288:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   sortedList[to] > element
ROR_289:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   sortedList[to] >= element
ROR_290:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   sortedList[to] < element
ROR_291:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   sortedList[to] <= element
ROR_292:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   sortedList[to] != element
ROR_293:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   true
ROR_294:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>   false
ROR_295:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   insertionPoint > 0
ROR_296:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   insertionPoint >= 0
ROR_297:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   insertionPoint < 0
ROR_298:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   insertionPoint <= 0
ROR_299:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   insertionPoint != 0
ROR_300:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   true
ROR_301:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>   false
ROR_302:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   insertionPoint > sortedList.length
ROR_303:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   insertionPoint >= sortedList.length
ROR_304:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   insertionPoint < sortedList.length
ROR_305:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   insertionPoint <= sortedList.length
ROR_306:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   insertionPoint != sortedList.length
ROR_307:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   true
ROR_308:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>   false
ROR_309:398:double_sampleWeightedVariance(double,double): i < data.length  =>   i > data.length
ROR_310:398:double_sampleWeightedVariance(double,double): i < data.length  =>   i >= data.length
ROR_311:398:double_sampleWeightedVariance(double,double): i < data.length  =>   i <= data.length
ROR_312:398:double_sampleWeightedVariance(double,double): i < data.length  =>   i == data.length
ROR_313:398:double_sampleWeightedVariance(double,double): i < data.length  =>   i != data.length
ROR_314:398:double_sampleWeightedVariance(double,double): i < data.length  =>   true
ROR_315:398:double_sampleWeightedVariance(double,double): i < data.length  =>   false
ROR_316:411:double_skew(double): i < data.length  =>   i > data.length
ROR_317:411:double_skew(double): i < data.length  =>   i >= data.length
ROR_318:411:double_skew(double): i < data.length  =>   i <= data.length
ROR_319:411:double_skew(double): i < data.length  =>   i == data.length
ROR_320:411:double_skew(double): i < data.length  =>   i != data.length
ROR_321:411:double_skew(double): i < data.length  =>   true
ROR_322:411:double_skew(double): i < data.length  =>   false
ROR_323:417:double_skew(double): i < data.length  =>   i > data.length
ROR_324:417:double_skew(double): i < data.length  =>   i >= data.length
ROR_325:417:double_skew(double): i < data.length  =>   i <= data.length
ROR_326:417:double_skew(double): i < data.length  =>   i == data.length
ROR_327:417:double_skew(double): i < data.length  =>   i != data.length
ROR_328:417:double_skew(double): i < data.length  =>   true
ROR_329:417:double_skew(double): i < data.length  =>   false
ROR_330:428:double_standardize(double): i < data.length  =>   i > data.length
ROR_331:428:double_standardize(double): i < data.length  =>   i >= data.length
ROR_332:428:double_standardize(double): i < data.length  =>   i <= data.length
ROR_333:428:double_standardize(double): i < data.length  =>   i == data.length
ROR_334:428:double_standardize(double): i < data.length  =>   i != data.length
ROR_335:428:double_standardize(double): i < data.length  =>   true
ROR_336:428:double_standardize(double): i < data.length  =>   false
ROR_337:434:double_standardize(double): i < data.length  =>   i > data.length
ROR_338:434:double_standardize(double): i < data.length  =>   i >= data.length
ROR_339:434:double_standardize(double): i < data.length  =>   i <= data.length
ROR_340:434:double_standardize(double): i < data.length  =>   i == data.length
ROR_341:434:double_standardize(double): i < data.length  =>   i != data.length
ROR_342:434:double_standardize(double): i < data.length  =>   true
ROR_343:434:double_standardize(double): i < data.length  =>   false
ROR_344:444:double_weightedRMS(double,double): i < data.length  =>   i > data.length
ROR_345:444:double_weightedRMS(double,double): i < data.length  =>   i >= data.length
ROR_346:444:double_weightedRMS(double,double): i < data.length  =>   i <= data.length
ROR_347:444:double_weightedRMS(double,double): i < data.length  =>   i == data.length
ROR_348:444:double_weightedRMS(double,double): i < data.length  =>   i != data.length
ROR_349:444:double_weightedRMS(double,double): i < data.length  =>   true
ROR_350:444:double_weightedRMS(double,double): i < data.length  =>   false
ROR_351:454:double_harmonicMean(double): i < data.length  =>   i > data.length
ROR_352:454:double_harmonicMean(double): i < data.length  =>   i >= data.length
ROR_353:454:double_harmonicMean(double): i < data.length  =>   i <= data.length
ROR_354:454:double_harmonicMean(double): i < data.length  =>   i == data.length
ROR_355:454:double_harmonicMean(double): i < data.length  =>   i != data.length
ROR_356:454:double_harmonicMean(double): i < data.length  =>   true
ROR_357:454:double_harmonicMean(double): i < data.length  =>   false
ROR_358:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   i > data.length
ROR_359:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   i >= data.length
ROR_360:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   i <= data.length
ROR_361:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   i == data.length
ROR_362:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   i != data.length
ROR_363:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   true
ROR_364:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>   false
ROR_365:471:double_power(double,int): i < data.length  =>   i > data.length
ROR_366:471:double_power(double,int): i < data.length  =>   i >= data.length
ROR_367:471:double_power(double,int): i < data.length  =>   i <= data.length
ROR_368:471:double_power(double,int): i < data.length  =>   i == data.length
ROR_369:471:double_power(double,int): i < data.length  =>   i != data.length
ROR_370:471:double_power(double,int): i < data.length  =>   true
ROR_371:471:double_power(double,int): i < data.length  =>   false
ROR_372:479:double_square(double): i < data.length  =>   i > data.length
ROR_373:479:double_square(double): i < data.length  =>   i >= data.length
ROR_374:479:double_square(double): i < data.length  =>   i <= data.length
ROR_375:479:double_square(double): i < data.length  =>   i == data.length
ROR_376:479:double_square(double): i < data.length  =>   i != data.length
ROR_377:479:double_square(double): i < data.length  =>   true
ROR_378:479:double_square(double): i < data.length  =>   false
COR_1:378:double_rankInterpolated(double,double,int): to < s && sortedList[to] == element  =>   to < s || sortedList[to] == element
COR_2:378:double_rankInterpolated(double,double,int): to < s && sortedList[to] == element  =>   to < s ^ sortedList[to] == element
COR_3:384:double_rankInterpolated(double,double,int): insertionPoint == 0 || insertionPoint == sortedList.length  =>   insertionPoint == 0 && insertionPoint == sortedList.length
COR_4:384:double_rankInterpolated(double,double,int): insertionPoint == 0 || insertionPoint == sortedList.length  =>   insertionPoint == 0 ^ insertionPoint == sortedList.length
COI_1:20:double_autoCorrelation(double,int,double,double): i < N  =>  !(i < N)
COI_2:30:int_binarySearchFromTo(double,double,int,int): low <= high  =>  !(low <= high)
COI_3:33:int_binarySearchFromTo(double,double,int,int): midVal < key  =>  !(midVal < key)
COI_4:36:int_binarySearchFromTo(double,double,int,int): midVal > key  =>  !(midVal > key)
COI_5:52:double_covariance(double,double): i < size  =>  !(i < size)
COI_6:66:double_durbinWatson(double): i < size  =>  !(i < size)
COI_7:79:double_lag1(double,double): i < size  =>  !(i < size)
COI_8:93:double_max(double): --i >= 0  =>  !(--i >= 0)
COI_9:94:double_max(double): elements[i] > max  =>  !(elements[i] > max)
COI_10:105:double_meanDeviation(double,double): --i >= 0  =>  !(--i >= 0)
COI_11:115:double_min(double): --i >= 0  =>  !(--i >= 0)
COI_12:116:double_min(double): elements[i] < min  =>  !(elements[i] < min)
COI_13:127:double_product(double): --i >= 0  =>  !(--i >= 0)
COI_14:140:double_quantile(double,double): n == 0  =>  !(n == 0)
COI_15:143:double_quantile(double,double): lhs == n - 1  =>  !(lhs == n - 1)
COI_16:177:double_sampleVariance(double,double): --i >= 0  =>  !(--i >= 0)
COI_17:187:double_sumOfLogarithms(double): i < elements.length  =>  !(i < elements.length)
COI_18:197:double_trimmedMean(double,double,int,int): i < left  =>  !(i < left)
COI_19:200:double_trimmedMean(double,double,int,int): i < right  =>  !(i < right)
COI_20:211:double_weightedMean(double,double): --i >= 0  =>  !(--i >= 0)
COI_21:222:int_binarySearchFromTo(int,int,int,int): from <= to  =>  !(from <= to)
COI_22:225:int_binarySearchFromTo(int,int,int,int): midVal < key  =>  !(midVal < key)
COI_23:228:int_binarySearchFromTo(int,int,int,int): midVal > key  =>  !(midVal > key)
COI_24:240:double_binomial(double,long): k < 0  =>  !(k < 0)
COI_25:243:double_binomial(double,long): k == 0  =>  !(k == 0)
COI_26:246:double_binomial(double,long): k == 1  =>  !(k == 1)
COI_27:252:double_binomial(double,long): i-- > 0  =>  !(i-- > 0)
COI_28:260:double_link(double): r < 0.0  =>  !(r < 0.0)
COI_29:273:double_winsorizedMean(double,int,int): i < sortedElements.length  =>  !(i < sortedElements.length)
COI_30:278:double_winsorizedMean(double,int,int): i < left  =>  !(i < left)
COI_31:282:double_winsorizedMean(double,int,int): i < right  =>  !(i < right)
COI_32:298:double_kurtosis(double): i < data.length  =>  !(i < data.length)
COI_33:304:double_kurtosis(double): i < data.length  =>  !(i < data.length)
COI_34:319:double_logGamma(double): j <= 5  =>  !(j <= 5)
COI_35:329:double_pooledMean(double,double): i < data1.length  =>  !(i < data1.length)
COI_36:334:double_pooledMean(double,double): i < data2.length  =>  !(i < data2.length)
COI_37:345:double_pooledVariance(double,double): i < data1.length  =>  !(i < data1.length)
COI_38:353:double_pooledVariance(double,double): i < data2.length  =>  !(i < data2.length)
COI_39:367:double_polevl(double,double,int): i <= N  =>  !(i <= N)
COI_40:375:double_rankInterpolated(double,double,int): index >= 0  =>  !(index >= 0)
COI_41:378:double_rankInterpolated(double,double,int): to < s  =>  !(to < s)
COI_42:378:double_rankInterpolated(double,double,int): sortedList[to] == element  =>  !(sortedList[to] == element)
COI_43:378:double_rankInterpolated(double,double,int): to < s && sortedList[to] == element  =>  !(to < s && sortedList[to] == element)
COI_44:384:double_rankInterpolated(double,double,int): insertionPoint == 0  =>  !(insertionPoint == 0)
COI_45:384:double_rankInterpolated(double,double,int): insertionPoint == sortedList.length  =>  !(insertionPoint == sortedList.length)
COI_46:384:double_rankInterpolated(double,double,int): insertionPoint == 0 || insertionPoint == sortedList.length  =>  !(insertionPoint == 0 || insertionPoint == sortedList.length)
COI_47:398:double_sampleWeightedVariance(double,double): i < data.length  =>  !(i < data.length)
COI_48:411:double_skew(double): i < data.length  =>  !(i < data.length)
COI_49:417:double_skew(double): i < data.length  =>  !(i < data.length)
COI_50:428:double_standardize(double): i < data.length  =>  !(i < data.length)
COI_51:434:double_standardize(double): i < data.length  =>  !(i < data.length)
COI_52:444:double_weightedRMS(double,double): i < data.length  =>  !(i < data.length)
COI_53:454:double_harmonicMean(double): i < data.length  =>  !(i < data.length)
COI_54:463:double_sumOfPowerOfDeviations(double,int,double): i < data.length  =>  !(i < data.length)
COI_55:471:double_power(double,int): i < data.length  =>  !(i < data.length)
COI_56:479:double_square(double): i < data.length  =>  !(i < data.length)
LOI_1:18:double_autoCorrelation(double,int,double,double):data.length => ~data.length
LOI_2:20:double_autoCorrelation(double,int,double,double):i => ~i
LOI_3:20:double_autoCorrelation(double,int,double,double):N => ~N
LOI_4:20:double_autoCorrelation(double,int,double,double):i => ~i
LOI_5:21:double_autoCorrelation(double,int,double,double):i => ~i
LOI_6:21:double_autoCorrelation(double,int,double,double):mean => ~mean
LOI_7:21:double_autoCorrelation(double,int,double,double):i => ~i
LOI_8:21:double_autoCorrelation(double,int,double,double):lag => ~lag
LOI_9:21:double_autoCorrelation(double,int,double,double):mean => ~mean
LOI_10:23:double_autoCorrelation(double,int,double,double):run => ~run
LOI_11:23:double_autoCorrelation(double,int,double,double):N => ~N
LOI_12:23:double_autoCorrelation(double,int,double,double):lag => ~lag
LOI_13:23:double_autoCorrelation(double,int,double,double):variance => ~variance
LOI_14:28:int_binarySearchFromTo(double,double,int,int):from => ~from
LOI_15:29:int_binarySearchFromTo(double,double,int,int):to => ~to
LOI_16:30:int_binarySearchFromTo(double,double,int,int):low => ~low
LOI_17:30:int_binarySearchFromTo(double,double,int,int):high => ~high
LOI_18:31:int_binarySearchFromTo(double,double,int,int):low => ~low
LOI_19:31:int_binarySearchFromTo(double,double,int,int):high => ~high
LOI_20:32:int_binarySearchFromTo(double,double,int,int):mid => ~mid
LOI_21:33:int_binarySearchFromTo(double,double,int,int):midVal => ~midVal
LOI_22:33:int_binarySearchFromTo(double,double,int,int):key => ~key
LOI_23:34:int_binarySearchFromTo(double,double,int,int):mid => ~mid
LOI_24:36:int_binarySearchFromTo(double,double,int,int):midVal => ~midVal
LOI_25:36:int_binarySearchFromTo(double,double,int,int):key => ~key
LOI_26:37:int_binarySearchFromTo(double,double,int,int):mid => ~mid
LOI_27:39:int_binarySearchFromTo(double,double,int,int):mid => ~mid
LOI_28:43:int_binarySearchFromTo(double,double,int,int):low => ~low
LOI_29:48:double_covariance(double,double):elements1.length => ~elements1.length
LOI_30:52:double_covariance(double,double):i => ~i
LOI_31:52:double_covariance(double,double):size => ~size
LOI_32:52:double_covariance(double,double):i => ~i
LOI_33:53:double_covariance(double,double):i => ~i
LOI_34:54:double_covariance(double,double):i => ~i
LOI_35:55:double_covariance(double,double):x => ~x
LOI_36:56:double_covariance(double,double):x => ~x
LOI_37:56:double_covariance(double,double):sumx => ~sumx
LOI_38:56:double_covariance(double,double):i => ~i
LOI_39:56:double_covariance(double,double):y => ~y
LOI_40:56:double_covariance(double,double):sumy => ~sumy
LOI_41:56:double_covariance(double,double):i => ~i
LOI_42:57:double_covariance(double,double):y => ~y
LOI_43:59:double_covariance(double,double):Sxy => ~Sxy
LOI_44:59:double_covariance(double,double):size => ~size
LOI_45:64:double_durbinWatson(double):elements.length => ~elements.length
LOI_46:66:double_durbinWatson(double):i => ~i
LOI_47:66:double_durbinWatson(double):size => ~size
LOI_48:66:double_durbinWatson(double):i => ~i
LOI_49:67:double_durbinWatson(double):i => ~i
LOI_50:67:double_durbinWatson(double):i => ~i
LOI_51:68:double_durbinWatson(double):x => ~x
LOI_52:68:double_durbinWatson(double):x => ~x
LOI_53:70:double_durbinWatson(double):run => ~run
LOI_54:75:double_lag1(double,double):elements.length => ~elements.length
LOI_55:78:double_lag1(double,double):mean => ~mean
LOI_56:78:double_lag1(double,double):mean => ~mean
LOI_57:79:double_lag1(double,double):i => ~i
LOI_58:79:double_lag1(double,double):size => ~size
LOI_59:79:double_lag1(double,double):i => ~i
LOI_60:80:double_lag1(double,double):i => ~i
LOI_61:80:double_lag1(double,double):mean => ~mean
LOI_62:81:double_lag1(double,double):i => ~i
LOI_63:81:double_lag1(double,double):mean => ~mean
LOI_64:82:double_lag1(double,double):delta0 => ~delta0
LOI_65:82:double_lag1(double,double):delta1 => ~delta1
LOI_66:82:double_lag1(double,double):q => ~q
LOI_67:82:double_lag1(double,double):i => ~i
LOI_68:83:double_lag1(double,double):delta1 => ~delta1
LOI_69:83:double_lag1(double,double):delta1 => ~delta1
LOI_70:83:double_lag1(double,double):v => ~v
LOI_71:83:double_lag1(double,double):i => ~i
LOI_72:85:double_lag1(double,double):q => ~q
LOI_73:85:double_lag1(double,double):v => ~v
LOI_74:86:double_lag1(double,double):r1 => ~r1
LOI_75:91:double_max(double):elements.length => ~elements.length
LOI_76:92:double_max(double):size => ~size
LOI_77:93:double_max(double):i => ~i
LOI_78:94:double_max(double):i => ~i
LOI_79:94:double_max(double):max => ~max
LOI_80:95:double_max(double):i => ~i
LOI_81:98:double_max(double):max => ~max
LOI_82:103:double_meanDeviation(double,double):elements.length => ~elements.length
LOI_83:105:double_meanDeviation(double,double):i => ~i
LOI_84:106:double_meanDeviation(double,double):i => ~i
LOI_85:106:double_meanDeviation(double,double):mean => ~mean
LOI_86:108:double_meanDeviation(double,double):sum => ~sum
LOI_87:108:double_meanDeviation(double,double):size => ~size
LOI_88:113:double_min(double):elements.length => ~elements.length
LOI_89:114:double_min(double):size => ~size
LOI_90:115:double_min(double):i => ~i
LOI_91:116:double_min(double):i => ~i
LOI_92:116:double_min(double):min => ~min
LOI_93:117:double_min(double):i => ~i
LOI_94:120:double_min(double):min => ~min
LOI_95:125:double_product(double):elements.length => ~elements.length
LOI_96:127:double_product(double):i => ~i
LOI_97:128:double_product(double):i => ~i
LOI_98:130:double_product(double):product => ~product
LOI_99:135:double_quantile(double,double):sortedElements.length => ~sortedElements.length
LOI_100:136:double_quantile(double,double):phi => ~phi
LOI_101:136:double_quantile(double,double):n => ~n
LOI_102:137:double_quantile(double,double):index => ~index
LOI_103:138:double_quantile(double,double):index => ~index
LOI_104:138:double_quantile(double,double):lhs => ~lhs
LOI_105:140:double_quantile(double,double):n => ~n
LOI_106:143:double_quantile(double,double):lhs => ~lhs
LOI_107:143:double_quantile(double,double):n => ~n
LOI_108:144:double_quantile(double,double):lhs => ~lhs
LOI_109:146:double_quantile(double,double):delta => ~delta
LOI_110:146:double_quantile(double,double):lhs => ~lhs
LOI_111:146:double_quantile(double,double):delta => ~delta
LOI_112:146:double_quantile(double,double):lhs => ~lhs
LOI_113:148:double_quantile(double,double):result => ~result
LOI_114:153:double_sampleKurtosis(int,double,double):size => ~size
LOI_115:154:double_sampleKurtosis(int,double,double):sampleVariance => ~sampleVariance
LOI_116:155:double_sampleKurtosis(int,double,double):moment4 => ~moment4
LOI_117:155:double_sampleKurtosis(int,double,double):n => ~n
LOI_118:156:double_sampleKurtosis(int,double,double):m4 => ~m4
LOI_119:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_120:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_121:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_122:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_123:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_124:156:double_sampleKurtosis(int,double,double):s2 => ~s2
LOI_125:156:double_sampleKurtosis(int,double,double):s2 => ~s2
LOI_126:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_127:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_128:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_129:156:double_sampleKurtosis(int,double,double):n => ~n
LOI_130:161:double_sampleKurtosisStandardError(int):size => ~size
LOI_131:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_132:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_133:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_134:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_135:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_136:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_137:162:double_sampleKurtosisStandardError(int):n => ~n
LOI_138:167:double_sampleSkew(int,double,double):size => ~size
LOI_139:168:double_sampleSkew(int,double,double):sampleVariance => ~sampleVariance
LOI_140:169:double_sampleSkew(int,double,double):moment3 => ~moment3
LOI_141:169:double_sampleSkew(int,double,double):n => ~n
LOI_142:170:double_sampleSkew(int,double,double):n => ~n
LOI_143:170:double_sampleSkew(int,double,double):m3 => ~m3
LOI_144:170:double_sampleSkew(int,double,double):n => ~n
LOI_145:170:double_sampleSkew(int,double,double):n => ~n
LOI_146:170:double_sampleSkew(int,double,double):s => ~s
LOI_147:170:double_sampleSkew(int,double,double):s => ~s
LOI_148:170:double_sampleSkew(int,double,double):s => ~s
LOI_149:175:double_sampleVariance(double,double):elements.length => ~elements.length
LOI_150:177:double_sampleVariance(double,double):i => ~i
LOI_151:178:double_sampleVariance(double,double):i => ~i
LOI_152:178:double_sampleVariance(double,double):mean => ~mean
LOI_153:179:double_sampleVariance(double,double):delta => ~delta
LOI_154:179:double_sampleVariance(double,double):delta => ~delta
LOI_155:181:double_sampleVariance(double,double):sum => ~sum
LOI_156:181:double_sampleVariance(double,double):size => ~size
LOI_157:187:double_sumOfLogarithms(double):i => ~i
LOI_158:187:double_sumOfLogarithms(double):elements.length => ~elements.length
LOI_159:187:double_sumOfLogarithms(double):i => ~i
LOI_160:188:double_sumOfLogarithms(double):i => ~i
LOI_161:190:double_sumOfLogarithms(double):logsum => ~logsum
LOI_162:195:double_trimmedMean(double,double,int,int):sortedElements.length => ~sortedElements.length
LOI_163:196:double_trimmedMean(double,double,int,int):N => ~N
LOI_164:197:double_trimmedMean(double,double,int,int):i => ~i
LOI_165:197:double_trimmedMean(double,double,int,int):left => ~left
LOI_166:197:double_trimmedMean(double,double,int,int):i => ~i
LOI_167:198:double_trimmedMean(double,double,int,int):mean => ~mean
LOI_168:198:double_trimmedMean(double,double,int,int):i => ~i
LOI_169:198:double_trimmedMean(double,double,int,int):N => ~N
LOI_170:200:double_trimmedMean(double,double,int,int):i => ~i
LOI_171:200:double_trimmedMean(double,double,int,int):right => ~right
LOI_172:200:double_trimmedMean(double,double,int,int):i => ~i
LOI_173:201:double_trimmedMean(double,double,int,int):mean => ~mean
LOI_174:201:double_trimmedMean(double,double,int,int):N0 => ~N0
LOI_175:201:double_trimmedMean(double,double,int,int):i => ~i
LOI_176:201:double_trimmedMean(double,double,int,int):N => ~N
LOI_177:203:double_trimmedMean(double,double,int,int):mean => ~mean
LOI_178:208:double_weightedMean(double,double):elements.length => ~elements.length
LOI_179:211:double_weightedMean(double,double):i => ~i
LOI_180:212:double_weightedMean(double,double):i => ~i
LOI_181:213:double_weightedMean(double,double):i => ~i
LOI_182:213:double_weightedMean(double,double):w => ~w
LOI_183:214:double_weightedMean(double,double):w => ~w
LOI_184:216:double_weightedMean(double,double):sum => ~sum
LOI_185:216:double_weightedMean(double,double):weightsSum => ~weightsSum
LOI_186:222:int_binarySearchFromTo(int,int,int,int):from => ~from
LOI_187:222:int_binarySearchFromTo(int,int,int,int):to => ~to
LOI_188:223:int_binarySearchFromTo(int,int,int,int):from => ~from
LOI_189:223:int_binarySearchFromTo(int,int,int,int):to => ~to
LOI_190:224:int_binarySearchFromTo(int,int,int,int):mid => ~mid
LOI_191:225:int_binarySearchFromTo(int,int,int,int):midVal => ~midVal
LOI_192:225:int_binarySearchFromTo(int,int,int,int):key => ~key
LOI_193:226:int_binarySearchFromTo(int,int,int,int):mid => ~mid
LOI_194:228:int_binarySearchFromTo(int,int,int,int):midVal => ~midVal
LOI_195:228:int_binarySearchFromTo(int,int,int,int):key => ~key
LOI_196:229:int_binarySearchFromTo(int,int,int,int):mid => ~mid
LOI_197:231:int_binarySearchFromTo(int,int,int,int):mid => ~mid
LOI_198:235:int_binarySearchFromTo(int,int,int,int):from => ~from
LOI_199:240:double_binomial(double,long):k => ~k
LOI_200:243:double_binomial(double,long):k => ~k
LOI_201:246:double_binomial(double,long):k => ~k
LOI_202:247:double_binomial(double,long):n => ~n
LOI_203:249:double_binomial(double,long):n => ~n
LOI_204:249:double_binomial(double,long):k => ~k
LOI_205:252:double_binomial(double,long):i => ~i
LOI_206:253:double_binomial(double,long):a => ~a
LOI_207:253:double_binomial(double,long):b => ~b
LOI_208:255:double_binomial(double,long):binomial => ~binomial
LOI_209:260:double_link(double):r => ~r
LOI_210:261:double_link(double):r => ~r
LOI_211:262:double_link(double):s => ~s
LOI_212:262:double_link(double):s => ~s
LOI_213:264:double_link(double):r => ~r
LOI_214:265:double_link(double):s => ~s
LOI_215:271:double_winsorizedMean(double,int,int):sortedElements.length => ~sortedElements.length
LOI_216:273:double_winsorizedMean(double,int,int):i => ~i
LOI_217:273:double_winsorizedMean(double,int,int):sortedElements.length => ~sortedElements.length
LOI_218:273:double_winsorizedMean(double,int,int):i => ~i
LOI_219:274:double_winsorizedMean(double,int,int):i => ~i
LOI_220:276:double_winsorizedMean(double,int,int):sum => ~sum
LOI_221:276:double_winsorizedMean(double,int,int):sortedElements.length => ~sortedElements.length
LOI_222:277:double_winsorizedMean(double,int,int):left => ~left
LOI_223:278:double_winsorizedMean(double,int,int):i => ~i
LOI_224:278:double_winsorizedMean(double,int,int):left => ~left
LOI_225:278:double_winsorizedMean(double,int,int):i => ~i
LOI_226:279:double_winsorizedMean(double,int,int):leftElement => ~leftElement
LOI_227:279:double_winsorizedMean(double,int,int):i => ~i
LOI_228:279:double_winsorizedMean(double,int,int):N => ~N
LOI_229:281:double_winsorizedMean(double,int,int):N => ~N
LOI_230:281:double_winsorizedMean(double,int,int):right => ~right
LOI_231:282:double_winsorizedMean(double,int,int):i => ~i
LOI_232:282:double_winsorizedMean(double,int,int):right => ~right
LOI_233:282:double_winsorizedMean(double,int,int):i => ~i
LOI_234:283:double_winsorizedMean(double,int,int):rightElement => ~rightElement
LOI_235:283:double_winsorizedMean(double,int,int):N => ~N
LOI_236:283:double_winsorizedMean(double,int,int):i => ~i
LOI_237:283:double_winsorizedMean(double,int,int):N => ~N
LOI_238:285:double_winsorizedMean(double,int,int):mean => ~mean
LOI_239:290:double_geometricPdf(int,double):p => ~p
LOI_240:290:double_geometricPdf(int,double):p => ~p
LOI_241:290:double_geometricPdf(int,double):k => ~k
LOI_242:298:double_kurtosis(double):i => ~i
LOI_243:298:double_kurtosis(double):data.length => ~data.length
LOI_244:298:double_kurtosis(double):i => ~i
LOI_245:299:double_kurtosis(double):i => ~i
LOI_246:300:double_kurtosis(double):i => ~i
LOI_247:300:double_kurtosis(double):i => ~i
LOI_248:302:double_kurtosis(double):sum => ~sum
LOI_249:302:double_kurtosis(double):data.length => ~data.length
LOI_250:303:double_kurtosis(double):sumSq => ~sumSq
LOI_251:303:double_kurtosis(double):mean => ~mean
LOI_252:303:double_kurtosis(double):sum => ~sum
LOI_253:303:double_kurtosis(double):data.length => ~data.length
LOI_254:304:double_kurtosis(double):i => ~i
LOI_255:304:double_kurtosis(double):data.length => ~data.length
LOI_256:304:double_kurtosis(double):i => ~i
LOI_257:305:double_kurtosis(double):i => ~i
LOI_258:305:double_kurtosis(double):mean => ~mean
LOI_259:307:double_kurtosis(double):sumPD => ~sumPD
LOI_260:307:double_kurtosis(double):data.length => ~data.length
LOI_261:308:double_kurtosis(double):moment4 => ~moment4
LOI_262:308:double_kurtosis(double):standardDeviation => ~standardDeviation
LOI_263:308:double_kurtosis(double):standardDeviation => ~standardDeviation
LOI_264:308:double_kurtosis(double):standardDeviation => ~standardDeviation
LOI_265:308:double_kurtosis(double):standardDeviation => ~standardDeviation
LOI_266:314:double_logGamma(double):xx => ~xx
LOI_267:315:double_logGamma(double):x => ~x
LOI_268:316:double_logGamma(double):x => ~x
LOI_269:316:double_logGamma(double):tmp => ~tmp
LOI_270:319:double_logGamma(double):j => ~j
LOI_271:319:double_logGamma(double):j => ~j
LOI_272:320:double_logGamma(double):x => ~x
LOI_273:321:double_logGamma(double):j => ~j
LOI_274:321:double_logGamma(double):x => ~x
LOI_275:323:double_logGamma(double):tmp => ~tmp
LOI_276:323:double_logGamma(double):ser => ~ser
LOI_277:329:double_pooledMean(double,double):i => ~i
LOI_278:329:double_pooledMean(double,double):data1.length => ~data1.length
LOI_279:329:double_pooledMean(double,double):i => ~i
LOI_280:330:double_pooledMean(double,double):i => ~i
LOI_281:332:double_pooledMean(double,double):sum1 => ~sum1
LOI_282:332:double_pooledMean(double,double):data1.length => ~data1.length
LOI_283:334:double_pooledMean(double,double):i => ~i
LOI_284:334:double_pooledMean(double,double):data2.length => ~data2.length
LOI_285:334:double_pooledMean(double,double):i => ~i
LOI_286:335:double_pooledMean(double,double):i => ~i
LOI_287:337:double_pooledMean(double,double):sum2 => ~sum2
LOI_288:337:double_pooledMean(double,double):data2.length => ~data2.length
LOI_289:338:double_pooledMean(double,double):data1.length => ~data1.length
LOI_290:338:double_pooledMean(double,double):mean1 => ~mean1
LOI_291:338:double_pooledMean(double,double):data2.length => ~data2.length
LOI_292:338:double_pooledMean(double,double):mean2 => ~mean2
LOI_293:338:double_pooledMean(double,double):data1.length => ~data1.length
LOI_294:338:double_pooledMean(double,double):data2.length => ~data2.length
LOI_295:345:double_pooledVariance(double,double):i => ~i
LOI_296:345:double_pooledVariance(double,double):data1.length => ~data1.length
LOI_297:345:double_pooledVariance(double,double):i => ~i
LOI_298:346:double_pooledVariance(double,double):i => ~i
LOI_299:347:double_pooledVariance(double,double):i => ~i
LOI_300:347:double_pooledVariance(double,double):i => ~i
LOI_301:349:double_pooledVariance(double,double):sum1 => ~sum1
LOI_302:349:double_pooledVariance(double,double):data1.length => ~data1.length
LOI_303:350:double_pooledVariance(double,double):sumSq1 => ~sumSq1
LOI_304:350:double_pooledVariance(double,double):mean1 => ~mean1
LOI_305:350:double_pooledVariance(double,double):sum1 => ~sum1
LOI_306:350:double_pooledVariance(double,double):data1.length => ~data1.length
LOI_307:353:double_pooledVariance(double,double):i => ~i
LOI_308:353:double_pooledVariance(double,double):data2.length => ~data2.length
LOI_309:353:double_pooledVariance(double,double):i => ~i
LOI_310:354:double_pooledVariance(double,double):i => ~i
LOI_311:355:double_pooledVariance(double,double):i => ~i
LOI_312:355:double_pooledVariance(double,double):i => ~i
LOI_313:357:double_pooledVariance(double,double):sum2 => ~sum2
LOI_314:357:double_pooledVariance(double,double):data2.length => ~data2.length
LOI_315:358:double_pooledVariance(double,double):sumSq2 => ~sumSq2
LOI_316:358:double_pooledVariance(double,double):mean2 => ~mean2
LOI_317:358:double_pooledVariance(double,double):sum2 => ~sum2
LOI_318:358:double_pooledVariance(double,double):data2.length => ~data2.length
LOI_319:359:double_pooledVariance(double,double):data1.length => ~data1.length
LOI_320:359:double_pooledVariance(double,double):var1 => ~var1
LOI_321:359:double_pooledVariance(double,double):data2.length => ~data2.length
LOI_322:359:double_pooledVariance(double,double):var2 => ~var2
LOI_323:359:double_pooledVariance(double,double):data1.length => ~data1.length
LOI_324:359:double_pooledVariance(double,double):data2.length => ~data2.length
LOI_325:367:double_polevl(double,double,int):i => ~i
LOI_326:367:double_polevl(double,double,int):N => ~N
LOI_327:367:double_polevl(double,double,int):i => ~i
LOI_328:368:double_polevl(double,double,int):ans => ~ans
LOI_329:368:double_polevl(double,double,int):x => ~x
LOI_330:368:double_polevl(double,double,int):i => ~i
LOI_331:370:double_polevl(double,double,int):ans => ~ans
LOI_332:375:double_rankInterpolated(double,double,int):index => ~index
LOI_333:376:double_rankInterpolated(double,double,int):index => ~index
LOI_334:377:double_rankInterpolated(double,double,int):sortedList.length => ~sortedList.length
LOI_335:378:double_rankInterpolated(double,double,int):to => ~to
LOI_336:378:double_rankInterpolated(double,double,int):s => ~s
LOI_337:378:double_rankInterpolated(double,double,int):to => ~to
LOI_338:378:double_rankInterpolated(double,double,int):element => ~element
LOI_339:379:double_rankInterpolated(double,double,int):to => ~to
LOI_340:381:double_rankInterpolated(double,double,int):to => ~to
LOI_341:383:double_rankInterpolated(double,double,int):index => ~index
LOI_342:384:double_rankInterpolated(double,double,int):insertionPoint => ~insertionPoint
LOI_343:384:double_rankInterpolated(double,double,int):insertionPoint => ~insertionPoint
LOI_344:384:double_rankInterpolated(double,double,int):sortedList.length => ~sortedList.length
LOI_345:385:double_rankInterpolated(double,double,int):insertionPoint => ~insertionPoint
LOI_346:387:double_rankInterpolated(double,double,int):insertionPoint => ~insertionPoint
LOI_347:388:double_rankInterpolated(double,double,int):insertionPoint => ~insertionPoint
LOI_348:389:double_rankInterpolated(double,double,int):element => ~element
LOI_349:389:double_rankInterpolated(double,double,int):from => ~from
LOI_350:389:double_rankInterpolated(double,double,int):to => ~to
LOI_351:389:double_rankInterpolated(double,double,int):from => ~from
LOI_352:390:double_rankInterpolated(double,double,int):insertionPoint => ~insertionPoint
LOI_353:390:double_rankInterpolated(double,double,int):delta => ~delta
LOI_354:398:double_sampleWeightedVariance(double,double):i => ~i
LOI_355:398:double_sampleWeightedVariance(double,double):data.length => ~data.length
LOI_356:398:double_sampleWeightedVariance(double,double):i => ~i
LOI_357:399:double_sampleWeightedVariance(double,double):i => ~i
LOI_358:400:double_sampleWeightedVariance(double,double):i => ~i
LOI_359:400:double_sampleWeightedVariance(double,double):i => ~i
LOI_360:401:double_sampleWeightedVariance(double,double):i => ~i
LOI_361:401:double_sampleWeightedVariance(double,double):i => ~i
LOI_362:401:double_sampleWeightedVariance(double,double):i => ~i
LOI_363:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts => ~sumOfSquaredProducts
LOI_364:403:double_sampleWeightedVariance(double,double):sumOfProducts => ~sumOfProducts
LOI_365:403:double_sampleWeightedVariance(double,double):sumOfProducts => ~sumOfProducts
LOI_366:403:double_sampleWeightedVariance(double,double):sumOfWeights => ~sumOfWeights
LOI_367:403:double_sampleWeightedVariance(double,double):sumOfWeights => ~sumOfWeights
LOI_368:411:double_skew(double):i => ~i
LOI_369:411:double_skew(double):data.length => ~data.length
LOI_370:411:double_skew(double):i => ~i
LOI_371:412:double_skew(double):i => ~i
LOI_372:413:double_skew(double):i => ~i
LOI_373:413:double_skew(double):i => ~i
LOI_374:415:double_skew(double):sum => ~sum
LOI_375:415:double_skew(double):data.length => ~data.length
LOI_376:416:double_skew(double):sumSq => ~sumSq
LOI_377:416:double_skew(double):mean => ~mean
LOI_378:416:double_skew(double):sum => ~sum
LOI_379:416:double_skew(double):data.length => ~data.length
LOI_380:417:double_skew(double):i => ~i
LOI_381:417:double_skew(double):data.length => ~data.length
LOI_382:417:double_skew(double):i => ~i
LOI_383:418:double_skew(double):i => ~i
LOI_384:418:double_skew(double):mean => ~mean
LOI_385:420:double_skew(double):sumPD => ~sumPD
LOI_386:420:double_skew(double):data.length => ~data.length
LOI_387:421:double_skew(double):moment3 => ~moment3
LOI_388:421:double_skew(double):standardDeviation => ~standardDeviation
LOI_389:421:double_skew(double):standardDeviation => ~standardDeviation
LOI_390:421:double_skew(double):standardDeviation => ~standardDeviation
LOI_391:428:double_standardize(double):i => ~i
LOI_392:428:double_standardize(double):data.length => ~data.length
LOI_393:428:double_standardize(double):i => ~i
LOI_394:429:double_standardize(double):i => ~i
LOI_395:430:double_standardize(double):i => ~i
LOI_396:430:double_standardize(double):i => ~i
LOI_397:432:double_standardize(double):sum => ~sum
LOI_398:432:double_standardize(double):data.length => ~data.length
LOI_399:433:double_standardize(double):sumSq => ~sumSq
LOI_400:433:double_standardize(double):mean => ~mean
LOI_401:433:double_standardize(double):sum => ~sum
LOI_402:433:double_standardize(double):data.length => ~data.length
LOI_403:434:double_standardize(double):i => ~i
LOI_404:434:double_standardize(double):data.length => ~data.length
LOI_405:434:double_standardize(double):i => ~i
LOI_406:435:double_standardize(double):i => ~i
LOI_407:435:double_standardize(double):i => ~i
LOI_408:435:double_standardize(double):mean => ~mean
LOI_409:435:double_standardize(double):sd => ~sd
LOI_410:444:double_weightedRMS(double,double):i => ~i
LOI_411:444:double_weightedRMS(double,double):data.length => ~data.length
LOI_412:444:double_weightedRMS(double,double):i => ~i
LOI_413:445:double_weightedRMS(double,double):i => ~i
LOI_414:445:double_weightedRMS(double,double):i => ~i
LOI_415:446:double_weightedRMS(double,double):i => ~i
LOI_416:446:double_weightedRMS(double,double):i => ~i
LOI_417:446:double_weightedRMS(double,double):i => ~i
LOI_418:448:double_weightedRMS(double,double):sumOfProducts => ~sumOfProducts
LOI_419:448:double_weightedRMS(double,double):sumOfSquaredProducts => ~sumOfSquaredProducts
LOI_420:454:double_harmonicMean(double):i => ~i
LOI_421:454:double_harmonicMean(double):data.length => ~data.length
LOI_422:454:double_harmonicMean(double):i => ~i
LOI_423:455:double_harmonicMean(double):i => ~i
LOI_424:457:double_harmonicMean(double):data.length => ~data.length
LOI_425:457:double_harmonicMean(double):sumOfInversions => ~sumOfInversions
LOI_426:463:double_sumOfPowerOfDeviations(double,int,double):i => ~i
LOI_427:463:double_sumOfPowerOfDeviations(double,int,double):data.length => ~data.length
LOI_428:463:double_sumOfPowerOfDeviations(double,int,double):i => ~i
LOI_429:464:double_sumOfPowerOfDeviations(double,int,double):i => ~i
LOI_430:464:double_sumOfPowerOfDeviations(double,int,double):c => ~c
LOI_431:464:double_sumOfPowerOfDeviations(double,int,double):k => ~k
LOI_432:466:double_sumOfPowerOfDeviations(double,int,double):sum => ~sum
LOI_433:471:double_power(double,int):i => ~i
LOI_434:471:double_power(double,int):data.length => ~data.length
LOI_435:471:double_power(double,int):i => ~i
LOI_436:472:double_power(double,int):i => ~i
LOI_437:472:double_power(double,int):i => ~i
LOI_438:472:double_power(double,int):k => ~k
LOI_439:479:double_square(double):i => ~i
LOI_440:479:double_square(double):data.length => ~data.length
LOI_441:479:double_square(double):i => ~i
LOI_442:480:double_square(double):i => ~i
LOI_443:480:double_square(double):i => ~i
LOI_444:480:double_square(double):i => ~i
ASRS_1:21:double_autoCorrelation(double,int,double,double):run += (data[i] - mean) * (data[i - lag] - mean) => run /= (data[i] - mean) * (data[i - lag] - mean)
ASRS_2:21:double_autoCorrelation(double,int,double,double):run += (data[i] - mean) * (data[i - lag] - mean) => run *= (data[i] - mean) * (data[i - lag] - mean)
ASRS_3:21:double_autoCorrelation(double,int,double,double):run += (data[i] - mean) * (data[i - lag] - mean) => run -= (data[i] - mean) * (data[i - lag] - mean)
ASRS_4:21:double_autoCorrelation(double,int,double,double):run += (data[i] - mean) * (data[i - lag] - mean) => run %= (data[i] - mean) * (data[i - lag] - mean)
ASRS_5:55:double_covariance(double,double):sumx += x => sumx /= x
ASRS_6:55:double_covariance(double,double):sumx += x => sumx *= x
ASRS_7:55:double_covariance(double,double):sumx += x => sumx -= x
ASRS_8:55:double_covariance(double,double):sumx += x => sumx %= x
ASRS_9:56:double_covariance(double,double):Sxy += (x - sumx / (i + 1)) * (y - sumy / i) => Sxy /= (x - sumx / (i + 1)) * (y - sumy / i)
ASRS_10:56:double_covariance(double,double):Sxy += (x - sumx / (i + 1)) * (y - sumy / i) => Sxy *= (x - sumx / (i + 1)) * (y - sumy / i)
ASRS_11:56:double_covariance(double,double):Sxy += (x - sumx / (i + 1)) * (y - sumy / i) => Sxy -= (x - sumx / (i + 1)) * (y - sumy / i)
ASRS_12:56:double_covariance(double,double):Sxy += (x - sumx / (i + 1)) * (y - sumy / i) => Sxy %= (x - sumx / (i + 1)) * (y - sumy / i)
ASRS_13:57:double_covariance(double,double):sumy += y => sumy /= y
ASRS_14:57:double_covariance(double,double):sumy += y => sumy *= y
ASRS_15:57:double_covariance(double,double):sumy += y => sumy -= y
ASRS_16:57:double_covariance(double,double):sumy += y => sumy %= y
ASRS_17:68:double_durbinWatson(double):run += x * x => run /= x * x
ASRS_18:68:double_durbinWatson(double):run += x * x => run *= x * x
ASRS_19:68:double_durbinWatson(double):run += x * x => run -= x * x
ASRS_20:68:double_durbinWatson(double):run += x * x => run %= x * x
ASRS_21:82:double_lag1(double,double):q += (delta0 * delta1 - q) / (i + 1) => q /= (delta0 * delta1 - q) / (i + 1)
ASRS_22:82:double_lag1(double,double):q += (delta0 * delta1 - q) / (i + 1) => q *= (delta0 * delta1 - q) / (i + 1)
ASRS_23:82:double_lag1(double,double):q += (delta0 * delta1 - q) / (i + 1) => q -= (delta0 * delta1 - q) / (i + 1)
ASRS_24:82:double_lag1(double,double):q += (delta0 * delta1 - q) / (i + 1) => q %= (delta0 * delta1 - q) / (i + 1)
ASRS_25:83:double_lag1(double,double):v += (delta1 * delta1 - v) / (i + 1) => v /= (delta1 * delta1 - v) / (i + 1)
ASRS_26:83:double_lag1(double,double):v += (delta1 * delta1 - v) / (i + 1) => v *= (delta1 * delta1 - v) / (i + 1)
ASRS_27:83:double_lag1(double,double):v += (delta1 * delta1 - v) / (i + 1) => v -= (delta1 * delta1 - v) / (i + 1)
ASRS_28:83:double_lag1(double,double):v += (delta1 * delta1 - v) / (i + 1) => v %= (delta1 * delta1 - v) / (i + 1)
ASRS_29:106:double_meanDeviation(double,double):sum += Math.abs( elements[i] - mean ) => sum /= Math.abs( elements[i] - mean )
ASRS_30:106:double_meanDeviation(double,double):sum += Math.abs( elements[i] - mean ) => sum *= Math.abs( elements[i] - mean )
ASRS_31:106:double_meanDeviation(double,double):sum += Math.abs( elements[i] - mean ) => sum -= Math.abs( elements[i] - mean )
ASRS_32:106:double_meanDeviation(double,double):sum += Math.abs( elements[i] - mean ) => sum %= Math.abs( elements[i] - mean )
ASRS_33:128:double_product(double):product *= elements[i] => product += elements[i]
ASRS_34:128:double_product(double):product *= elements[i] => product /= elements[i]
ASRS_35:128:double_product(double):product *= elements[i] => product -= elements[i]
ASRS_36:128:double_product(double):product *= elements[i] => product %= elements[i]
ASRS_37:179:double_sampleVariance(double,double):sum += delta * delta => sum /= delta * delta
ASRS_38:179:double_sampleVariance(double,double):sum += delta * delta => sum *= delta * delta
ASRS_39:179:double_sampleVariance(double,double):sum += delta * delta => sum -= delta * delta
ASRS_40:179:double_sampleVariance(double,double):sum += delta * delta => sum %= delta * delta
ASRS_41:188:double_sumOfLogarithms(double):logsum += Math.log( elements[i] ) => logsum /= Math.log( elements[i] )
ASRS_42:188:double_sumOfLogarithms(double):logsum += Math.log( elements[i] ) => logsum *= Math.log( elements[i] )
ASRS_43:188:double_sumOfLogarithms(double):logsum += Math.log( elements[i] ) => logsum -= Math.log( elements[i] )
ASRS_44:188:double_sumOfLogarithms(double):logsum += Math.log( elements[i] ) => logsum %= Math.log( elements[i] )
ASRS_45:198:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[i]) / --N => mean /= (mean - sortedElements[i]) / --N
ASRS_46:198:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[i]) / --N => mean *= (mean - sortedElements[i]) / --N
ASRS_47:198:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[i]) / --N => mean -= (mean - sortedElements[i]) / --N
ASRS_48:198:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[i]) / --N => mean %= (mean - sortedElements[i]) / --N
ASRS_49:201:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[N0 - 1 - i]) / --N => mean /= (mean - sortedElements[N0 - 1 - i]) / --N
ASRS_50:201:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[N0 - 1 - i]) / --N => mean *= (mean - sortedElements[N0 - 1 - i]) / --N
ASRS_51:201:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[N0 - 1 - i]) / --N => mean -= (mean - sortedElements[N0 - 1 - i]) / --N
ASRS_52:201:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[N0 - 1 - i]) / --N => mean %= (mean - sortedElements[N0 - 1 - i]) / --N
ASRS_53:213:double_weightedMean(double,double):sum += elements[i] * w => sum /= elements[i] * w
ASRS_54:213:double_weightedMean(double,double):sum += elements[i] * w => sum *= elements[i] * w
ASRS_55:213:double_weightedMean(double,double):sum += elements[i] * w => sum -= elements[i] * w
ASRS_56:213:double_weightedMean(double,double):sum += elements[i] * w => sum %= elements[i] * w
ASRS_57:214:double_weightedMean(double,double):weightsSum += w => weightsSum /= w
ASRS_58:214:double_weightedMean(double,double):weightsSum += w => weightsSum *= w
ASRS_59:214:double_weightedMean(double,double):weightsSum += w => weightsSum -= w
ASRS_60:214:double_weightedMean(double,double):weightsSum += w => weightsSum %= w
ASRS_61:253:double_binomial(double,long):binomial *= a++ / b++ => binomial += a++ / b++
ASRS_62:253:double_binomial(double,long):binomial *= a++ / b++ => binomial /= a++ / b++
ASRS_63:253:double_binomial(double,long):binomial *= a++ / b++ => binomial -= a++ / b++
ASRS_64:253:double_binomial(double,long):binomial *= a++ / b++ => binomial %= a++ / b++
ASRS_65:274:double_winsorizedMean(double,int,int):sum += sortedElements[i] => sum /= sortedElements[i]
ASRS_66:274:double_winsorizedMean(double,int,int):sum += sortedElements[i] => sum *= sortedElements[i]
ASRS_67:274:double_winsorizedMean(double,int,int):sum += sortedElements[i] => sum -= sortedElements[i]
ASRS_68:274:double_winsorizedMean(double,int,int):sum += sortedElements[i] => sum %= sortedElements[i]
ASRS_69:279:double_winsorizedMean(double,int,int):mean += (leftElement - sortedElements[i]) / N => mean /= (leftElement - sortedElements[i]) / N
ASRS_70:279:double_winsorizedMean(double,int,int):mean += (leftElement - sortedElements[i]) / N => mean *= (leftElement - sortedElements[i]) / N
ASRS_71:279:double_winsorizedMean(double,int,int):mean += (leftElement - sortedElements[i]) / N => mean -= (leftElement - sortedElements[i]) / N
ASRS_72:279:double_winsorizedMean(double,int,int):mean += (leftElement - sortedElements[i]) / N => mean %= (leftElement - sortedElements[i]) / N
ASRS_73:283:double_winsorizedMean(double,int,int):mean += (rightElement - sortedElements[N - 1 - i]) / N => mean /= (rightElement - sortedElements[N - 1 - i]) / N
ASRS_74:283:double_winsorizedMean(double,int,int):mean += (rightElement - sortedElements[N - 1 - i]) / N => mean *= (rightElement - sortedElements[N - 1 - i]) / N
ASRS_75:283:double_winsorizedMean(double,int,int):mean += (rightElement - sortedElements[N - 1 - i]) / N => mean -= (rightElement - sortedElements[N - 1 - i]) / N
ASRS_76:283:double_winsorizedMean(double,int,int):mean += (rightElement - sortedElements[N - 1 - i]) / N => mean %= (rightElement - sortedElements[N - 1 - i]) / N
ASRS_77:299:double_kurtosis(double):sum += data[i] => sum /= data[i]
ASRS_78:299:double_kurtosis(double):sum += data[i] => sum *= data[i]
ASRS_79:299:double_kurtosis(double):sum += data[i] => sum -= data[i]
ASRS_80:299:double_kurtosis(double):sum += data[i] => sum %= data[i]
ASRS_81:300:double_kurtosis(double):sumSq += data[i] * data[i] => sumSq /= data[i] * data[i]
ASRS_82:300:double_kurtosis(double):sumSq += data[i] * data[i] => sumSq *= data[i] * data[i]
ASRS_83:300:double_kurtosis(double):sumSq += data[i] * data[i] => sumSq -= data[i] * data[i]
ASRS_84:300:double_kurtosis(double):sumSq += data[i] * data[i] => sumSq %= data[i] * data[i]
ASRS_85:305:double_kurtosis(double):sumPD += Math.pow( data[i] - mean, 4 ) => sumPD /= Math.pow( data[i] - mean, 4 )
ASRS_86:305:double_kurtosis(double):sumPD += Math.pow( data[i] - mean, 4 ) => sumPD *= Math.pow( data[i] - mean, 4 )
ASRS_87:305:double_kurtosis(double):sumPD += Math.pow( data[i] - mean, 4 ) => sumPD -= Math.pow( data[i] - mean, 4 )
ASRS_88:305:double_kurtosis(double):sumPD += Math.pow( data[i] - mean, 4 ) => sumPD %= Math.pow( data[i] - mean, 4 )
ASRS_89:316:double_logGamma(double):tmp -= (x + 0.5) * Math.log( tmp ) => tmp += (x + 0.5) * Math.log( tmp )
ASRS_90:316:double_logGamma(double):tmp -= (x + 0.5) * Math.log( tmp ) => tmp /= (x + 0.5) * Math.log( tmp )
ASRS_91:316:double_logGamma(double):tmp -= (x + 0.5) * Math.log( tmp ) => tmp *= (x + 0.5) * Math.log( tmp )
ASRS_92:316:double_logGamma(double):tmp -= (x + 0.5) * Math.log( tmp ) => tmp %= (x + 0.5) * Math.log( tmp )
ASRS_93:321:double_logGamma(double):ser += coeff[j] / x => ser /= coeff[j] / x
ASRS_94:321:double_logGamma(double):ser += coeff[j] / x => ser *= coeff[j] / x
ASRS_95:321:double_logGamma(double):ser += coeff[j] / x => ser -= coeff[j] / x
ASRS_96:321:double_logGamma(double):ser += coeff[j] / x => ser %= coeff[j] / x
ASRS_97:330:double_pooledMean(double,double):sum1 += data1[i] => sum1 /= data1[i]
ASRS_98:330:double_pooledMean(double,double):sum1 += data1[i] => sum1 *= data1[i]
ASRS_99:330:double_pooledMean(double,double):sum1 += data1[i] => sum1 -= data1[i]
ASRS_100:330:double_pooledMean(double,double):sum1 += data1[i] => sum1 %= data1[i]
ASRS_101:335:double_pooledMean(double,double):sum2 += data2[i] => sum2 /= data2[i]
ASRS_102:335:double_pooledMean(double,double):sum2 += data2[i] => sum2 *= data2[i]
ASRS_103:335:double_pooledMean(double,double):sum2 += data2[i] => sum2 -= data2[i]
ASRS_104:335:double_pooledMean(double,double):sum2 += data2[i] => sum2 %= data2[i]
ASRS_105:346:double_pooledVariance(double,double):sum1 += data1[i] => sum1 /= data1[i]
ASRS_106:346:double_pooledVariance(double,double):sum1 += data1[i] => sum1 *= data1[i]
ASRS_107:346:double_pooledVariance(double,double):sum1 += data1[i] => sum1 -= data1[i]
ASRS_108:346:double_pooledVariance(double,double):sum1 += data1[i] => sum1 %= data1[i]
ASRS_109:347:double_pooledVariance(double,double):sumSq1 += data1[i] * data1[i] => sumSq1 /= data1[i] * data1[i]
ASRS_110:347:double_pooledVariance(double,double):sumSq1 += data1[i] * data1[i] => sumSq1 *= data1[i] * data1[i]
ASRS_111:347:double_pooledVariance(double,double):sumSq1 += data1[i] * data1[i] => sumSq1 -= data1[i] * data1[i]
ASRS_112:347:double_pooledVariance(double,double):sumSq1 += data1[i] * data1[i] => sumSq1 %= data1[i] * data1[i]
ASRS_113:354:double_pooledVariance(double,double):sum2 += data2[i] => sum2 /= data2[i]
ASRS_114:354:double_pooledVariance(double,double):sum2 += data2[i] => sum2 *= data2[i]
ASRS_115:354:double_pooledVariance(double,double):sum2 += data2[i] => sum2 -= data2[i]
ASRS_116:354:double_pooledVariance(double,double):sum2 += data2[i] => sum2 %= data2[i]
ASRS_117:355:double_pooledVariance(double,double):sumSq2 += data2[i] * data2[i] => sumSq2 /= data2[i] * data2[i]
ASRS_118:355:double_pooledVariance(double,double):sumSq2 += data2[i] * data2[i] => sumSq2 *= data2[i] * data2[i]
ASRS_119:355:double_pooledVariance(double,double):sumSq2 += data2[i] * data2[i] => sumSq2 -= data2[i] * data2[i]
ASRS_120:355:double_pooledVariance(double,double):sumSq2 += data2[i] * data2[i] => sumSq2 %= data2[i] * data2[i]
ASRS_121:399:double_sampleWeightedVariance(double,double):sumOfWeights += weights[i] => sumOfWeights /= weights[i]
ASRS_122:399:double_sampleWeightedVariance(double,double):sumOfWeights += weights[i] => sumOfWeights *= weights[i]
ASRS_123:399:double_sampleWeightedVariance(double,double):sumOfWeights += weights[i] => sumOfWeights -= weights[i]
ASRS_124:399:double_sampleWeightedVariance(double,double):sumOfWeights += weights[i] => sumOfWeights %= weights[i]
ASRS_125:400:double_sampleWeightedVariance(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts /= data[i] * weights[i]
ASRS_126:400:double_sampleWeightedVariance(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts *= data[i] * weights[i]
ASRS_127:400:double_sampleWeightedVariance(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts -= data[i] * weights[i]
ASRS_128:400:double_sampleWeightedVariance(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts %= data[i] * weights[i]
ASRS_129:401:double_sampleWeightedVariance(double,double):sumOfSquaredProducts += data[i] * data[i] * weights[i] => sumOfSquaredProducts /= data[i] * data[i] * weights[i]
ASRS_130:401:double_sampleWeightedVariance(double,double):sumOfSquaredProducts += data[i] * data[i] * weights[i] => sumOfSquaredProducts *= data[i] * data[i] * weights[i]
ASRS_131:401:double_sampleWeightedVariance(double,double):sumOfSquaredProducts += data[i] * data[i] * weights[i] => sumOfSquaredProducts -= data[i] * data[i] * weights[i]
ASRS_132:401:double_sampleWeightedVariance(double,double):sumOfSquaredProducts += data[i] * data[i] * weights[i] => sumOfSquaredProducts %= data[i] * data[i] * weights[i]
ASRS_133:412:double_skew(double):sum += data[i] => sum /= data[i]
ASRS_134:412:double_skew(double):sum += data[i] => sum *= data[i]
ASRS_135:412:double_skew(double):sum += data[i] => sum -= data[i]
ASRS_136:412:double_skew(double):sum += data[i] => sum %= data[i]
ASRS_137:413:double_skew(double):sumSq += data[i] * data[i] => sumSq /= data[i] * data[i]
ASRS_138:413:double_skew(double):sumSq += data[i] * data[i] => sumSq *= data[i] * data[i]
ASRS_139:413:double_skew(double):sumSq += data[i] * data[i] => sumSq -= data[i] * data[i]
ASRS_140:413:double_skew(double):sumSq += data[i] * data[i] => sumSq %= data[i] * data[i]
ASRS_141:418:double_skew(double):sumPD += Math.pow( data[i] - mean, 3 ) => sumPD /= Math.pow( data[i] - mean, 3 )
ASRS_142:418:double_skew(double):sumPD += Math.pow( data[i] - mean, 3 ) => sumPD *= Math.pow( data[i] - mean, 3 )
ASRS_143:418:double_skew(double):sumPD += Math.pow( data[i] - mean, 3 ) => sumPD -= Math.pow( data[i] - mean, 3 )
ASRS_144:418:double_skew(double):sumPD += Math.pow( data[i] - mean, 3 ) => sumPD %= Math.pow( data[i] - mean, 3 )
ASRS_145:429:double_standardize(double):sum += data[i] => sum /= data[i]
ASRS_146:429:double_standardize(double):sum += data[i] => sum *= data[i]
ASRS_147:429:double_standardize(double):sum += data[i] => sum -= data[i]
ASRS_148:429:double_standardize(double):sum += data[i] => sum %= data[i]
ASRS_149:430:double_standardize(double):sumSq += data[i] * data[i] => sumSq /= data[i] * data[i]
ASRS_150:430:double_standardize(double):sumSq += data[i] * data[i] => sumSq *= data[i] * data[i]
ASRS_151:430:double_standardize(double):sumSq += data[i] * data[i] => sumSq -= data[i] * data[i]
ASRS_152:430:double_standardize(double):sumSq += data[i] * data[i] => sumSq %= data[i] * data[i]
ASRS_153:445:double_weightedRMS(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts /= data[i] * weights[i]
ASRS_154:445:double_weightedRMS(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts *= data[i] * weights[i]
ASRS_155:445:double_weightedRMS(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts -= data[i] * weights[i]
ASRS_156:445:double_weightedRMS(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts %= data[i] * weights[i]
ASRS_157:455:double_harmonicMean(double):sumOfInversions += 1 / data[i] => sumOfInversions /= 1 / data[i]
ASRS_158:455:double_harmonicMean(double):sumOfInversions += 1 / data[i] => sumOfInversions *= 1 / data[i]
ASRS_159:455:double_harmonicMean(double):sumOfInversions += 1 / data[i] => sumOfInversions -= 1 / data[i]
ASRS_160:455:double_harmonicMean(double):sumOfInversions += 1 / data[i] => sumOfInversions %= 1 / data[i]
ASRS_161:464:double_sumOfPowerOfDeviations(double,int,double):sum += Math.pow( data[i] - c, k ) => sum /= Math.pow( data[i] - c, k )
ASRS_162:464:double_sumOfPowerOfDeviations(double,int,double):sum += Math.pow( data[i] - c, k ) => sum *= Math.pow( data[i] - c, k )
ASRS_163:464:double_sumOfPowerOfDeviations(double,int,double):sum += Math.pow( data[i] - c, k ) => sum -= Math.pow( data[i] - c, k )
ASRS_164:464:double_sumOfPowerOfDeviations(double,int,double):sum += Math.pow( data[i] - c, k ) => sum %= Math.pow( data[i] - c, k )
SDL_1:21:double_autoCorrelation(double,int,double,double): int N = data.length; double run = 0; for (int i = lag; i < N; ++i) {     run += (data[i] - mean) * (data[i - lag] - mean); } return run / (N - lag) / variance;  =>   int N = data.length; double run = 0; return run / (N - lag) / variance;
SDL_2:21:double_autoCorrelation(double,int,double,double): run += (data[i] - mean) * (data[i - lag] - mean);  =>  
SDL_3:23:double_autoCorrelation(double,int,double,double): for (int i = lag; i < N; ++i) {     run += (data[i] - mean) * (data[i - lag] - mean); }  =>   for (int i = lag;; ++i) {     run += (data[i] - mean) * (data[i - lag] - mean); }
SDL_4:23:double_autoCorrelation(double,int,double,double): for (int i = lag; i < N; ++i) {     run += (data[i] - mean) * (data[i - lag] - mean); }  =>   for (int i = lag; i < N;) {     run += (data[i] - mean) * (data[i - lag] - mean); }
SDL_5:24:double_autoCorrelation(double,int,double,double): return run / (N - lag) / variance;  =>   return 0;
SDL_6:31:int_binarySearchFromTo(double,double,int,int): int low = from; int high = to; while (low <= high) {     int mid = (low + high) / 2;     double midVal = elements[mid];     if (midVal < key) {         low = mid + 1;     } else {         if (midVal > key) {             high = mid - 1;         } else {             return mid;         }     } } return -(low + 1);  =>   int low = from; int high = to; return -(low + 1);
SDL_7:33:int_binarySearchFromTo(double,double,int,int): int mid = (low + high) / 2; double midVal = elements[mid]; if (midVal < key) {     low = mid + 1; } else {     if (midVal > key) {         high = mid - 1;     } else {         return mid;     } }  =>   int mid = (low + high) / 2; double midVal = elements[mid];
SDL_8:43:int_binarySearchFromTo(double,double,int,int): while (low <= high) {     int mid = (low + high) / 2;     double midVal = elements[mid];     if (midVal < key) {         low = mid + 1;     } else {         if (midVal > key) {             high = mid - 1;         } else {             return mid;         }     } }  =>   while (true) {     int mid = (low + high) / 2;     double midVal = elements[mid];     if (midVal < key) {         low = mid + 1;     } else {         if (midVal > key) {             high = mid - 1;         } else {             return mid;         }     } }
SDL_9:34:int_binarySearchFromTo(double,double,int,int): low = mid + 1;  =>  
SDL_10:42:int_binarySearchFromTo(double,double,int,int): if (midVal < key) {     low = mid + 1; } else {     if (midVal > key) {         high = mid - 1;     } else {         return mid;     } }  =>   if (true) {     low = mid + 1; } else {     if (midVal > key) {         high = mid - 1;     } else {         return mid;     } }
SDL_11:36:int_binarySearchFromTo(double,double,int,int): if (midVal > key) {     high = mid - 1; } else {     return mid; }  =>  
SDL_12:37:int_binarySearchFromTo(double,double,int,int): high = mid - 1;  =>  
SDL_13:41:int_binarySearchFromTo(double,double,int,int): if (midVal > key) {     high = mid - 1; } else {     return mid; }  =>   if (true) {     high = mid - 1; } else {     return mid; }
SDL_14:40:int_binarySearchFromTo(double,double,int,int): return mid;  =>   return 0;
SDL_15:44:int_binarySearchFromTo(double,double,int,int): return -(low + 1);  =>   return 0;
SDL_16:53:double_covariance(double,double): int size = elements1.length; double sumx = elements1[0]; double sumy = elements2[0]; double Sxy = 0; for (int i = 1; i < size; ++i) {     double x = elements1[i];     double y = elements2[i];     sumx += x;     Sxy += (x - sumx / (i + 1)) * (y - sumy / i);     sumy += y; } return Sxy / (size - 1);  =>   int size = elements1.length; double sumx = elements1[0]; double sumy = elements2[0]; double Sxy = 0; return Sxy / (size - 1);
SDL_17:57:double_covariance(double,double): double x = elements1[i]; double y = elements2[i]; sumx += x; Sxy += (x - sumx / (i + 1)) * (y - sumy / i); sumy += y;  =>   double x = elements1[i]; double y = elements2[i]; Sxy += (x - sumx / (i + 1)) * (y - sumy / i); sumy += y;
SDL_18:57:double_covariance(double,double): double x = elements1[i]; double y = elements2[i]; sumx += x; Sxy += (x - sumx / (i + 1)) * (y - sumy / i); sumy += y;  =>   double x = elements1[i]; double y = elements2[i]; sumx += x; sumy += y;
SDL_19:57:double_covariance(double,double): double x = elements1[i]; double y = elements2[i]; sumx += x; Sxy += (x - sumx / (i + 1)) * (y - sumy / i); sumy += y;  =>   double x = elements1[i]; double y = elements2[i]; sumx += x; Sxy += (x - sumx / (i + 1)) * (y - sumy / i);
SDL_20:59:double_covariance(double,double): for (int i = 1; i < size; ++i) {     double x = elements1[i];     double y = elements2[i];     sumx += x;     Sxy += (x - sumx / (i + 1)) * (y - sumy / i);     sumy += y; }  =>   for (int i = 1;; ++i) {     double x = elements1[i];     double y = elements2[i];     sumx += x;     Sxy += (x - sumx / (i + 1)) * (y - sumy / i);     sumy += y; }
SDL_21:59:double_covariance(double,double): for (int i = 1; i < size; ++i) {     double x = elements1[i];     double y = elements2[i];     sumx += x;     Sxy += (x - sumx / (i + 1)) * (y - sumy / i);     sumy += y; }  =>   for (int i = 1; i < size;) {     double x = elements1[i];     double y = elements2[i];     sumx += x;     Sxy += (x - sumx / (i + 1)) * (y - sumy / i);     sumy += y; }
SDL_22:60:double_covariance(double,double): return Sxy / (size - 1);  =>   return 0;
SDL_23:67:double_durbinWatson(double): int size = elements.length; double run = 0; for (int i = 1; i < size; ++i) {     double x = elements[i] - elements[i - 1];     run += x * x; } return run;  =>   int size = elements.length; double run = 0; return run;
SDL_24:68:double_durbinWatson(double): double x = elements[i] - elements[i - 1]; run += x * x;  =>   double x = elements[i] - elements[i - 1];
SDL_25:70:double_durbinWatson(double): for (int i = 1; i < size; ++i) {     double x = elements[i] - elements[i - 1];     run += x * x; }  =>   for (int i = 1;; ++i) {     double x = elements[i] - elements[i - 1];     run += x * x; }
SDL_26:70:double_durbinWatson(double): for (int i = 1; i < size; ++i) {     double x = elements[i] - elements[i - 1];     run += x * x; }  =>   for (int i = 1; i < size;) {     double x = elements[i] - elements[i - 1];     run += x * x; }
SDL_27:71:double_durbinWatson(double): return run;  =>   return 0;
SDL_28:81:double_lag1(double,double): int size = elements.length; double r1; double q = 0; double v = (elements[0] - mean) * (elements[0] - mean); for (int i = 1; i < size; i++) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); } r1 = q / v; return r1;  =>   int size = elements.length; double r1; double q = 0; double v = (elements[0] - mean) * (elements[0] - mean); r1 = q / v; return r1;
SDL_29:86:double_lag1(double,double): int size = elements.length; double r1; double q = 0; double v = (elements[0] - mean) * (elements[0] - mean); for (int i = 1; i < size; i++) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); } r1 = q / v; return r1;  =>   int size = elements.length; double r1; double q = 0; double v = (elements[0] - mean) * (elements[0] - mean); for (int i = 1; i < size; i++) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); } return r1;
SDL_30:83:double_lag1(double,double): double delta0 = elements[i - 1] - mean; double delta1 = elements[i] - mean; q += (delta0 * delta1 - q) / (i + 1); v += (delta1 * delta1 - v) / (i + 1);  =>   double delta0 = elements[i - 1] - mean; double delta1 = elements[i] - mean; v += (delta1 * delta1 - v) / (i + 1);
SDL_31:83:double_lag1(double,double): double delta0 = elements[i - 1] - mean; double delta1 = elements[i] - mean; q += (delta0 * delta1 - q) / (i + 1); v += (delta1 * delta1 - v) / (i + 1);  =>   double delta0 = elements[i - 1] - mean; double delta1 = elements[i] - mean; q += (delta0 * delta1 - q) / (i + 1);
SDL_32:85:double_lag1(double,double): for (int i = 1; i < size; i++) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); }  =>   for (int i = 1;; i++) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); }
SDL_33:85:double_lag1(double,double): for (int i = 1; i < size; i++) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); }  =>   for (int i = 1; i < size;) {     double delta0 = elements[i - 1] - mean;     double delta1 = elements[i] - mean;     q += (delta0 * delta1 - q) / (i + 1);     v += (delta1 * delta1 - v) / (i + 1); }
SDL_34:87:double_lag1(double,double): return r1;  =>   return 0;
SDL_35:94:double_max(double): int size = elements.length; double max = elements[size - 1]; for (int i = size - 1; --i >= 0;) {     if (elements[i] > max) {         max = elements[i];     } } return max;  =>   int size = elements.length; double max = elements[size - 1]; return max;
SDL_36:94:double_max(double): if (elements[i] > max) {     max = elements[i]; }  =>  
SDL_37:98:double_max(double): for (int i = size - 1; --i >= 0;) {     if (elements[i] > max) {         max = elements[i];     } }  =>   for (int i = size - 1;;) {     if (elements[i] > max) {         max = elements[i];     } }
SDL_38:95:double_max(double): max = elements[i];  =>  
SDL_39:97:double_max(double): if (elements[i] > max) {     max = elements[i]; }  =>   if (true) {     max = elements[i]; }
SDL_40:99:double_max(double): return max;  =>   return 0;
SDL_41:106:double_meanDeviation(double,double): int size = elements.length; double sum = 0; for (int i = size; --i >= 0;) {     sum += Math.abs( elements[i] - mean ); } return sum / size;  =>   int size = elements.length; double sum = 0; return sum / size;
SDL_42:106:double_meanDeviation(double,double): sum += Math.abs( elements[i] - mean );  =>  
SDL_43:108:double_meanDeviation(double,double): for (int i = size; --i >= 0;) {     sum += Math.abs( elements[i] - mean ); }  =>   for (int i = size;;) {     sum += Math.abs( elements[i] - mean ); }
SDL_44:109:double_meanDeviation(double,double): return sum / size;  =>   return 0;
SDL_45:116:double_min(double): int size = elements.length; double min = elements[size - 1]; for (int i = size - 1; --i >= 0;) {     if (elements[i] < min) {         min = elements[i];     } } return min;  =>   int size = elements.length; double min = elements[size - 1]; return min;
SDL_46:116:double_min(double): if (elements[i] < min) {     min = elements[i]; }  =>  
SDL_47:120:double_min(double): for (int i = size - 1; --i >= 0;) {     if (elements[i] < min) {         min = elements[i];     } }  =>   for (int i = size - 1;;) {     if (elements[i] < min) {         min = elements[i];     } }
SDL_48:117:double_min(double): min = elements[i];  =>  
SDL_49:119:double_min(double): if (elements[i] < min) {     min = elements[i]; }  =>   if (true) {     min = elements[i]; }
SDL_50:121:double_min(double): return min;  =>   return 0;
SDL_51:128:double_product(double): int size = elements.length; double product = 1; for (int i = size; --i >= 0;) {     product *= elements[i]; } return product;  =>   int size = elements.length; double product = 1; return product;
SDL_52:128:double_product(double): product *= elements[i];  =>  
SDL_53:130:double_product(double): for (int i = size; --i >= 0;) {     product *= elements[i]; }  =>   for (int i = size;;) {     product *= elements[i]; }
SDL_54:131:double_product(double): return product;  =>   return 0;
SDL_55:146:double_quantile(double,double): int n = sortedElements.length; double index = phi * (n - 1); int lhs = (int) index; double delta = index - lhs; double result; if (n == 0) {     return 0.0; } if (lhs == n - 1) {     result = sortedElements[lhs]; } else {     result = (1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1]; } return result;  =>   int n = sortedElements.length; double index = phi * (n - 1); int lhs = (int) index; double delta = index - lhs; double result; if (lhs == n - 1) {     result = sortedElements[lhs]; } else {     result = (1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1]; } return result;
SDL_56:144:double_quantile(double,double): int n = sortedElements.length; double index = phi * (n - 1); int lhs = (int) index; double delta = index - lhs; double result; if (n == 0) {     return 0.0; } if (lhs == n - 1) {     result = sortedElements[lhs]; } else {     result = (1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1]; } return result;  =>   int n = sortedElements.length; double index = phi * (n - 1); int lhs = (int) index; double delta = index - lhs; double result; if (n == 0) {     return 0.0; } return result;
SDL_57:143:double_quantile(double,double): if (n == 0) {     return 0.0; }  =>   if (true) {     return 0.0; }
SDL_58:142:double_quantile(double,double): return 0.0;  =>   return 0;
SDL_59:144:double_quantile(double,double): result = sortedElements[lhs];  =>  
SDL_60:148:double_quantile(double,double): if (lhs == n - 1) {     result = sortedElements[lhs]; } else {     result = (1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1]; }  =>   if (true) {     result = sortedElements[lhs]; } else {     result = (1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1]; }
SDL_61:146:double_quantile(double,double): result = (1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1];  =>  
SDL_62:149:double_quantile(double,double): return result;  =>   return 0;
SDL_63:157:double_sampleKurtosis(int,double,double): return m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));  =>   return 0;
SDL_64:163:double_sampleKurtosisStandardError(int): return Math.sqrt( 24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) );  =>   return 0;
SDL_65:171:double_sampleSkew(int,double,double): return n * m3 / ((n - 1) * (n - 2) * s * s * s);  =>   return 0;
SDL_66:178:double_sampleVariance(double,double): int size = elements.length; double sum = 0; for (int i = size; --i >= 0;) {     double delta = elements[i] - mean;     sum += delta * delta; } return sum / (size - 1);  =>   int size = elements.length; double sum = 0; return sum / (size - 1);
SDL_67:179:double_sampleVariance(double,double): double delta = elements[i] - mean; sum += delta * delta;  =>   double delta = elements[i] - mean;
SDL_68:181:double_sampleVariance(double,double): for (int i = size; --i >= 0;) {     double delta = elements[i] - mean;     sum += delta * delta; }  =>   for (int i = size;;) {     double delta = elements[i] - mean;     sum += delta * delta; }
SDL_69:182:double_sampleVariance(double,double): return sum / (size - 1);  =>   return 0;
SDL_70:188:double_sumOfLogarithms(double): double logsum = 0; for (int i = 0; i < elements.length; i++) {     logsum += Math.log( elements[i] ); } return logsum;  =>   double logsum = 0; return logsum;
SDL_71:188:double_sumOfLogarithms(double): logsum += Math.log( elements[i] );  =>  
SDL_72:190:double_sumOfLogarithms(double): for (int i = 0; i < elements.length; i++) {     logsum += Math.log( elements[i] ); }  =>   for (int i = 0;; i++) {     logsum += Math.log( elements[i] ); }
SDL_73:190:double_sumOfLogarithms(double): for (int i = 0; i < elements.length; i++) {     logsum += Math.log( elements[i] ); }  =>   for (int i = 0; i < elements.length;) {     logsum += Math.log( elements[i] ); }
SDL_74:191:double_sumOfLogarithms(double): return logsum;  =>   return 0;
SDL_75:201:double_trimmedMean(double,double,int,int): int N = sortedElements.length; int N0 = N; for (int i = 0; i < left; ++i) {     mean += (mean - sortedElements[i]) / --N; } for (int i = 0; i < right; ++i) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; } return mean;  =>   int N = sortedElements.length; int N0 = N; for (int i = 0; i < right; ++i) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; } return mean;
SDL_76:201:double_trimmedMean(double,double,int,int): int N = sortedElements.length; int N0 = N; for (int i = 0; i < left; ++i) {     mean += (mean - sortedElements[i]) / --N; } for (int i = 0; i < right; ++i) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; } return mean;  =>   int N = sortedElements.length; int N0 = N; for (int i = 0; i < left; ++i) {     mean += (mean - sortedElements[i]) / --N; } return mean;
SDL_77:198:double_trimmedMean(double,double,int,int): mean += (mean - sortedElements[i]) / --N;  =>  
SDL_78:200:double_trimmedMean(double,double,int,int): for (int i = 0; i < left; ++i) {     mean += (mean - sortedElements[i]) / --N; }  =>   for (int i = 0;; ++i) {     mean += (mean - sortedElements[i]) / --N; }
SDL_79:200:double_trimmedMean(double,double,int,int): for (int i = 0; i < left; ++i) {     mean += (mean - sortedElements[i]) / --N; }  =>   for (int i = 0; i < left;) {     mean += (mean - sortedElements[i]) / --N; }
SDL_80:201:double_trimmedMean(double,double,int,int): mean += (mean - sortedElements[N0 - 1 - i]) / --N;  =>  
SDL_81:203:double_trimmedMean(double,double,int,int): for (int i = 0; i < right; ++i) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; }  =>   for (int i = 0;; ++i) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; }
SDL_82:203:double_trimmedMean(double,double,int,int): for (int i = 0; i < right; ++i) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; }  =>   for (int i = 0; i < right;) {     mean += (mean - sortedElements[N0 - 1 - i]) / --N; }
SDL_83:204:double_trimmedMean(double,double,int,int): return mean;  =>   return 0;
SDL_84:212:double_weightedMean(double,double): int size = elements.length; double sum = 0.0; double weightsSum = 0.0; for (int i = size; --i >= 0;) {     double w = theWeights[i];     sum += elements[i] * w;     weightsSum += w; } return sum / weightsSum;  =>   int size = elements.length; double sum = 0.0; double weightsSum = 0.0; return sum / weightsSum;
SDL_85:214:double_weightedMean(double,double): double w = theWeights[i]; sum += elements[i] * w; weightsSum += w;  =>   double w = theWeights[i]; weightsSum += w;
SDL_86:214:double_weightedMean(double,double): double w = theWeights[i]; sum += elements[i] * w; weightsSum += w;  =>   double w = theWeights[i]; sum += elements[i] * w;
SDL_87:216:double_weightedMean(double,double): for (int i = size; --i >= 0;) {     double w = theWeights[i];     sum += elements[i] * w;     weightsSum += w; }  =>   for (int i = size;;) {     double w = theWeights[i];     sum += elements[i] * w;     weightsSum += w; }
SDL_88:217:double_weightedMean(double,double): return sum / weightsSum;  =>   return 0;
SDL_89:223:int_binarySearchFromTo(int,int,int,int): int midVal; while (from <= to) {     int mid = (from + to) / 2;     midVal = list[mid];     if (midVal < key) {         from = mid + 1;     } else {         if (midVal > key) {             to = mid - 1;         } else {             return mid;         }     } } return -(from + 1);  =>   int midVal; return -(from + 1);
SDL_90:233:int_binarySearchFromTo(int,int,int,int): int mid = (from + to) / 2; midVal = list[mid]; if (midVal < key) {     from = mid + 1; } else {     if (midVal > key) {         to = mid - 1;     } else {         return mid;     } }  =>   int mid = (from + to) / 2; if (midVal < key) {     from = mid + 1; } else {     if (midVal > key) {         to = mid - 1;     } else {         return mid;     } }
SDL_91:225:int_binarySearchFromTo(int,int,int,int): int mid = (from + to) / 2; midVal = list[mid]; if (midVal < key) {     from = mid + 1; } else {     if (midVal > key) {         to = mid - 1;     } else {         return mid;     } }  =>   int mid = (from + to) / 2; midVal = list[mid];
SDL_92:235:int_binarySearchFromTo(int,int,int,int): while (from <= to) {     int mid = (from + to) / 2;     midVal = list[mid];     if (midVal < key) {         from = mid + 1;     } else {         if (midVal > key) {             to = mid - 1;         } else {             return mid;         }     } }  =>   while (true) {     int mid = (from + to) / 2;     midVal = list[mid];     if (midVal < key) {         from = mid + 1;     } else {         if (midVal > key) {             to = mid - 1;         } else {             return mid;         }     } }
SDL_93:226:int_binarySearchFromTo(int,int,int,int): from = mid + 1;  =>  
SDL_94:234:int_binarySearchFromTo(int,int,int,int): if (midVal < key) {     from = mid + 1; } else {     if (midVal > key) {         to = mid - 1;     } else {         return mid;     } }  =>   if (true) {     from = mid + 1; } else {     if (midVal > key) {         to = mid - 1;     } else {         return mid;     } }
SDL_95:228:int_binarySearchFromTo(int,int,int,int): if (midVal > key) {     to = mid - 1; } else {     return mid; }  =>  
SDL_96:229:int_binarySearchFromTo(int,int,int,int): to = mid - 1;  =>  
SDL_97:233:int_binarySearchFromTo(int,int,int,int): if (midVal > key) {     to = mid - 1; } else {     return mid; }  =>   if (true) {     to = mid - 1; } else {     return mid; }
SDL_98:232:int_binarySearchFromTo(int,int,int,int): return mid;  =>   return 0;
SDL_99:236:int_binarySearchFromTo(int,int,int,int): return -(from + 1);  =>   return 0;
SDL_100:253:double_binomial(double,long): if (k < 0) {     return 0; } if (k == 0) {     return 1; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;  =>   if (k == 0) {     return 1; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;
SDL_101:253:double_binomial(double,long): if (k < 0) {     return 0; } if (k == 0) {     return 1; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;  =>   if (k < 0) {     return 0; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;
SDL_102:253:double_binomial(double,long): if (k < 0) {     return 0; } if (k == 0) {     return 1; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;  =>   if (k < 0) {     return 0; } if (k == 0) {     return 1; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;
SDL_103:253:double_binomial(double,long): if (k < 0) {     return 0; } if (k == 0) {     return 1; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; for (long i = k; i-- > 0;) {     binomial *= a++ / b++; } return binomial;  =>   if (k < 0) {     return 0; } if (k == 0) {     return 1; } if (k == 1) {     return n; } double a = n - k + 1; double b = 1; double binomial = 1; return binomial;
SDL_104:243:double_binomial(double,long): if (k < 0) {     return 0; }  =>   if (true) {     return 0; }
SDL_105:246:double_binomial(double,long): if (k == 0) {     return 1; }  =>   if (true) {     return 1; }
SDL_106:245:double_binomial(double,long): return 1;  =>   return 0;
SDL_107:249:double_binomial(double,long): if (k == 1) {     return n; }  =>   if (true) {     return n; }
SDL_108:248:double_binomial(double,long): return n;  =>   return 0;
SDL_109:253:double_binomial(double,long): binomial *= a++ / b++;  =>  
SDL_110:255:double_binomial(double,long): for (long i = k; i-- > 0;) {     binomial *= a++ / b++; }  =>   for (long i = k;;) {     binomial *= a++ / b++; }
SDL_111:256:double_binomial(double,long): return binomial;  =>   return 0;
SDL_112:260:double_link(double): if (r < 0.0) {     double s = Math.exp( r );     return s / (1.0 + s); } else {     double s = Math.exp( -r );     return 1.0 / (1.0 + s); }  =>  
SDL_113:267:double_link(double): if (r < 0.0) {     double s = Math.exp( r );     return s / (1.0 + s); } else {     double s = Math.exp( -r );     return 1.0 / (1.0 + s); }  =>   if (true) {     double s = Math.exp( r );     return s / (1.0 + s); } else {     double s = Math.exp( -r );     return 1.0 / (1.0 + s); }
SDL_114:263:double_link(double): return s / (1.0 + s);  =>   return 0;
SDL_115:266:double_link(double): return 1.0 / (1.0 + s);  =>   return 0;
SDL_116:283:double_winsorizedMean(double,int,int): int N = sortedElements.length; double sum = 0; for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; } double mean = sum / sortedElements.length; double leftElement = sortedElements[left]; for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; } double rightElement = sortedElements[N - 1 - right]; for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; } return mean;  =>   int N = sortedElements.length; double sum = 0; double mean = sum / sortedElements.length; double leftElement = sortedElements[left]; for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; } double rightElement = sortedElements[N - 1 - right]; for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; } return mean;
SDL_117:283:double_winsorizedMean(double,int,int): int N = sortedElements.length; double sum = 0; for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; } double mean = sum / sortedElements.length; double leftElement = sortedElements[left]; for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; } double rightElement = sortedElements[N - 1 - right]; for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; } return mean;  =>   int N = sortedElements.length; double sum = 0; for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; } double mean = sum / sortedElements.length; double leftElement = sortedElements[left]; double rightElement = sortedElements[N - 1 - right]; for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; } return mean;
SDL_118:283:double_winsorizedMean(double,int,int): int N = sortedElements.length; double sum = 0; for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; } double mean = sum / sortedElements.length; double leftElement = sortedElements[left]; for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; } double rightElement = sortedElements[N - 1 - right]; for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; } return mean;  =>   int N = sortedElements.length; double sum = 0; for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; } double mean = sum / sortedElements.length; double leftElement = sortedElements[left]; for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; } double rightElement = sortedElements[N - 1 - right]; return mean;
SDL_119:274:double_winsorizedMean(double,int,int): sum += sortedElements[i];  =>  
SDL_120:276:double_winsorizedMean(double,int,int): for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; }  =>   for (int i = 0;; i++) {     sum += sortedElements[i]; }
SDL_121:276:double_winsorizedMean(double,int,int): for (int i = 0; i < sortedElements.length; i++) {     sum += sortedElements[i]; }  =>   for (int i = 0; i < sortedElements.length;) {     sum += sortedElements[i]; }
SDL_122:279:double_winsorizedMean(double,int,int): mean += (leftElement - sortedElements[i]) / N;  =>  
SDL_123:281:double_winsorizedMean(double,int,int): for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; }  =>   for (int i = 0;; ++i) {     mean += (leftElement - sortedElements[i]) / N; }
SDL_124:281:double_winsorizedMean(double,int,int): for (int i = 0; i < left; ++i) {     mean += (leftElement - sortedElements[i]) / N; }  =>   for (int i = 0; i < left;) {     mean += (leftElement - sortedElements[i]) / N; }
SDL_125:283:double_winsorizedMean(double,int,int): mean += (rightElement - sortedElements[N - 1 - i]) / N;  =>  
SDL_126:285:double_winsorizedMean(double,int,int): for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; }  =>   for (int i = 0;; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; }
SDL_127:285:double_winsorizedMean(double,int,int): for (int i = 0; i < right; ++i) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; }  =>   for (int i = 0; i < right;) {     mean += (rightElement - sortedElements[N - 1 - i]) / N; }
SDL_128:286:double_winsorizedMean(double,int,int): return mean;  =>   return 0;
SDL_129:291:double_geometricPdf(int,double): return p * Math.pow( 1 - p, k );  =>   return 0;
SDL_130:305:double_kurtosis(double): double sum = 0; double sumPD = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 4 ); } double moment4 = sumPD / data.length; return -3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation);  =>   double sum = 0; double sumPD = 0; double sumSq = 0; double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 4 ); } double moment4 = sumPD / data.length; return -3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation);
SDL_131:306:double_kurtosis(double): double sum = 0; double sumPD = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 4 ); } double moment4 = sumPD / data.length; return -3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation);  =>   double sum = 0; double sumPD = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); double moment4 = sumPD / data.length; return -3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation);
SDL_132:300:double_kurtosis(double): sum += data[i]; sumSq += data[i] * data[i];  =>   sumSq += data[i] * data[i];
SDL_133:300:double_kurtosis(double): sum += data[i]; sumSq += data[i] * data[i];  =>   sum += data[i];
SDL_134:302:double_kurtosis(double): for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }  =>   for (int i = 0;; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }
SDL_135:302:double_kurtosis(double): for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }  =>   for (int i = 0; i < data.length;) {     sum += data[i];     sumSq += data[i] * data[i]; }
SDL_136:305:double_kurtosis(double): sumPD += Math.pow( data[i] - mean, 4 );  =>  
SDL_137:307:double_kurtosis(double): for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 4 ); }  =>   for (int i = 0;; i++) {     sumPD += Math.pow( data[i] - mean, 4 ); }
SDL_138:307:double_kurtosis(double): for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 4 ); }  =>   for (int i = 0; i < data.length;) {     sumPD += Math.pow( data[i] - mean, 4 ); }
SDL_139:309:double_kurtosis(double): return -3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation);  =>   return 0;
SDL_140:323:double_logGamma(double): double[] cof = { 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 }; double x = xx - 1.0; double tmp = x + 5.5; tmp -= (x + 0.5) * Math.log( tmp ); double ser = 1.000000000190015; double[] coeff = cof; for (int j = 0; j <= 5; j++) {     x++;     ser += coeff[j] / x; } return -tmp + Math.log( 2.5066282746310005 * ser );  =>   double[] cof = { 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 }; double x = xx - 1.0; double tmp = x + 5.5; double ser = 1.000000000190015; double[] coeff = cof; for (int j = 0; j <= 5; j++) {     x++;     ser += coeff[j] / x; } return -tmp + Math.log( 2.5066282746310005 * ser );
SDL_141:320:double_logGamma(double): double[] cof = { 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 }; double x = xx - 1.0; double tmp = x + 5.5; tmp -= (x + 0.5) * Math.log( tmp ); double ser = 1.000000000190015; double[] coeff = cof; for (int j = 0; j <= 5; j++) {     x++;     ser += coeff[j] / x; } return -tmp + Math.log( 2.5066282746310005 * ser );  =>   double[] cof = { 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 }; double x = xx - 1.0; double tmp = x + 5.5; tmp -= (x + 0.5) * Math.log( tmp ); double ser = 1.000000000190015; double[] coeff = cof; return -tmp + Math.log( 2.5066282746310005 * ser );
SDL_142:321:double_logGamma(double): x++; ser += coeff[j] / x;  =>   ser += coeff[j] / x;
SDL_143:321:double_logGamma(double): x++; ser += coeff[j] / x;  =>   x++;
SDL_144:323:double_logGamma(double): for (int j = 0; j <= 5; j++) {     x++;     ser += coeff[j] / x; }  =>   for (int j = 0;; j++) {     x++;     ser += coeff[j] / x; }
SDL_145:323:double_logGamma(double): for (int j = 0; j <= 5; j++) {     x++;     ser += coeff[j] / x; }  =>   for (int j = 0; j <= 5;) {     x++;     ser += coeff[j] / x; }
SDL_146:324:double_logGamma(double): return -tmp + Math.log( 2.5066282746310005 * ser );  =>   return 0;
SDL_147:336:double_pooledMean(double,double): double sum1 = 0; for (int i = 0; i < data1.length; i++) {     sum1 += data1[i]; } double mean1 = sum1 / data1.length; double sum2 = 0; for (int i = 0; i < data2.length; i++) {     sum2 += data2[i]; } double mean2 = sum2 / data2.length; return (data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length);  =>   double sum1 = 0; double mean1 = sum1 / data1.length; double sum2 = 0; for (int i = 0; i < data2.length; i++) {     sum2 += data2[i]; } double mean2 = sum2 / data2.length; return (data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length);
SDL_148:336:double_pooledMean(double,double): double sum1 = 0; for (int i = 0; i < data1.length; i++) {     sum1 += data1[i]; } double mean1 = sum1 / data1.length; double sum2 = 0; for (int i = 0; i < data2.length; i++) {     sum2 += data2[i]; } double mean2 = sum2 / data2.length; return (data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length);  =>   double sum1 = 0; for (int i = 0; i < data1.length; i++) {     sum1 += data1[i]; } double mean1 = sum1 / data1.length; double sum2 = 0; double mean2 = sum2 / data2.length; return (data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length);
SDL_149:330:double_pooledMean(double,double): sum1 += data1[i];  =>  
SDL_150:332:double_pooledMean(double,double): for (int i = 0; i < data1.length; i++) {     sum1 += data1[i]; }  =>   for (int i = 0;; i++) {     sum1 += data1[i]; }
SDL_151:332:double_pooledMean(double,double): for (int i = 0; i < data1.length; i++) {     sum1 += data1[i]; }  =>   for (int i = 0; i < data1.length;) {     sum1 += data1[i]; }
SDL_152:335:double_pooledMean(double,double): sum2 += data2[i];  =>  
SDL_153:337:double_pooledMean(double,double): for (int i = 0; i < data2.length; i++) {     sum2 += data2[i]; }  =>   for (int i = 0;; i++) {     sum2 += data2[i]; }
SDL_154:337:double_pooledMean(double,double): for (int i = 0; i < data2.length; i++) {     sum2 += data2[i]; }  =>   for (int i = 0; i < data2.length;) {     sum2 += data2[i]; }
SDL_155:339:double_pooledMean(double,double): return (data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length);  =>   return 0;
SDL_156:356:double_pooledVariance(double,double): double sum1 = 0; double sumSq1 = 0; for (int i = 0; i < data1.length; i++) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; } double mean1 = sum1 / data1.length; double var1 = (sumSq1 - mean1 * sum1) / data1.length; double sum2 = 0; double sumSq2 = 0; for (int i = 0; i < data2.length; i++) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; } double mean2 = sum2 / data2.length; double var2 = (sumSq2 - mean2 * sum2) / data2.length; return (data1.length * var1 + data2.length * var2) / (data1.length + data2.length);  =>   double sum1 = 0; double sumSq1 = 0; double mean1 = sum1 / data1.length; double var1 = (sumSq1 - mean1 * sum1) / data1.length; double sum2 = 0; double sumSq2 = 0; for (int i = 0; i < data2.length; i++) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; } double mean2 = sum2 / data2.length; double var2 = (sumSq2 - mean2 * sum2) / data2.length; return (data1.length * var1 + data2.length * var2) / (data1.length + data2.length);
SDL_157:356:double_pooledVariance(double,double): double sum1 = 0; double sumSq1 = 0; for (int i = 0; i < data1.length; i++) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; } double mean1 = sum1 / data1.length; double var1 = (sumSq1 - mean1 * sum1) / data1.length; double sum2 = 0; double sumSq2 = 0; for (int i = 0; i < data2.length; i++) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; } double mean2 = sum2 / data2.length; double var2 = (sumSq2 - mean2 * sum2) / data2.length; return (data1.length * var1 + data2.length * var2) / (data1.length + data2.length);  =>   double sum1 = 0; double sumSq1 = 0; for (int i = 0; i < data1.length; i++) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; } double mean1 = sum1 / data1.length; double var1 = (sumSq1 - mean1 * sum1) / data1.length; double sum2 = 0; double sumSq2 = 0; double mean2 = sum2 / data2.length; double var2 = (sumSq2 - mean2 * sum2) / data2.length; return (data1.length * var1 + data2.length * var2) / (data1.length + data2.length);
SDL_158:347:double_pooledVariance(double,double): sum1 += data1[i]; sumSq1 += data1[i] * data1[i];  =>   sumSq1 += data1[i] * data1[i];
SDL_159:347:double_pooledVariance(double,double): sum1 += data1[i]; sumSq1 += data1[i] * data1[i];  =>   sum1 += data1[i];
SDL_160:349:double_pooledVariance(double,double): for (int i = 0; i < data1.length; i++) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; }  =>   for (int i = 0;; i++) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; }
SDL_161:349:double_pooledVariance(double,double): for (int i = 0; i < data1.length; i++) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; }  =>   for (int i = 0; i < data1.length;) {     sum1 += data1[i];     sumSq1 += data1[i] * data1[i]; }
SDL_162:355:double_pooledVariance(double,double): sum2 += data2[i]; sumSq2 += data2[i] * data2[i];  =>   sumSq2 += data2[i] * data2[i];
SDL_163:355:double_pooledVariance(double,double): sum2 += data2[i]; sumSq2 += data2[i] * data2[i];  =>   sum2 += data2[i];
SDL_164:357:double_pooledVariance(double,double): for (int i = 0; i < data2.length; i++) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; }  =>   for (int i = 0;; i++) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; }
SDL_165:357:double_pooledVariance(double,double): for (int i = 0; i < data2.length; i++) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; }  =>   for (int i = 0; i < data2.length;) {     sum2 += data2[i];     sumSq2 += data2[i] * data2[i]; }
SDL_166:360:double_pooledVariance(double,double): return (data1.length * var1 + data2.length * var2) / (data1.length + data2.length);  =>   return 0;
SDL_167:370:double_polevl(double,double,int): double ans; ans = coef[0]; for (int i = 1; i <= N; i++) {     ans = ans * x + coef[i]; } return ans;  =>   double ans; for (int i = 1; i <= N; i++) {     ans = ans * x + coef[i]; } return ans;
SDL_168:368:double_polevl(double,double,int): double ans; ans = coef[0]; for (int i = 1; i <= N; i++) {     ans = ans * x + coef[i]; } return ans;  =>   double ans; ans = coef[0]; return ans;
SDL_169:368:double_polevl(double,double,int): ans = ans * x + coef[i];  =>  
SDL_170:370:double_polevl(double,double,int): for (int i = 1; i <= N; i++) {     ans = ans * x + coef[i]; }  =>   for (int i = 1;; i++) {     ans = ans * x + coef[i]; }
SDL_171:370:double_polevl(double,double,int): for (int i = 1; i <= N; i++) {     ans = ans * x + coef[i]; }  =>   for (int i = 1; i <= N;) {     ans = ans * x + coef[i]; }
SDL_172:371:double_polevl(double,double,int): return ans;  =>   return 0;
SDL_173:383:double_rankInterpolated(double,double,int): if (index >= 0) {     int to = index + 1;     int s = sortedList.length;     while (to < s && sortedList[to] == element) {         to++;     }     return to; } int insertionPoint = -index - 1; if (insertionPoint == 0 || insertionPoint == sortedList.length) {     return insertionPoint; } double from = sortedList[insertionPoint - 1]; double to = sortedList[insertionPoint]; double delta = (element - from) / (to - from); return insertionPoint + delta;  =>   int insertionPoint = -index - 1; if (insertionPoint == 0 || insertionPoint == sortedList.length) {     return insertionPoint; } double from = sortedList[insertionPoint - 1]; double to = sortedList[insertionPoint]; double delta = (element - from) / (to - from); return insertionPoint + delta;
SDL_174:388:double_rankInterpolated(double,double,int): if (index >= 0) {     int to = index + 1;     int s = sortedList.length;     while (to < s && sortedList[to] == element) {         to++;     }     return to; } int insertionPoint = -index - 1; if (insertionPoint == 0 || insertionPoint == sortedList.length) {     return insertionPoint; } double from = sortedList[insertionPoint - 1]; double to = sortedList[insertionPoint]; double delta = (element - from) / (to - from); return insertionPoint + delta;  =>   if (index >= 0) {     int to = index + 1;     int s = sortedList.length;     while (to < s && sortedList[to] == element) {         to++;     }     return to; } int insertionPoint = -index - 1; double from = sortedList[insertionPoint - 1]; double to = sortedList[insertionPoint]; double delta = (element - from) / (to - from); return insertionPoint + delta;
SDL_175:379:double_rankInterpolated(double,double,int): int to = index + 1; int s = sortedList.length; while (to < s && sortedList[to] == element) {     to++; } return to;  =>   int to = index + 1; int s = sortedList.length; return to;
SDL_176:383:double_rankInterpolated(double,double,int): if (index >= 0) {     int to = index + 1;     int s = sortedList.length;     while (to < s && sortedList[to] == element) {         to++;     }     return to; }  =>   if (true) {     int to = index + 1;     int s = sortedList.length;     while (to < s && sortedList[to] == element) {         to++;     }     return to; }
SDL_177:379:double_rankInterpolated(double,double,int): to++;  =>  
SDL_178:381:double_rankInterpolated(double,double,int): while (to < s && sortedList[to] == element) {     to++; }  =>   while (true) {     to++; }
SDL_179:382:double_rankInterpolated(double,double,int): return to;  =>   return 0;
SDL_180:387:double_rankInterpolated(double,double,int): if (insertionPoint == 0 || insertionPoint == sortedList.length) {     return insertionPoint; }  =>   if (true) {     return insertionPoint; }
SDL_181:386:double_rankInterpolated(double,double,int): return insertionPoint;  =>   return 0;
SDL_182:391:double_rankInterpolated(double,double,int): return insertionPoint + delta;  =>   return 0;
SDL_183:399:double_sampleWeightedVariance(double,double): double sumOfWeights = 0; double sumOfProducts = 0; double sumOfSquaredProducts = 0; for (int i = 0; i < data.length; i++) {     sumOfWeights += weights[i];     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts += data[i] * data[i] * weights[i]; } return (sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1);  =>   double sumOfWeights = 0; double sumOfProducts = 0; double sumOfSquaredProducts = 0; return (sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1);
SDL_184:401:double_sampleWeightedVariance(double,double): sumOfWeights += weights[i]; sumOfProducts += data[i] * weights[i]; sumOfSquaredProducts += data[i] * data[i] * weights[i];  =>   sumOfProducts += data[i] * weights[i]; sumOfSquaredProducts += data[i] * data[i] * weights[i];
SDL_185:401:double_sampleWeightedVariance(double,double): sumOfWeights += weights[i]; sumOfProducts += data[i] * weights[i]; sumOfSquaredProducts += data[i] * data[i] * weights[i];  =>   sumOfWeights += weights[i]; sumOfSquaredProducts += data[i] * data[i] * weights[i];
SDL_186:401:double_sampleWeightedVariance(double,double): sumOfWeights += weights[i]; sumOfProducts += data[i] * weights[i]; sumOfSquaredProducts += data[i] * data[i] * weights[i];  =>   sumOfWeights += weights[i]; sumOfProducts += data[i] * weights[i];
SDL_187:403:double_sampleWeightedVariance(double,double): for (int i = 0; i < data.length; i++) {     sumOfWeights += weights[i];     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts += data[i] * data[i] * weights[i]; }  =>   for (int i = 0;; i++) {     sumOfWeights += weights[i];     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts += data[i] * data[i] * weights[i]; }
SDL_188:403:double_sampleWeightedVariance(double,double): for (int i = 0; i < data.length; i++) {     sumOfWeights += weights[i];     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts += data[i] * data[i] * weights[i]; }  =>   for (int i = 0; i < data.length;) {     sumOfWeights += weights[i];     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts += data[i] * data[i] * weights[i]; }
SDL_189:404:double_sampleWeightedVariance(double,double): return (sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1);  =>   return 0;
SDL_190:418:double_skew(double): double sum = 0; double sumPD = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 3 ); } double moment3 = sumPD / data.length; return moment3 / (standardDeviation * standardDeviation * standardDeviation);  =>   double sum = 0; double sumPD = 0; double sumSq = 0; double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 3 ); } double moment3 = sumPD / data.length; return moment3 / (standardDeviation * standardDeviation * standardDeviation);
SDL_191:419:double_skew(double): double sum = 0; double sumPD = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 3 ); } double moment3 = sumPD / data.length; return moment3 / (standardDeviation * standardDeviation * standardDeviation);  =>   double sum = 0; double sumPD = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double standardDeviation = Math.sqrt( (sumSq - mean * sum) / data.length ); double moment3 = sumPD / data.length; return moment3 / (standardDeviation * standardDeviation * standardDeviation);
SDL_192:413:double_skew(double): sum += data[i]; sumSq += data[i] * data[i];  =>   sumSq += data[i] * data[i];
SDL_193:413:double_skew(double): sum += data[i]; sumSq += data[i] * data[i];  =>   sum += data[i];
SDL_194:415:double_skew(double): for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }  =>   for (int i = 0;; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }
SDL_195:415:double_skew(double): for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }  =>   for (int i = 0; i < data.length;) {     sum += data[i];     sumSq += data[i] * data[i]; }
SDL_196:418:double_skew(double): sumPD += Math.pow( data[i] - mean, 3 );  =>  
SDL_197:420:double_skew(double): for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 3 ); }  =>   for (int i = 0;; i++) {     sumPD += Math.pow( data[i] - mean, 3 ); }
SDL_198:420:double_skew(double): for (int i = 0; i < data.length; i++) {     sumPD += Math.pow( data[i] - mean, 3 ); }  =>   for (int i = 0; i < data.length;) {     sumPD += Math.pow( data[i] - mean, 3 ); }
SDL_199:422:double_skew(double): return moment3 / (standardDeviation * standardDeviation * standardDeviation);  =>   return 0;
SDL_200:434:double_standardize(double): double sum = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double sd = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     data[i] = (data[i] - mean) / sd; } return data;  =>   double sum = 0; double sumSq = 0; double mean = sum / data.length; double sd = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     data[i] = (data[i] - mean) / sd; } return data;
SDL_201:435:double_standardize(double): double sum = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double sd = Math.sqrt( (sumSq - mean * sum) / data.length ); for (int i = 0; i < data.length; i++) {     data[i] = (data[i] - mean) / sd; } return data;  =>   double sum = 0; double sumSq = 0; for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; } double mean = sum / data.length; double sd = Math.sqrt( (sumSq - mean * sum) / data.length ); return data;
SDL_202:430:double_standardize(double): sum += data[i]; sumSq += data[i] * data[i];  =>   sumSq += data[i] * data[i];
SDL_203:430:double_standardize(double): sum += data[i]; sumSq += data[i] * data[i];  =>   sum += data[i];
SDL_204:432:double_standardize(double): for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }  =>   for (int i = 0;; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }
SDL_205:432:double_standardize(double): for (int i = 0; i < data.length; i++) {     sum += data[i];     sumSq += data[i] * data[i]; }  =>   for (int i = 0; i < data.length;) {     sum += data[i];     sumSq += data[i] * data[i]; }
SDL_206:435:double_standardize(double): data[i] = (data[i] - mean) / sd;  =>  
SDL_207:437:double_standardize(double): for (int i = 0; i < data.length; i++) {     data[i] = (data[i] - mean) / sd; }  =>   for (int i = 0;; i++) {     data[i] = (data[i] - mean) / sd; }
SDL_208:437:double_standardize(double): for (int i = 0; i < data.length; i++) {     data[i] = (data[i] - mean) / sd; }  =>   for (int i = 0; i < data.length;) {     data[i] = (data[i] - mean) / sd; }
SDL_209:438:double_standardize(double): return data;  =>   return 0;
SDL_210:445:double_weightedRMS(double,double): double sumOfProducts = 0; double sumOfSquaredProducts = 0; for (int i = 0; i < data.length; i++) {     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts = data[i] * data[i] * weights[i]; } return sumOfProducts / sumOfSquaredProducts;  =>   double sumOfProducts = 0; double sumOfSquaredProducts = 0; return sumOfProducts / sumOfSquaredProducts;
SDL_211:446:double_weightedRMS(double,double): sumOfProducts += data[i] * weights[i]; sumOfSquaredProducts = data[i] * data[i] * weights[i];  =>   sumOfSquaredProducts = data[i] * data[i] * weights[i];
SDL_212:446:double_weightedRMS(double,double): sumOfProducts += data[i] * weights[i]; sumOfSquaredProducts = data[i] * data[i] * weights[i];  =>   sumOfProducts += data[i] * weights[i];
SDL_213:448:double_weightedRMS(double,double): for (int i = 0; i < data.length; i++) {     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts = data[i] * data[i] * weights[i]; }  =>   for (int i = 0;; i++) {     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts = data[i] * data[i] * weights[i]; }
SDL_214:448:double_weightedRMS(double,double): for (int i = 0; i < data.length; i++) {     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts = data[i] * data[i] * weights[i]; }  =>   for (int i = 0; i < data.length;) {     sumOfProducts += data[i] * weights[i];     sumOfSquaredProducts = data[i] * data[i] * weights[i]; }
SDL_215:449:double_weightedRMS(double,double): return sumOfProducts / sumOfSquaredProducts;  =>   return 0;
SDL_216:455:double_harmonicMean(double): double sumOfInversions = 0; for (int i = 0; i < data.length; i++) {     sumOfInversions += 1 / data[i]; } return data.length / sumOfInversions;  =>   double sumOfInversions = 0; return data.length / sumOfInversions;
SDL_217:455:double_harmonicMean(double): sumOfInversions += 1 / data[i];  =>  
SDL_218:457:double_harmonicMean(double): for (int i = 0; i < data.length; i++) {     sumOfInversions += 1 / data[i]; }  =>   for (int i = 0;; i++) {     sumOfInversions += 1 / data[i]; }
SDL_219:457:double_harmonicMean(double): for (int i = 0; i < data.length; i++) {     sumOfInversions += 1 / data[i]; }  =>   for (int i = 0; i < data.length;) {     sumOfInversions += 1 / data[i]; }
SDL_220:458:double_harmonicMean(double): return data.length / sumOfInversions;  =>   return 0;
SDL_221:464:double_sumOfPowerOfDeviations(double,int,double): double sum = 0; for (int i = 0; i < data.length; i++) {     sum += Math.pow( data[i] - c, k ); } return sum;  =>   double sum = 0; return sum;
SDL_222:464:double_sumOfPowerOfDeviations(double,int,double): sum += Math.pow( data[i] - c, k );  =>  
SDL_223:466:double_sumOfPowerOfDeviations(double,int,double): for (int i = 0; i < data.length; i++) {     sum += Math.pow( data[i] - c, k ); }  =>   for (int i = 0;; i++) {     sum += Math.pow( data[i] - c, k ); }
SDL_224:466:double_sumOfPowerOfDeviations(double,int,double): for (int i = 0; i < data.length; i++) {     sum += Math.pow( data[i] - c, k ); }  =>   for (int i = 0; i < data.length;) {     sum += Math.pow( data[i] - c, k ); }
SDL_225:467:double_sumOfPowerOfDeviations(double,int,double): return sum;  =>   return 0;
SDL_226:472:double_power(double,int): for (int i = 0; i < data.length; i++) {     data[i] = Math.pow( data[i], k ); } return data;  =>   return data;
SDL_227:472:double_power(double,int): data[i] = Math.pow( data[i], k );  =>  
SDL_228:474:double_power(double,int): for (int i = 0; i < data.length; i++) {     data[i] = Math.pow( data[i], k ); }  =>   for (int i = 0;; i++) {     data[i] = Math.pow( data[i], k ); }
SDL_229:474:double_power(double,int): for (int i = 0; i < data.length; i++) {     data[i] = Math.pow( data[i], k ); }  =>   for (int i = 0; i < data.length;) {     data[i] = Math.pow( data[i], k ); }
SDL_230:475:double_power(double,int): return data;  =>   return 0;
SDL_231:480:double_square(double): for (int i = 0; i < data.length; i++) {     data[i] = data[i] * data[i]; } return data;  =>   return data;
SDL_232:480:double_square(double): data[i] = data[i] * data[i];  =>  
SDL_233:482:double_square(double): for (int i = 0; i < data.length; i++) {     data[i] = data[i] * data[i]; }  =>   for (int i = 0;; i++) {     data[i] = data[i] * data[i]; }
SDL_234:482:double_square(double): for (int i = 0; i < data.length; i++) {     data[i] = data[i] * data[i]; }  =>   for (int i = 0; i < data.length;) {     data[i] = data[i] * data[i]; }
SDL_235:483:double_square(double): return data;  =>   return 0;
VDL_1:20:double_autoCorrelation(double,int,double,double):i < N => N
VDL_2:20:double_autoCorrelation(double,int,double,double):i < N => i
VDL_3:20:double_autoCorrelation(double,int,double,double):++i =>  
VDL_4:21:double_autoCorrelation(double,int,double,double):data[i] - mean => mean
VDL_5:21:double_autoCorrelation(double,int,double,double):data[i] - mean => data[i]
VDL_6:21:double_autoCorrelation(double,int,double,double):i - lag => lag
VDL_7:21:double_autoCorrelation(double,int,double,double):i - lag => i
VDL_8:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => mean
VDL_9:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => data[i - lag]
VDL_10:23:double_autoCorrelation(double,int,double,double):N - lag => lag
VDL_11:23:double_autoCorrelation(double,int,double,double):N - lag => N
VDL_12:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => N - lag
VDL_13:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => run / (N - lag)
VDL_14:30:int_binarySearchFromTo(double,double,int,int):low <= high => high
VDL_15:30:int_binarySearchFromTo(double,double,int,int):low <= high => low
VDL_16:31:int_binarySearchFromTo(double,double,int,int):low + high => high
VDL_17:31:int_binarySearchFromTo(double,double,int,int):low + high => low
VDL_18:33:int_binarySearchFromTo(double,double,int,int):midVal < key => key
VDL_19:33:int_binarySearchFromTo(double,double,int,int):midVal < key => midVal
VDL_20:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => 1
VDL_21:36:int_binarySearchFromTo(double,double,int,int):midVal > key => key
VDL_22:36:int_binarySearchFromTo(double,double,int,int):midVal > key => midVal
VDL_23:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => 1
VDL_24:43:int_binarySearchFromTo(double,double,int,int):low + 1 => 1
VDL_25:52:double_covariance(double,double):i < size => size
VDL_26:52:double_covariance(double,double):i < size => i
VDL_27:52:double_covariance(double,double):++i =>  
VDL_28:56:double_covariance(double,double):i + 1 => 1
VDL_29:56:double_covariance(double,double):sumx / (i + 1) => i + 1
VDL_30:56:double_covariance(double,double):x - sumx / (i + 1) => sumx / (i + 1)
VDL_31:56:double_covariance(double,double):sumy / i => i
VDL_32:56:double_covariance(double,double):sumy / i => sumy
VDL_33:56:double_covariance(double,double):y - sumy / i => sumy / i
VDL_34:59:double_covariance(double,double):size - 1 => 1
VDL_35:59:double_covariance(double,double):Sxy / (size - 1) => size - 1
VDL_36:66:double_durbinWatson(double):i < size => size
VDL_37:66:double_durbinWatson(double):i < size => i
VDL_38:66:double_durbinWatson(double):++i =>  
VDL_39:67:double_durbinWatson(double):i - 1 => 1
VDL_40:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i - 1]
VDL_41:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i]
VDL_42:68:double_durbinWatson(double):x * x => x
VDL_43:68:double_durbinWatson(double):x * x => x
VDL_44:78:double_lag1(double,double):elements[0] - mean => mean
VDL_45:78:double_lag1(double,double):elements[0] - mean => elements[0]
VDL_46:78:double_lag1(double,double):elements[0] - mean => mean
VDL_47:78:double_lag1(double,double):elements[0] - mean => elements[0]
VDL_48:79:double_lag1(double,double):i < size => size
VDL_49:79:double_lag1(double,double):i < size => i
VDL_50:79:double_lag1(double,double):i++ =>  
VDL_51:80:double_lag1(double,double):i - 1 => 1
VDL_52:80:double_lag1(double,double):elements[i - 1] - mean => mean
VDL_53:80:double_lag1(double,double):elements[i - 1] - mean => elements[i - 1]
VDL_54:81:double_lag1(double,double):elements[i] - mean => mean
VDL_55:81:double_lag1(double,double):elements[i] - mean => elements[i]
VDL_56:82:double_lag1(double,double):delta0 * delta1 => delta1
VDL_57:82:double_lag1(double,double):delta0 * delta1 => delta0
VDL_58:82:double_lag1(double,double):delta0 * delta1 - q => delta0 * delta1
VDL_59:82:double_lag1(double,double):i + 1 => 1
VDL_60:83:double_lag1(double,double):delta1 * delta1 => delta1
VDL_61:83:double_lag1(double,double):delta1 * delta1 => delta1
VDL_62:83:double_lag1(double,double):delta1 * delta1 - v => delta1 * delta1
VDL_63:83:double_lag1(double,double):i + 1 => 1
VDL_64:85:double_lag1(double,double):q / v => v
VDL_65:85:double_lag1(double,double):q / v => q
VDL_66:92:double_max(double):size - 1 => 1
VDL_67:93:double_max(double):--i =>  
VDL_68:94:double_max(double):elements[i] > max => max
VDL_69:94:double_max(double):elements[i] > max => elements[i]
VDL_70:105:double_meanDeviation(double,double):--i =>  
VDL_71:106:double_meanDeviation(double,double):elements[i] - mean => mean
VDL_72:106:double_meanDeviation(double,double):elements[i] - mean => elements[i]
VDL_73:108:double_meanDeviation(double,double):sum / size => size
VDL_74:108:double_meanDeviation(double,double):sum / size => sum
VDL_75:114:double_min(double):size - 1 => 1
VDL_76:115:double_min(double):--i =>  
VDL_77:116:double_min(double):elements[i] < min => min
VDL_78:116:double_min(double):elements[i] < min => elements[i]
VDL_79:127:double_product(double):--i =>  
VDL_80:136:double_quantile(double,double):n - 1 => 1
VDL_81:136:double_quantile(double,double):phi * (n - 1) => n - 1
VDL_82:138:double_quantile(double,double):index - lhs => lhs
VDL_83:138:double_quantile(double,double):index - lhs => index
VDL_84:140:double_quantile(double,double):n == 0 => 0
VDL_85:143:double_quantile(double,double):n - 1 => 1
VDL_86:143:double_quantile(double,double):lhs == n - 1 => n - 1
VDL_87:146:double_quantile(double,double):1 - delta => 1
VDL_88:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => 1 - delta
VDL_89:146:double_quantile(double,double):lhs + 1 => 1
VDL_90:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => sortedElements[lhs + 1]
VDL_91:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => delta
VDL_92:155:double_sampleKurtosis(int,double,double):moment4 * n => n
VDL_93:155:double_sampleKurtosis(int,double,double):moment4 * n => moment4
VDL_94:156:double_sampleKurtosis(int,double,double):m4 * n => n
VDL_95:156:double_sampleKurtosis(int,double,double):m4 * n => m4
VDL_96:156:double_sampleKurtosis(int,double,double):n + 1 => 1
VDL_97:156:double_sampleKurtosis(int,double,double):n - 1 => 1
VDL_98:156:double_sampleKurtosis(int,double,double):n - 2 => 2
VDL_99:156:double_sampleKurtosis(int,double,double):n - 3 => 3
VDL_100:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => (n - 1) * (n - 2) * (n - 3)
VDL_101:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => (n - 1) * (n - 2) * (n - 3) * s2
VDL_102:156:double_sampleKurtosis(int,double,double):n - 1 => 1
VDL_103:156:double_sampleKurtosis(int,double,double):n - 1 => 1
VDL_104:156:double_sampleKurtosis(int,double,double):n - 2 => 2
VDL_105:156:double_sampleKurtosis(int,double,double):n - 3 => 3
VDL_106:162:double_sampleKurtosisStandardError(int):24.0 * n => 24.0
VDL_107:162:double_sampleKurtosisStandardError(int):n - 1 => 1
VDL_108:162:double_sampleKurtosisStandardError(int):n - 1 => 1
VDL_109:162:double_sampleKurtosisStandardError(int):n - 3 => 3
VDL_110:162:double_sampleKurtosisStandardError(int):n - 2 => 2
VDL_111:162:double_sampleKurtosisStandardError(int):n + 3 => 3
VDL_112:162:double_sampleKurtosisStandardError(int):n + 5 => 5
VDL_113:169:double_sampleSkew(int,double,double):moment3 * n => n
VDL_114:169:double_sampleSkew(int,double,double):moment3 * n => moment3
VDL_115:170:double_sampleSkew(int,double,double):n * m3 => m3
VDL_116:170:double_sampleSkew(int,double,double):n * m3 => n
VDL_117:170:double_sampleSkew(int,double,double):n - 1 => 1
VDL_118:170:double_sampleSkew(int,double,double):n - 2 => 2
VDL_119:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => (n - 1) * (n - 2)
VDL_120:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => (n - 1) * (n - 2) * s
VDL_121:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => (n - 1) * (n - 2) * s * s
VDL_122:177:double_sampleVariance(double,double):--i =>  
VDL_123:178:double_sampleVariance(double,double):elements[i] - mean => mean
VDL_124:178:double_sampleVariance(double,double):elements[i] - mean => elements[i]
VDL_125:179:double_sampleVariance(double,double):delta * delta => delta
VDL_126:179:double_sampleVariance(double,double):delta * delta => delta
VDL_127:181:double_sampleVariance(double,double):size - 1 => 1
VDL_128:181:double_sampleVariance(double,double):sum / (size - 1) => size - 1
VDL_129:187:double_sumOfLogarithms(double):i < elements.length => elements.length
VDL_130:187:double_sumOfLogarithms(double):i++ =>  
VDL_131:197:double_trimmedMean(double,double,int,int):i < left => left
VDL_132:197:double_trimmedMean(double,double,int,int):i < left => i
VDL_133:197:double_trimmedMean(double,double,int,int):++i =>  
VDL_134:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => sortedElements[i]
VDL_135:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => mean
VDL_136:198:double_trimmedMean(double,double,int,int):--N =>  
VDL_137:200:double_trimmedMean(double,double,int,int):i < right => right
VDL_138:200:double_trimmedMean(double,double,int,int):i < right => i
VDL_139:200:double_trimmedMean(double,double,int,int):++i =>  
VDL_140:201:double_trimmedMean(double,double,int,int):N0 - 1 => 1
VDL_141:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => N0 - 1
VDL_142:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => sortedElements[N0 - 1 - i]
VDL_143:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => mean
VDL_144:201:double_trimmedMean(double,double,int,int):--N =>  
VDL_145:211:double_weightedMean(double,double):--i =>  
VDL_146:213:double_weightedMean(double,double):elements[i] * w => w
VDL_147:213:double_weightedMean(double,double):elements[i] * w => elements[i]
VDL_148:216:double_weightedMean(double,double):sum / weightsSum => weightsSum
VDL_149:216:double_weightedMean(double,double):sum / weightsSum => sum
VDL_150:222:int_binarySearchFromTo(int,int,int,int):from <= to => to
VDL_151:222:int_binarySearchFromTo(int,int,int,int):from <= to => from
VDL_152:223:int_binarySearchFromTo(int,int,int,int):from + to => to
VDL_153:223:int_binarySearchFromTo(int,int,int,int):from + to => from
VDL_154:225:int_binarySearchFromTo(int,int,int,int):midVal < key => key
VDL_155:225:int_binarySearchFromTo(int,int,int,int):midVal < key => midVal
VDL_156:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => 1
VDL_157:228:int_binarySearchFromTo(int,int,int,int):midVal > key => key
VDL_158:228:int_binarySearchFromTo(int,int,int,int):midVal > key => midVal
VDL_159:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => 1
VDL_160:235:int_binarySearchFromTo(int,int,int,int):from + 1 => 1
VDL_161:240:double_binomial(double,long):k < 0 => 0
VDL_162:243:double_binomial(double,long):k == 0 => 0
VDL_163:246:double_binomial(double,long):k == 1 => 1
VDL_164:249:double_binomial(double,long):n - k => k
VDL_165:249:double_binomial(double,long):n - k => n
VDL_166:252:double_binomial(double,long):i-- =>  
VDL_167:253:double_binomial(double,long):a++ =>  
VDL_168:253:double_binomial(double,long):b++ =>  
VDL_169:260:double_link(double):r < 0.0 => 0.0
VDL_170:262:double_link(double):1.0 + s => 1.0
VDL_171:262:double_link(double):s / (1.0 + s) => 1.0 + s
VDL_172:264:double_link(double):-r =>  
VDL_173:265:double_link(double):1.0 + s => 1.0
VDL_174:273:double_winsorizedMean(double,int,int):i < sortedElements.length => sortedElements.length
VDL_175:273:double_winsorizedMean(double,int,int):i++ =>  
VDL_176:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sortedElements.length
VDL_177:278:double_winsorizedMean(double,int,int):i < left => left
VDL_178:278:double_winsorizedMean(double,int,int):i < left => i
VDL_179:278:double_winsorizedMean(double,int,int):++i =>  
VDL_180:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => sortedElements[i]
VDL_181:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => leftElement
VDL_182:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => leftElement - sortedElements[i]
VDL_183:281:double_winsorizedMean(double,int,int):N - 1 => 1
VDL_184:281:double_winsorizedMean(double,int,int):N - 1 - right => N - 1
VDL_185:282:double_winsorizedMean(double,int,int):i < right => right
VDL_186:282:double_winsorizedMean(double,int,int):i < right => i
VDL_187:282:double_winsorizedMean(double,int,int):++i =>  
VDL_188:283:double_winsorizedMean(double,int,int):N - 1 => 1
VDL_189:283:double_winsorizedMean(double,int,int):N - 1 - i => N - 1
VDL_190:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => sortedElements[N - 1 - i]
VDL_191:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => rightElement
VDL_192:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => rightElement - sortedElements[N - 1 - i]
VDL_193:290:double_geometricPdf(int,double):1 - p => 1
VDL_194:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => Math.pow( 1 - p, k )
VDL_195:298:double_kurtosis(double):i < data.length => data.length
VDL_196:298:double_kurtosis(double):i++ =>  
VDL_197:300:double_kurtosis(double):data[i] * data[i] => data[i]
VDL_198:300:double_kurtosis(double):data[i] * data[i] => data[i]
VDL_199:302:double_kurtosis(double):sum / data.length => data.length
VDL_200:303:double_kurtosis(double):mean * sum => sum
VDL_201:303:double_kurtosis(double):mean * sum => mean
VDL_202:303:double_kurtosis(double):sumSq - mean * sum => mean * sum
VDL_203:304:double_kurtosis(double):i < data.length => data.length
VDL_204:304:double_kurtosis(double):i++ =>  
VDL_205:305:double_kurtosis(double):data[i] - mean => mean
VDL_206:305:double_kurtosis(double):data[i] - mean => data[i]
VDL_207:307:double_kurtosis(double):sumPD / data.length => data.length
VDL_208:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation
VDL_209:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation
VDL_210:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation
VDL_211:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation * standardDeviation
VDL_212:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => standardDeviation * standardDeviation * standardDeviation * standardDeviation
VDL_213:314:double_logGamma(double):xx - 1.0 => 1.0
VDL_214:315:double_logGamma(double):x + 5.5 => 5.5
VDL_215:316:double_logGamma(double):x + 0.5 => 0.5
VDL_216:319:double_logGamma(double):j <= 5 => 5
VDL_217:319:double_logGamma(double):j++ =>  
VDL_218:320:double_logGamma(double):x++ =>  
VDL_219:321:double_logGamma(double):coeff[j] / x => x
VDL_220:321:double_logGamma(double):coeff[j] / x => coeff[j]
VDL_221:323:double_logGamma(double):-tmp =>  
VDL_222:323:double_logGamma(double):2.5066282746310005 * ser => 2.5066282746310005
VDL_223:329:double_pooledMean(double,double):i < data1.length => data1.length
VDL_224:329:double_pooledMean(double,double):i++ =>  
VDL_225:332:double_pooledMean(double,double):sum1 / data1.length => data1.length
VDL_226:334:double_pooledMean(double,double):i < data2.length => data2.length
VDL_227:334:double_pooledMean(double,double):i++ =>  
VDL_228:337:double_pooledMean(double,double):sum2 / data2.length => data2.length
VDL_229:338:double_pooledMean(double,double):data1.length * mean1 => data1.length
VDL_230:338:double_pooledMean(double,double):data2.length * mean2 => data2.length
VDL_231:345:double_pooledVariance(double,double):i < data1.length => data1.length
VDL_232:345:double_pooledVariance(double,double):i++ =>  
VDL_233:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i]
VDL_234:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i]
VDL_235:349:double_pooledVariance(double,double):sum1 / data1.length => data1.length
VDL_236:350:double_pooledVariance(double,double):mean1 * sum1 => sum1
VDL_237:350:double_pooledVariance(double,double):mean1 * sum1 => mean1
VDL_238:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => mean1 * sum1
VDL_239:353:double_pooledVariance(double,double):i < data2.length => data2.length
VDL_240:353:double_pooledVariance(double,double):i++ =>  
VDL_241:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i]
VDL_242:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i]
VDL_243:357:double_pooledVariance(double,double):sum2 / data2.length => data2.length
VDL_244:358:double_pooledVariance(double,double):mean2 * sum2 => sum2
VDL_245:358:double_pooledVariance(double,double):mean2 * sum2 => mean2
VDL_246:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => mean2 * sum2
VDL_247:359:double_pooledVariance(double,double):data1.length * var1 => data1.length
VDL_248:359:double_pooledVariance(double,double):data2.length * var2 => data2.length
VDL_249:367:double_polevl(double,double,int):i <= N => N
VDL_250:367:double_polevl(double,double,int):i <= N => i
VDL_251:367:double_polevl(double,double,int):i++ =>  
VDL_252:368:double_polevl(double,double,int):ans * x => x
VDL_253:368:double_polevl(double,double,int):ans * x => ans
VDL_254:368:double_polevl(double,double,int):ans * x + coef[i] => ans * x
VDL_255:375:double_rankInterpolated(double,double,int):index >= 0 => 0
VDL_256:376:double_rankInterpolated(double,double,int):index + 1 => 1
VDL_257:378:double_rankInterpolated(double,double,int):to < s => s
VDL_258:378:double_rankInterpolated(double,double,int):to < s => to
VDL_259:378:double_rankInterpolated(double,double,int):sortedList[to] == element => element
VDL_260:378:double_rankInterpolated(double,double,int):sortedList[to] == element => sortedList[to]
VDL_261:379:double_rankInterpolated(double,double,int):to++ =>  
VDL_262:383:double_rankInterpolated(double,double,int):-index =>  
VDL_263:384:double_rankInterpolated(double,double,int):insertionPoint == 0 => 0
VDL_264:384:double_rankInterpolated(double,double,int):insertionPoint == sortedList.length => sortedList.length
VDL_265:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => 1
VDL_266:389:double_rankInterpolated(double,double,int):element - from => from
VDL_267:389:double_rankInterpolated(double,double,int):element - from => element
VDL_268:389:double_rankInterpolated(double,double,int):to - from => from
VDL_269:389:double_rankInterpolated(double,double,int):to - from => to
VDL_270:390:double_rankInterpolated(double,double,int):insertionPoint + delta => delta
VDL_271:390:double_rankInterpolated(double,double,int):insertionPoint + delta => insertionPoint
VDL_272:398:double_sampleWeightedVariance(double,double):i < data.length => data.length
VDL_273:398:double_sampleWeightedVariance(double,double):i++ =>  
VDL_274:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => weights[i]
VDL_275:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => data[i]
VDL_276:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i]
VDL_277:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i]
VDL_278:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => data[i] * data[i]
VDL_279:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts
VDL_280:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts
VDL_281:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts
VDL_282:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts / sumOfWeights
VDL_283:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => 1
VDL_284:411:double_skew(double):i < data.length => data.length
VDL_285:411:double_skew(double):i++ =>  
VDL_286:413:double_skew(double):data[i] * data[i] => data[i]
VDL_287:413:double_skew(double):data[i] * data[i] => data[i]
VDL_288:415:double_skew(double):sum / data.length => data.length
VDL_289:416:double_skew(double):mean * sum => sum
VDL_290:416:double_skew(double):mean * sum => mean
VDL_291:416:double_skew(double):sumSq - mean * sum => mean * sum
VDL_292:417:double_skew(double):i < data.length => data.length
VDL_293:417:double_skew(double):i++ =>  
VDL_294:418:double_skew(double):data[i] - mean => mean
VDL_295:418:double_skew(double):data[i] - mean => data[i]
VDL_296:420:double_skew(double):sumPD / data.length => data.length
VDL_297:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation
VDL_298:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation
VDL_299:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation
VDL_300:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => standardDeviation * standardDeviation * standardDeviation
VDL_301:428:double_standardize(double):i < data.length => data.length
VDL_302:428:double_standardize(double):i++ =>  
VDL_303:430:double_standardize(double):data[i] * data[i] => data[i]
VDL_304:430:double_standardize(double):data[i] * data[i] => data[i]
VDL_305:432:double_standardize(double):sum / data.length => data.length
VDL_306:433:double_standardize(double):mean * sum => sum
VDL_307:433:double_standardize(double):mean * sum => mean
VDL_308:433:double_standardize(double):sumSq - mean * sum => mean * sum
VDL_309:434:double_standardize(double):i < data.length => data.length
VDL_310:434:double_standardize(double):i++ =>  
VDL_311:435:double_standardize(double):data[i] - mean => mean
VDL_312:435:double_standardize(double):data[i] - mean => data[i]
VDL_313:435:double_standardize(double):(data[i] - mean) / sd => data[i] - mean
VDL_314:444:double_weightedRMS(double,double):i < data.length => data.length
VDL_315:444:double_weightedRMS(double,double):i++ =>  
VDL_316:445:double_weightedRMS(double,double):data[i] * weights[i] => weights[i]
VDL_317:445:double_weightedRMS(double,double):data[i] * weights[i] => data[i]
VDL_318:446:double_weightedRMS(double,double):data[i] * data[i] => data[i]
VDL_319:446:double_weightedRMS(double,double):data[i] * data[i] => data[i]
VDL_320:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => data[i] * data[i]
VDL_321:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfSquaredProducts
VDL_322:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfProducts
VDL_323:454:double_harmonicMean(double):i < data.length => data.length
VDL_324:454:double_harmonicMean(double):i++ =>  
VDL_325:455:double_harmonicMean(double):1 / data[i] => 1
VDL_326:457:double_harmonicMean(double):data.length / sumOfInversions => data.length
VDL_327:463:double_sumOfPowerOfDeviations(double,int,double):i < data.length => data.length
VDL_328:463:double_sumOfPowerOfDeviations(double,int,double):i++ =>  
VDL_329:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => c
VDL_330:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => data[i]
VDL_331:471:double_power(double,int):i < data.length => data.length
VDL_332:471:double_power(double,int):i++ =>  
VDL_333:479:double_square(double):i < data.length => data.length
VDL_334:479:double_square(double):i++ =>  
VDL_335:480:double_square(double):data[i] * data[i] => data[i]
VDL_336:480:double_square(double):data[i] * data[i] => data[i]
ODL_1:20:double_autoCorrelation(double,int,double,double):i < N => i
ODL_2:20:double_autoCorrelation(double,int,double,double):i < N => N
ODL_3:20:double_autoCorrelation(double,int,double,double):++i => i
ODL_4:21:double_autoCorrelation(double,int,double,double):data[i] - mean => data[i]
ODL_5:21:double_autoCorrelation(double,int,double,double):data[i] - mean => mean
ODL_6:21:double_autoCorrelation(double,int,double,double):i - lag => i
ODL_7:21:double_autoCorrelation(double,int,double,double):i - lag => lag
ODL_8:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => data[i - lag]
ODL_9:21:double_autoCorrelation(double,int,double,double):data[i - lag] - mean => mean
ODL_10:21:double_autoCorrelation(double,int,double,double):(data[i] - mean) * (data[i - lag] - mean) => data[i] - mean
ODL_11:21:double_autoCorrelation(double,int,double,double):(data[i] - mean) * (data[i - lag] - mean) => data[i - lag] - mean
ODL_12:21:double_autoCorrelation(double,int,double,double):run += (data[i] - mean) * (data[i - lag] - mean) => run = (data[i] - mean) * (data[i - lag] - mean)
ODL_13:23:double_autoCorrelation(double,int,double,double):N - lag => N
ODL_14:23:double_autoCorrelation(double,int,double,double):N - lag => lag
ODL_15:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => run
ODL_16:23:double_autoCorrelation(double,int,double,double):run / (N - lag) => N - lag
ODL_17:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => run / (N - lag)
ODL_18:23:double_autoCorrelation(double,int,double,double):run / (N - lag) / variance => variance
ODL_19:30:int_binarySearchFromTo(double,double,int,int):low <= high => low
ODL_20:30:int_binarySearchFromTo(double,double,int,int):low <= high => high
ODL_21:31:int_binarySearchFromTo(double,double,int,int):low + high => low
ODL_22:31:int_binarySearchFromTo(double,double,int,int):low + high => high
ODL_23:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => low + high
ODL_24:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => 2
ODL_25:33:int_binarySearchFromTo(double,double,int,int):midVal < key => midVal
ODL_26:33:int_binarySearchFromTo(double,double,int,int):midVal < key => key
ODL_27:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => mid
ODL_28:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => 1
ODL_29:36:int_binarySearchFromTo(double,double,int,int):midVal > key => midVal
ODL_30:36:int_binarySearchFromTo(double,double,int,int):midVal > key => key
ODL_31:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => mid
ODL_32:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => 1
ODL_33:43:int_binarySearchFromTo(double,double,int,int):low + 1 => low
ODL_34:43:int_binarySearchFromTo(double,double,int,int):low + 1 => 1
ODL_35:43:int_binarySearchFromTo(double,double,int,int):-(low + 1) => low + 1
ODL_36:52:double_covariance(double,double):i < size => i
ODL_37:52:double_covariance(double,double):i < size => size
ODL_38:52:double_covariance(double,double):++i => i
ODL_39:55:double_covariance(double,double):sumx += x => sumx = x
ODL_40:56:double_covariance(double,double):i + 1 => i
ODL_41:56:double_covariance(double,double):i + 1 => 1
ODL_42:56:double_covariance(double,double):sumx / (i + 1) => sumx
ODL_43:56:double_covariance(double,double):sumx / (i + 1) => i + 1
ODL_44:56:double_covariance(double,double):x - sumx / (i + 1) => x
ODL_45:56:double_covariance(double,double):x - sumx / (i + 1) => sumx / (i + 1)
ODL_46:56:double_covariance(double,double):sumy / i => sumy
ODL_47:56:double_covariance(double,double):sumy / i => i
ODL_48:56:double_covariance(double,double):y - sumy / i => y
ODL_49:56:double_covariance(double,double):y - sumy / i => sumy / i
ODL_50:56:double_covariance(double,double):(x - sumx / (i + 1)) * (y - sumy / i) => x - sumx / (i + 1)
ODL_51:56:double_covariance(double,double):(x - sumx / (i + 1)) * (y - sumy / i) => y - sumy / i
ODL_52:56:double_covariance(double,double):Sxy += (x - sumx / (i + 1)) * (y - sumy / i) => Sxy = (x - sumx / (i + 1)) * (y - sumy / i)
ODL_53:57:double_covariance(double,double):sumy += y => sumy = y
ODL_54:59:double_covariance(double,double):size - 1 => size
ODL_55:59:double_covariance(double,double):size - 1 => 1
ODL_56:59:double_covariance(double,double):Sxy / (size - 1) => Sxy
ODL_57:59:double_covariance(double,double):Sxy / (size - 1) => size - 1
ODL_58:66:double_durbinWatson(double):i < size => i
ODL_59:66:double_durbinWatson(double):i < size => size
ODL_60:66:double_durbinWatson(double):++i => i
ODL_61:67:double_durbinWatson(double):i - 1 => i
ODL_62:67:double_durbinWatson(double):i - 1 => 1
ODL_63:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i]
ODL_64:67:double_durbinWatson(double):elements[i] - elements[i - 1] => elements[i - 1]
ODL_65:68:double_durbinWatson(double):x * x => x
ODL_66:68:double_durbinWatson(double):x * x => x
ODL_67:68:double_durbinWatson(double):run += x * x => run = x * x
ODL_68:78:double_lag1(double,double):elements[0] - mean => elements[0]
ODL_69:78:double_lag1(double,double):elements[0] - mean => mean
ODL_70:78:double_lag1(double,double):elements[0] - mean => elements[0]
ODL_71:78:double_lag1(double,double):elements[0] - mean => mean
ODL_72:78:double_lag1(double,double):(elements[0] - mean) * (elements[0] - mean) => elements[0] - mean
ODL_73:78:double_lag1(double,double):(elements[0] - mean) * (elements[0] - mean) => elements[0] - mean
ODL_74:79:double_lag1(double,double):i < size => i
ODL_75:79:double_lag1(double,double):i < size => size
ODL_76:79:double_lag1(double,double):i++ => i
ODL_77:80:double_lag1(double,double):i - 1 => i
ODL_78:80:double_lag1(double,double):i - 1 => 1
ODL_79:80:double_lag1(double,double):elements[i - 1] - mean => elements[i - 1]
ODL_80:80:double_lag1(double,double):elements[i - 1] - mean => mean
ODL_81:81:double_lag1(double,double):elements[i] - mean => elements[i]
ODL_82:81:double_lag1(double,double):elements[i] - mean => mean
ODL_83:82:double_lag1(double,double):delta0 * delta1 => delta0
ODL_84:82:double_lag1(double,double):delta0 * delta1 => delta1
ODL_85:82:double_lag1(double,double):delta0 * delta1 - q => delta0 * delta1
ODL_86:82:double_lag1(double,double):delta0 * delta1 - q => q
ODL_87:82:double_lag1(double,double):i + 1 => i
ODL_88:82:double_lag1(double,double):i + 1 => 1
ODL_89:82:double_lag1(double,double):(delta0 * delta1 - q) / (i + 1) => delta0 * delta1 - q
ODL_90:82:double_lag1(double,double):(delta0 * delta1 - q) / (i + 1) => i + 1
ODL_91:82:double_lag1(double,double):q += (delta0 * delta1 - q) / (i + 1) => q = (delta0 * delta1 - q) / (i + 1)
ODL_92:83:double_lag1(double,double):delta1 * delta1 => delta1
ODL_93:83:double_lag1(double,double):delta1 * delta1 => delta1
ODL_94:83:double_lag1(double,double):delta1 * delta1 - v => delta1 * delta1
ODL_95:83:double_lag1(double,double):delta1 * delta1 - v => v
ODL_96:83:double_lag1(double,double):i + 1 => i
ODL_97:83:double_lag1(double,double):i + 1 => 1
ODL_98:83:double_lag1(double,double):(delta1 * delta1 - v) / (i + 1) => delta1 * delta1 - v
ODL_99:83:double_lag1(double,double):(delta1 * delta1 - v) / (i + 1) => i + 1
ODL_100:83:double_lag1(double,double):v += (delta1 * delta1 - v) / (i + 1) => v = (delta1 * delta1 - v) / (i + 1)
ODL_101:85:double_lag1(double,double):q / v => q
ODL_102:85:double_lag1(double,double):q / v => v
ODL_103:92:double_max(double):size - 1 => size
ODL_104:92:double_max(double):size - 1 => 1
ODL_105:93:double_max(double):--i => i
ODL_106:93:double_max(double):--i >= 0 => --i
ODL_107:93:double_max(double):--i >= 0 => 0
ODL_108:94:double_max(double):elements[i] > max => elements[i]
ODL_109:94:double_max(double):elements[i] > max => max
ODL_110:105:double_meanDeviation(double,double):--i => i
ODL_111:105:double_meanDeviation(double,double):--i >= 0 => --i
ODL_112:105:double_meanDeviation(double,double):--i >= 0 => 0
ODL_113:106:double_meanDeviation(double,double):elements[i] - mean => elements[i]
ODL_114:106:double_meanDeviation(double,double):elements[i] - mean => mean
ODL_115:106:double_meanDeviation(double,double):sum += Math.abs( elements[i] - mean ) => sum = Math.abs( elements[i] - mean )
ODL_116:108:double_meanDeviation(double,double):sum / size => sum
ODL_117:108:double_meanDeviation(double,double):sum / size => size
ODL_118:114:double_min(double):size - 1 => size
ODL_119:114:double_min(double):size - 1 => 1
ODL_120:115:double_min(double):--i => i
ODL_121:115:double_min(double):--i >= 0 => --i
ODL_122:115:double_min(double):--i >= 0 => 0
ODL_123:116:double_min(double):elements[i] < min => elements[i]
ODL_124:116:double_min(double):elements[i] < min => min
ODL_125:127:double_product(double):--i => i
ODL_126:127:double_product(double):--i >= 0 => --i
ODL_127:127:double_product(double):--i >= 0 => 0
ODL_128:128:double_product(double):product *= elements[i] => product = elements[i]
ODL_129:136:double_quantile(double,double):n - 1 => n
ODL_130:136:double_quantile(double,double):n - 1 => 1
ODL_131:136:double_quantile(double,double):phi * (n - 1) => phi
ODL_132:136:double_quantile(double,double):phi * (n - 1) => n - 1
ODL_133:138:double_quantile(double,double):index - lhs => index
ODL_134:138:double_quantile(double,double):index - lhs => lhs
ODL_135:140:double_quantile(double,double):n == 0 => n
ODL_136:140:double_quantile(double,double):n == 0 => 0
ODL_137:143:double_quantile(double,double):n - 1 => n
ODL_138:143:double_quantile(double,double):n - 1 => 1
ODL_139:143:double_quantile(double,double):lhs == n - 1 => lhs
ODL_140:143:double_quantile(double,double):lhs == n - 1 => n - 1
ODL_141:146:double_quantile(double,double):1 - delta => 1
ODL_142:146:double_quantile(double,double):1 - delta => delta
ODL_143:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => 1 - delta
ODL_144:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] => sortedElements[lhs]
ODL_145:146:double_quantile(double,double):lhs + 1 => lhs
ODL_146:146:double_quantile(double,double):lhs + 1 => 1
ODL_147:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => delta
ODL_148:146:double_quantile(double,double):delta * sortedElements[lhs + 1] => sortedElements[lhs + 1]
ODL_149:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1] => (1 - delta) * sortedElements[lhs]
ODL_150:146:double_quantile(double,double):(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1] => delta * sortedElements[lhs + 1]
ODL_151:155:double_sampleKurtosis(int,double,double):moment4 * n => moment4
ODL_152:155:double_sampleKurtosis(int,double,double):moment4 * n => n
ODL_153:156:double_sampleKurtosis(int,double,double):m4 * n => m4
ODL_154:156:double_sampleKurtosis(int,double,double):m4 * n => n
ODL_155:156:double_sampleKurtosis(int,double,double):n + 1 => n
ODL_156:156:double_sampleKurtosis(int,double,double):n + 1 => 1
ODL_157:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) => m4 * n
ODL_158:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) => n + 1
ODL_159:156:double_sampleKurtosis(int,double,double):n - 1 => n
ODL_160:156:double_sampleKurtosis(int,double,double):n - 1 => 1
ODL_161:156:double_sampleKurtosis(int,double,double):n - 2 => n
ODL_162:156:double_sampleKurtosis(int,double,double):n - 2 => 2
ODL_163:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) => n - 1
ODL_164:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) => n - 2
ODL_165:156:double_sampleKurtosis(int,double,double):n - 3 => n
ODL_166:156:double_sampleKurtosis(int,double,double):n - 3 => 3
ODL_167:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) => (n - 1) * (n - 2)
ODL_168:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) => n - 3
ODL_169:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => (n - 1) * (n - 2) * (n - 3)
ODL_170:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 => s2
ODL_171:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => (n - 1) * (n - 2) * (n - 3) * s2
ODL_172:156:double_sampleKurtosis(int,double,double):(n - 1) * (n - 2) * (n - 3) * s2 * s2 => s2
ODL_173:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) => m4 * n * (n + 1)
ODL_174:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) => (n - 1) * (n - 2) * (n - 3) * s2 * s2
ODL_175:156:double_sampleKurtosis(int,double,double):n - 1 => n
ODL_176:156:double_sampleKurtosis(int,double,double):n - 1 => 1
ODL_177:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => 3.0
ODL_178:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => n - 1
ODL_179:156:double_sampleKurtosis(int,double,double):n - 1 => n
ODL_180:156:double_sampleKurtosis(int,double,double):n - 1 => 1
ODL_181:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) => 3.0 * (n - 1)
ODL_182:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) => n - 1
ODL_183:156:double_sampleKurtosis(int,double,double):n - 2 => n
ODL_184:156:double_sampleKurtosis(int,double,double):n - 2 => 2
ODL_185:156:double_sampleKurtosis(int,double,double):n - 3 => n
ODL_186:156:double_sampleKurtosis(int,double,double):n - 3 => 3
ODL_187:156:double_sampleKurtosis(int,double,double):(n - 2) * (n - 3) => n - 2
ODL_188:156:double_sampleKurtosis(int,double,double):(n - 2) * (n - 3) => n - 3
ODL_189:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => 3.0 * (n - 1) * (n - 1)
ODL_190:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => (n - 2) * (n - 3)
ODL_191:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2)
ODL_192:156:double_sampleKurtosis(int,double,double):m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3) * s2 * s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3)) => 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3))
ODL_193:162:double_sampleKurtosisStandardError(int):24.0 * n => 24.0
ODL_194:162:double_sampleKurtosisStandardError(int):24.0 * n => n
ODL_195:162:double_sampleKurtosisStandardError(int):n - 1 => n
ODL_196:162:double_sampleKurtosisStandardError(int):n - 1 => 1
ODL_197:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) => 24.0 * n
ODL_198:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) => n - 1
ODL_199:162:double_sampleKurtosisStandardError(int):n - 1 => n
ODL_200:162:double_sampleKurtosisStandardError(int):n - 1 => 1
ODL_201:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) => 24.0 * n * (n - 1)
ODL_202:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) => n - 1
ODL_203:162:double_sampleKurtosisStandardError(int):n - 3 => n
ODL_204:162:double_sampleKurtosisStandardError(int):n - 3 => 3
ODL_205:162:double_sampleKurtosisStandardError(int):n - 2 => n
ODL_206:162:double_sampleKurtosisStandardError(int):n - 2 => 2
ODL_207:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) => n - 3
ODL_208:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) => n - 2
ODL_209:162:double_sampleKurtosisStandardError(int):n + 3 => n
ODL_210:162:double_sampleKurtosisStandardError(int):n + 3 => 3
ODL_211:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) => (n - 3) * (n - 2)
ODL_212:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) => n + 3
ODL_213:162:double_sampleKurtosisStandardError(int):n + 5 => n
ODL_214:162:double_sampleKurtosisStandardError(int):n + 5 => 5
ODL_215:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) * (n + 5) => (n - 3) * (n - 2) * (n + 3)
ODL_216:162:double_sampleKurtosisStandardError(int):(n - 3) * (n - 2) * (n + 3) * (n + 5) => n + 5
ODL_217:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) => 24.0 * n * (n - 1) * (n - 1)
ODL_218:162:double_sampleKurtosisStandardError(int):24.0 * n * (n - 1) * (n - 1) / ((n - 3) * (n - 2) * (n + 3) * (n + 5)) => (n - 3) * (n - 2) * (n + 3) * (n + 5)
ODL_219:169:double_sampleSkew(int,double,double):moment3 * n => moment3
ODL_220:169:double_sampleSkew(int,double,double):moment3 * n => n
ODL_221:170:double_sampleSkew(int,double,double):n * m3 => n
ODL_222:170:double_sampleSkew(int,double,double):n * m3 => m3
ODL_223:170:double_sampleSkew(int,double,double):n - 1 => n
ODL_224:170:double_sampleSkew(int,double,double):n - 1 => 1
ODL_225:170:double_sampleSkew(int,double,double):n - 2 => n
ODL_226:170:double_sampleSkew(int,double,double):n - 2 => 2
ODL_227:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) => n - 1
ODL_228:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) => n - 2
ODL_229:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => (n - 1) * (n - 2)
ODL_230:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s => s
ODL_231:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => (n - 1) * (n - 2) * s
ODL_232:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s => s
ODL_233:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => (n - 1) * (n - 2) * s * s
ODL_234:170:double_sampleSkew(int,double,double):(n - 1) * (n - 2) * s * s * s => s
ODL_235:170:double_sampleSkew(int,double,double):n * m3 / ((n - 1) * (n - 2) * s * s * s) => n * m3
ODL_236:170:double_sampleSkew(int,double,double):n * m3 / ((n - 1) * (n - 2) * s * s * s) => (n - 1) * (n - 2) * s * s * s
ODL_237:177:double_sampleVariance(double,double):--i => i
ODL_238:177:double_sampleVariance(double,double):--i >= 0 => --i
ODL_239:177:double_sampleVariance(double,double):--i >= 0 => 0
ODL_240:178:double_sampleVariance(double,double):elements[i] - mean => elements[i]
ODL_241:178:double_sampleVariance(double,double):elements[i] - mean => mean
ODL_242:179:double_sampleVariance(double,double):delta * delta => delta
ODL_243:179:double_sampleVariance(double,double):delta * delta => delta
ODL_244:179:double_sampleVariance(double,double):sum += delta * delta => sum = delta * delta
ODL_245:181:double_sampleVariance(double,double):size - 1 => size
ODL_246:181:double_sampleVariance(double,double):size - 1 => 1
ODL_247:181:double_sampleVariance(double,double):sum / (size - 1) => sum
ODL_248:181:double_sampleVariance(double,double):sum / (size - 1) => size - 1
ODL_249:187:double_sumOfLogarithms(double):i < elements.length => i
ODL_250:187:double_sumOfLogarithms(double):i < elements.length => elements.length
ODL_251:187:double_sumOfLogarithms(double):i++ => i
ODL_252:188:double_sumOfLogarithms(double):logsum += Math.log( elements[i] ) => logsum = Math.log( elements[i] )
ODL_253:197:double_trimmedMean(double,double,int,int):i < left => i
ODL_254:197:double_trimmedMean(double,double,int,int):i < left => left
ODL_255:197:double_trimmedMean(double,double,int,int):++i => i
ODL_256:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => mean
ODL_257:198:double_trimmedMean(double,double,int,int):mean - sortedElements[i] => sortedElements[i]
ODL_258:198:double_trimmedMean(double,double,int,int):--N => N
ODL_259:198:double_trimmedMean(double,double,int,int):(mean - sortedElements[i]) / --N => mean - sortedElements[i]
ODL_260:198:double_trimmedMean(double,double,int,int):(mean - sortedElements[i]) / --N => --N
ODL_261:198:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[i]) / --N => mean = (mean - sortedElements[i]) / --N
ODL_262:200:double_trimmedMean(double,double,int,int):i < right => i
ODL_263:200:double_trimmedMean(double,double,int,int):i < right => right
ODL_264:200:double_trimmedMean(double,double,int,int):++i => i
ODL_265:201:double_trimmedMean(double,double,int,int):N0 - 1 => N0
ODL_266:201:double_trimmedMean(double,double,int,int):N0 - 1 => 1
ODL_267:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => N0 - 1
ODL_268:201:double_trimmedMean(double,double,int,int):N0 - 1 - i => i
ODL_269:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => mean
ODL_270:201:double_trimmedMean(double,double,int,int):mean - sortedElements[N0 - 1 - i] => sortedElements[N0 - 1 - i]
ODL_271:201:double_trimmedMean(double,double,int,int):--N => N
ODL_272:201:double_trimmedMean(double,double,int,int):(mean - sortedElements[N0 - 1 - i]) / --N => mean - sortedElements[N0 - 1 - i]
ODL_273:201:double_trimmedMean(double,double,int,int):(mean - sortedElements[N0 - 1 - i]) / --N => --N
ODL_274:201:double_trimmedMean(double,double,int,int):mean += (mean - sortedElements[N0 - 1 - i]) / --N => mean = (mean - sortedElements[N0 - 1 - i]) / --N
ODL_275:211:double_weightedMean(double,double):--i => i
ODL_276:211:double_weightedMean(double,double):--i >= 0 => --i
ODL_277:211:double_weightedMean(double,double):--i >= 0 => 0
ODL_278:213:double_weightedMean(double,double):elements[i] * w => elements[i]
ODL_279:213:double_weightedMean(double,double):elements[i] * w => w
ODL_280:213:double_weightedMean(double,double):sum += elements[i] * w => sum = elements[i] * w
ODL_281:214:double_weightedMean(double,double):weightsSum += w => weightsSum = w
ODL_282:216:double_weightedMean(double,double):sum / weightsSum => sum
ODL_283:216:double_weightedMean(double,double):sum / weightsSum => weightsSum
ODL_284:222:int_binarySearchFromTo(int,int,int,int):from <= to => from
ODL_285:222:int_binarySearchFromTo(int,int,int,int):from <= to => to
ODL_286:223:int_binarySearchFromTo(int,int,int,int):from + to => from
ODL_287:223:int_binarySearchFromTo(int,int,int,int):from + to => to
ODL_288:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => from + to
ODL_289:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => 2
ODL_290:225:int_binarySearchFromTo(int,int,int,int):midVal < key => midVal
ODL_291:225:int_binarySearchFromTo(int,int,int,int):midVal < key => key
ODL_292:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => mid
ODL_293:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => 1
ODL_294:228:int_binarySearchFromTo(int,int,int,int):midVal > key => midVal
ODL_295:228:int_binarySearchFromTo(int,int,int,int):midVal > key => key
ODL_296:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => mid
ODL_297:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => 1
ODL_298:235:int_binarySearchFromTo(int,int,int,int):from + 1 => from
ODL_299:235:int_binarySearchFromTo(int,int,int,int):from + 1 => 1
ODL_300:235:int_binarySearchFromTo(int,int,int,int):-(from + 1) => from + 1
ODL_301:240:double_binomial(double,long):k < 0 => k
ODL_302:240:double_binomial(double,long):k < 0 => 0
ODL_303:243:double_binomial(double,long):k == 0 => k
ODL_304:243:double_binomial(double,long):k == 0 => 0
ODL_305:246:double_binomial(double,long):k == 1 => k
ODL_306:246:double_binomial(double,long):k == 1 => 1
ODL_307:249:double_binomial(double,long):n - k => n
ODL_308:249:double_binomial(double,long):n - k => k
ODL_309:249:double_binomial(double,long):n - k + 1 => n - k
ODL_310:249:double_binomial(double,long):n - k + 1 => 1
ODL_311:252:double_binomial(double,long):i-- => i
ODL_312:252:double_binomial(double,long):i-- > 0 => i--
ODL_313:252:double_binomial(double,long):i-- > 0 => 0
ODL_314:253:double_binomial(double,long):a++ => a
ODL_315:253:double_binomial(double,long):b++ => b
ODL_316:253:double_binomial(double,long):a++ / b++ => a++
ODL_317:253:double_binomial(double,long):a++ / b++ => b++
ODL_318:253:double_binomial(double,long):binomial *= a++ / b++ => binomial = a++ / b++
ODL_319:260:double_link(double):r < 0.0 => r
ODL_320:260:double_link(double):r < 0.0 => 0.0
ODL_321:262:double_link(double):1.0 + s => 1.0
ODL_322:262:double_link(double):1.0 + s => s
ODL_323:262:double_link(double):s / (1.0 + s) => s
ODL_324:262:double_link(double):s / (1.0 + s) => 1.0 + s
ODL_325:264:double_link(double):-r => r
ODL_326:265:double_link(double):1.0 + s => 1.0
ODL_327:265:double_link(double):1.0 + s => s
ODL_328:265:double_link(double):1.0 / (1.0 + s) => 1.0
ODL_329:265:double_link(double):1.0 / (1.0 + s) => 1.0 + s
ODL_330:273:double_winsorizedMean(double,int,int):i < sortedElements.length => i
ODL_331:273:double_winsorizedMean(double,int,int):i < sortedElements.length => sortedElements.length
ODL_332:273:double_winsorizedMean(double,int,int):i++ => i
ODL_333:274:double_winsorizedMean(double,int,int):sum += sortedElements[i] => sum = sortedElements[i]
ODL_334:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sum
ODL_335:276:double_winsorizedMean(double,int,int):sum / sortedElements.length => sortedElements.length
ODL_336:278:double_winsorizedMean(double,int,int):i < left => i
ODL_337:278:double_winsorizedMean(double,int,int):i < left => left
ODL_338:278:double_winsorizedMean(double,int,int):++i => i
ODL_339:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => leftElement
ODL_340:279:double_winsorizedMean(double,int,int):leftElement - sortedElements[i] => sortedElements[i]
ODL_341:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => leftElement - sortedElements[i]
ODL_342:279:double_winsorizedMean(double,int,int):(leftElement - sortedElements[i]) / N => N
ODL_343:279:double_winsorizedMean(double,int,int):mean += (leftElement - sortedElements[i]) / N => mean = (leftElement - sortedElements[i]) / N
ODL_344:281:double_winsorizedMean(double,int,int):N - 1 => N
ODL_345:281:double_winsorizedMean(double,int,int):N - 1 => 1
ODL_346:281:double_winsorizedMean(double,int,int):N - 1 - right => N - 1
ODL_347:281:double_winsorizedMean(double,int,int):N - 1 - right => right
ODL_348:282:double_winsorizedMean(double,int,int):i < right => i
ODL_349:282:double_winsorizedMean(double,int,int):i < right => right
ODL_350:282:double_winsorizedMean(double,int,int):++i => i
ODL_351:283:double_winsorizedMean(double,int,int):N - 1 => N
ODL_352:283:double_winsorizedMean(double,int,int):N - 1 => 1
ODL_353:283:double_winsorizedMean(double,int,int):N - 1 - i => N - 1
ODL_354:283:double_winsorizedMean(double,int,int):N - 1 - i => i
ODL_355:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => rightElement
ODL_356:283:double_winsorizedMean(double,int,int):rightElement - sortedElements[N - 1 - i] => sortedElements[N - 1 - i]
ODL_357:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => rightElement - sortedElements[N - 1 - i]
ODL_358:283:double_winsorizedMean(double,int,int):(rightElement - sortedElements[N - 1 - i]) / N => N
ODL_359:283:double_winsorizedMean(double,int,int):mean += (rightElement - sortedElements[N - 1 - i]) / N => mean = (rightElement - sortedElements[N - 1 - i]) / N
ODL_360:290:double_geometricPdf(int,double):1 - p => 1
ODL_361:290:double_geometricPdf(int,double):1 - p => p
ODL_362:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => p
ODL_363:290:double_geometricPdf(int,double):p * Math.pow( 1 - p, k ) => Math.pow( 1 - p, k )
ODL_364:298:double_kurtosis(double):i < data.length => i
ODL_365:298:double_kurtosis(double):i < data.length => data.length
ODL_366:298:double_kurtosis(double):i++ => i
ODL_367:299:double_kurtosis(double):sum += data[i] => sum = data[i]
ODL_368:300:double_kurtosis(double):data[i] * data[i] => data[i]
ODL_369:300:double_kurtosis(double):data[i] * data[i] => data[i]
ODL_370:300:double_kurtosis(double):sumSq += data[i] * data[i] => sumSq = data[i] * data[i]
ODL_371:302:double_kurtosis(double):sum / data.length => sum
ODL_372:302:double_kurtosis(double):sum / data.length => data.length
ODL_373:303:double_kurtosis(double):mean * sum => mean
ODL_374:303:double_kurtosis(double):mean * sum => sum
ODL_375:303:double_kurtosis(double):sumSq - mean * sum => sumSq
ODL_376:303:double_kurtosis(double):sumSq - mean * sum => mean * sum
ODL_377:303:double_kurtosis(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum
ODL_378:303:double_kurtosis(double):(sumSq - mean * sum) / data.length => data.length
ODL_379:304:double_kurtosis(double):i < data.length => i
ODL_380:304:double_kurtosis(double):i < data.length => data.length
ODL_381:304:double_kurtosis(double):i++ => i
ODL_382:305:double_kurtosis(double):data[i] - mean => data[i]
ODL_383:305:double_kurtosis(double):data[i] - mean => mean
ODL_384:305:double_kurtosis(double):sumPD += Math.pow( data[i] - mean, 4 ) => sumPD = Math.pow( data[i] - mean, 4 )
ODL_385:307:double_kurtosis(double):sumPD / data.length => sumPD
ODL_386:307:double_kurtosis(double):sumPD / data.length => data.length
ODL_387:308:double_kurtosis(double):-3 => 3
ODL_388:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation
ODL_389:308:double_kurtosis(double):standardDeviation * standardDeviation => standardDeviation
ODL_390:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation
ODL_391:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation
ODL_392:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation * standardDeviation
ODL_393:308:double_kurtosis(double):standardDeviation * standardDeviation * standardDeviation * standardDeviation => standardDeviation
ODL_394:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => moment4
ODL_395:308:double_kurtosis(double):moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => standardDeviation * standardDeviation * standardDeviation * standardDeviation
ODL_396:308:double_kurtosis(double):-3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => -3
ODL_397:308:double_kurtosis(double):-3 + moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation) => moment4 / (standardDeviation * standardDeviation * standardDeviation * standardDeviation)
ODL_398:313:double_logGamma(double):-86.50532032941677 => 86.50532032941677
ODL_399:313:double_logGamma(double):-1.231739572450155 => 1.231739572450155
ODL_400:313:double_logGamma(double):-0.5395239384953e-5 => 0.5395239384953e-5
ODL_401:314:double_logGamma(double):xx - 1.0 => xx
ODL_402:314:double_logGamma(double):xx - 1.0 => 1.0
ODL_403:315:double_logGamma(double):x + 5.5 => x
ODL_404:315:double_logGamma(double):x + 5.5 => 5.5
ODL_405:316:double_logGamma(double):x + 0.5 => x
ODL_406:316:double_logGamma(double):x + 0.5 => 0.5
ODL_407:316:double_logGamma(double):(x + 0.5) * Math.log( tmp ) => x + 0.5
ODL_408:316:double_logGamma(double):(x + 0.5) * Math.log( tmp ) => Math.log( tmp )
ODL_409:316:double_logGamma(double):tmp -= (x + 0.5) * Math.log( tmp ) => tmp = (x + 0.5) * Math.log( tmp )
ODL_410:319:double_logGamma(double):j <= 5 => j
ODL_411:319:double_logGamma(double):j <= 5 => 5
ODL_412:319:double_logGamma(double):j++ => j
ODL_413:320:double_logGamma(double):x++ => x
ODL_414:321:double_logGamma(double):coeff[j] / x => coeff[j]
ODL_415:321:double_logGamma(double):coeff[j] / x => x
ODL_416:321:double_logGamma(double):ser += coeff[j] / x => ser = coeff[j] / x
ODL_417:323:double_logGamma(double):-tmp => tmp
ODL_418:323:double_logGamma(double):2.5066282746310005 * ser => 2.5066282746310005
ODL_419:323:double_logGamma(double):2.5066282746310005 * ser => ser
ODL_420:323:double_logGamma(double):-tmp + Math.log( 2.5066282746310005 * ser ) => -tmp
ODL_421:323:double_logGamma(double):-tmp + Math.log( 2.5066282746310005 * ser ) => Math.log( 2.5066282746310005 * ser )
ODL_422:329:double_pooledMean(double,double):i < data1.length => i
ODL_423:329:double_pooledMean(double,double):i < data1.length => data1.length
ODL_424:329:double_pooledMean(double,double):i++ => i
ODL_425:330:double_pooledMean(double,double):sum1 += data1[i] => sum1 = data1[i]
ODL_426:332:double_pooledMean(double,double):sum1 / data1.length => sum1
ODL_427:332:double_pooledMean(double,double):sum1 / data1.length => data1.length
ODL_428:334:double_pooledMean(double,double):i < data2.length => i
ODL_429:334:double_pooledMean(double,double):i < data2.length => data2.length
ODL_430:334:double_pooledMean(double,double):i++ => i
ODL_431:335:double_pooledMean(double,double):sum2 += data2[i] => sum2 = data2[i]
ODL_432:337:double_pooledMean(double,double):sum2 / data2.length => sum2
ODL_433:337:double_pooledMean(double,double):sum2 / data2.length => data2.length
ODL_434:338:double_pooledMean(double,double):data1.length * mean1 => data1.length
ODL_435:338:double_pooledMean(double,double):data1.length * mean1 => mean1
ODL_436:338:double_pooledMean(double,double):data2.length * mean2 => data2.length
ODL_437:338:double_pooledMean(double,double):data2.length * mean2 => mean2
ODL_438:338:double_pooledMean(double,double):data1.length * mean1 + data2.length * mean2 => data1.length * mean1
ODL_439:338:double_pooledMean(double,double):data1.length * mean1 + data2.length * mean2 => data2.length * mean2
ODL_440:338:double_pooledMean(double,double):data1.length + data2.length => data1.length
ODL_441:338:double_pooledMean(double,double):data1.length + data2.length => data2.length
ODL_442:338:double_pooledMean(double,double):(data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length) => data1.length * mean1 + data2.length * mean2
ODL_443:338:double_pooledMean(double,double):(data1.length * mean1 + data2.length * mean2) / (data1.length + data2.length) => data1.length + data2.length
ODL_444:345:double_pooledVariance(double,double):i < data1.length => i
ODL_445:345:double_pooledVariance(double,double):i < data1.length => data1.length
ODL_446:345:double_pooledVariance(double,double):i++ => i
ODL_447:346:double_pooledVariance(double,double):sum1 += data1[i] => sum1 = data1[i]
ODL_448:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i]
ODL_449:347:double_pooledVariance(double,double):data1[i] * data1[i] => data1[i]
ODL_450:347:double_pooledVariance(double,double):sumSq1 += data1[i] * data1[i] => sumSq1 = data1[i] * data1[i]
ODL_451:349:double_pooledVariance(double,double):sum1 / data1.length => sum1
ODL_452:349:double_pooledVariance(double,double):sum1 / data1.length => data1.length
ODL_453:350:double_pooledVariance(double,double):mean1 * sum1 => mean1
ODL_454:350:double_pooledVariance(double,double):mean1 * sum1 => sum1
ODL_455:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => sumSq1
ODL_456:350:double_pooledVariance(double,double):sumSq1 - mean1 * sum1 => mean1 * sum1
ODL_457:350:double_pooledVariance(double,double):(sumSq1 - mean1 * sum1) / data1.length => sumSq1 - mean1 * sum1
ODL_458:350:double_pooledVariance(double,double):(sumSq1 - mean1 * sum1) / data1.length => data1.length
ODL_459:353:double_pooledVariance(double,double):i < data2.length => i
ODL_460:353:double_pooledVariance(double,double):i < data2.length => data2.length
ODL_461:353:double_pooledVariance(double,double):i++ => i
ODL_462:354:double_pooledVariance(double,double):sum2 += data2[i] => sum2 = data2[i]
ODL_463:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i]
ODL_464:355:double_pooledVariance(double,double):data2[i] * data2[i] => data2[i]
ODL_465:355:double_pooledVariance(double,double):sumSq2 += data2[i] * data2[i] => sumSq2 = data2[i] * data2[i]
ODL_466:357:double_pooledVariance(double,double):sum2 / data2.length => sum2
ODL_467:357:double_pooledVariance(double,double):sum2 / data2.length => data2.length
ODL_468:358:double_pooledVariance(double,double):mean2 * sum2 => mean2
ODL_469:358:double_pooledVariance(double,double):mean2 * sum2 => sum2
ODL_470:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => sumSq2
ODL_471:358:double_pooledVariance(double,double):sumSq2 - mean2 * sum2 => mean2 * sum2
ODL_472:358:double_pooledVariance(double,double):(sumSq2 - mean2 * sum2) / data2.length => sumSq2 - mean2 * sum2
ODL_473:358:double_pooledVariance(double,double):(sumSq2 - mean2 * sum2) / data2.length => data2.length
ODL_474:359:double_pooledVariance(double,double):data1.length * var1 => data1.length
ODL_475:359:double_pooledVariance(double,double):data1.length * var1 => var1
ODL_476:359:double_pooledVariance(double,double):data2.length * var2 => data2.length
ODL_477:359:double_pooledVariance(double,double):data2.length * var2 => var2
ODL_478:359:double_pooledVariance(double,double):data1.length * var1 + data2.length * var2 => data1.length * var1
ODL_479:359:double_pooledVariance(double,double):data1.length * var1 + data2.length * var2 => data2.length * var2
ODL_480:359:double_pooledVariance(double,double):data1.length + data2.length => data1.length
ODL_481:359:double_pooledVariance(double,double):data1.length + data2.length => data2.length
ODL_482:359:double_pooledVariance(double,double):(data1.length * var1 + data2.length * var2) / (data1.length + data2.length) => data1.length * var1 + data2.length * var2
ODL_483:359:double_pooledVariance(double,double):(data1.length * var1 + data2.length * var2) / (data1.length + data2.length) => data1.length + data2.length
ODL_484:367:double_polevl(double,double,int):i <= N => i
ODL_485:367:double_polevl(double,double,int):i <= N => N
ODL_486:367:double_polevl(double,double,int):i++ => i
ODL_487:368:double_polevl(double,double,int):ans * x => ans
ODL_488:368:double_polevl(double,double,int):ans * x => x
ODL_489:368:double_polevl(double,double,int):ans * x + coef[i] => ans * x
ODL_490:368:double_polevl(double,double,int):ans * x + coef[i] => coef[i]
ODL_491:375:double_rankInterpolated(double,double,int):index >= 0 => index
ODL_492:375:double_rankInterpolated(double,double,int):index >= 0 => 0
ODL_493:376:double_rankInterpolated(double,double,int):index + 1 => index
ODL_494:376:double_rankInterpolated(double,double,int):index + 1 => 1
ODL_495:378:double_rankInterpolated(double,double,int):to < s => to
ODL_496:378:double_rankInterpolated(double,double,int):to < s => s
ODL_497:378:double_rankInterpolated(double,double,int):sortedList[to] == element => sortedList[to]
ODL_498:378:double_rankInterpolated(double,double,int):sortedList[to] == element => element
ODL_499:378:double_rankInterpolated(double,double,int):to < s && sortedList[to] == element => to < s
ODL_500:378:double_rankInterpolated(double,double,int):to < s && sortedList[to] == element => sortedList[to] == element
ODL_501:379:double_rankInterpolated(double,double,int):to++ => to
ODL_502:383:double_rankInterpolated(double,double,int):-index => index
ODL_503:383:double_rankInterpolated(double,double,int):-index - 1 => -index
ODL_504:383:double_rankInterpolated(double,double,int):-index - 1 => 1
ODL_505:384:double_rankInterpolated(double,double,int):insertionPoint == 0 => insertionPoint
ODL_506:384:double_rankInterpolated(double,double,int):insertionPoint == 0 => 0
ODL_507:384:double_rankInterpolated(double,double,int):insertionPoint == sortedList.length => insertionPoint
ODL_508:384:double_rankInterpolated(double,double,int):insertionPoint == sortedList.length => sortedList.length
ODL_509:384:double_rankInterpolated(double,double,int):insertionPoint == 0 || insertionPoint == sortedList.length => insertionPoint == 0
ODL_510:384:double_rankInterpolated(double,double,int):insertionPoint == 0 || insertionPoint == sortedList.length => insertionPoint == sortedList.length
ODL_511:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => insertionPoint
ODL_512:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => 1
ODL_513:389:double_rankInterpolated(double,double,int):element - from => element
ODL_514:389:double_rankInterpolated(double,double,int):element - from => from
ODL_515:389:double_rankInterpolated(double,double,int):to - from => to
ODL_516:389:double_rankInterpolated(double,double,int):to - from => from
ODL_517:389:double_rankInterpolated(double,double,int):(element - from) / (to - from) => element - from
ODL_518:389:double_rankInterpolated(double,double,int):(element - from) / (to - from) => to - from
ODL_519:390:double_rankInterpolated(double,double,int):insertionPoint + delta => insertionPoint
ODL_520:390:double_rankInterpolated(double,double,int):insertionPoint + delta => delta
ODL_521:398:double_sampleWeightedVariance(double,double):i < data.length => i
ODL_522:398:double_sampleWeightedVariance(double,double):i < data.length => data.length
ODL_523:398:double_sampleWeightedVariance(double,double):i++ => i
ODL_524:399:double_sampleWeightedVariance(double,double):sumOfWeights += weights[i] => sumOfWeights = weights[i]
ODL_525:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => data[i]
ODL_526:400:double_sampleWeightedVariance(double,double):data[i] * weights[i] => weights[i]
ODL_527:400:double_sampleWeightedVariance(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts = data[i] * weights[i]
ODL_528:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i]
ODL_529:401:double_sampleWeightedVariance(double,double):data[i] * data[i] => data[i]
ODL_530:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => data[i] * data[i]
ODL_531:401:double_sampleWeightedVariance(double,double):data[i] * data[i] * weights[i] => weights[i]
ODL_532:401:double_sampleWeightedVariance(double,double):sumOfSquaredProducts += data[i] * data[i] * weights[i] => sumOfSquaredProducts = data[i] * data[i] * weights[i]
ODL_533:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts
ODL_534:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts => sumOfProducts
ODL_535:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts
ODL_536:403:double_sampleWeightedVariance(double,double):sumOfProducts * sumOfProducts / sumOfWeights => sumOfWeights
ODL_537:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfSquaredProducts
ODL_538:403:double_sampleWeightedVariance(double,double):sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights => sumOfProducts * sumOfProducts / sumOfWeights
ODL_539:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => sumOfWeights
ODL_540:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => 1
ODL_541:403:double_sampleWeightedVariance(double,double):(sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1) => sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights
ODL_542:403:double_sampleWeightedVariance(double,double):(sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1) => sumOfWeights - 1
ODL_543:411:double_skew(double):i < data.length => i
ODL_544:411:double_skew(double):i < data.length => data.length
ODL_545:411:double_skew(double):i++ => i
ODL_546:412:double_skew(double):sum += data[i] => sum = data[i]
ODL_547:413:double_skew(double):data[i] * data[i] => data[i]
ODL_548:413:double_skew(double):data[i] * data[i] => data[i]
ODL_549:413:double_skew(double):sumSq += data[i] * data[i] => sumSq = data[i] * data[i]
ODL_550:415:double_skew(double):sum / data.length => sum
ODL_551:415:double_skew(double):sum / data.length => data.length
ODL_552:416:double_skew(double):mean * sum => mean
ODL_553:416:double_skew(double):mean * sum => sum
ODL_554:416:double_skew(double):sumSq - mean * sum => sumSq
ODL_555:416:double_skew(double):sumSq - mean * sum => mean * sum
ODL_556:416:double_skew(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum
ODL_557:416:double_skew(double):(sumSq - mean * sum) / data.length => data.length
ODL_558:417:double_skew(double):i < data.length => i
ODL_559:417:double_skew(double):i < data.length => data.length
ODL_560:417:double_skew(double):i++ => i
ODL_561:418:double_skew(double):data[i] - mean => data[i]
ODL_562:418:double_skew(double):data[i] - mean => mean
ODL_563:418:double_skew(double):sumPD += Math.pow( data[i] - mean, 3 ) => sumPD = Math.pow( data[i] - mean, 3 )
ODL_564:420:double_skew(double):sumPD / data.length => sumPD
ODL_565:420:double_skew(double):sumPD / data.length => data.length
ODL_566:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation
ODL_567:421:double_skew(double):standardDeviation * standardDeviation => standardDeviation
ODL_568:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation * standardDeviation
ODL_569:421:double_skew(double):standardDeviation * standardDeviation * standardDeviation => standardDeviation
ODL_570:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => moment3
ODL_571:421:double_skew(double):moment3 / (standardDeviation * standardDeviation * standardDeviation) => standardDeviation * standardDeviation * standardDeviation
ODL_572:428:double_standardize(double):i < data.length => i
ODL_573:428:double_standardize(double):i < data.length => data.length
ODL_574:428:double_standardize(double):i++ => i
ODL_575:429:double_standardize(double):sum += data[i] => sum = data[i]
ODL_576:430:double_standardize(double):data[i] * data[i] => data[i]
ODL_577:430:double_standardize(double):data[i] * data[i] => data[i]
ODL_578:430:double_standardize(double):sumSq += data[i] * data[i] => sumSq = data[i] * data[i]
ODL_579:432:double_standardize(double):sum / data.length => sum
ODL_580:432:double_standardize(double):sum / data.length => data.length
ODL_581:433:double_standardize(double):mean * sum => mean
ODL_582:433:double_standardize(double):mean * sum => sum
ODL_583:433:double_standardize(double):sumSq - mean * sum => sumSq
ODL_584:433:double_standardize(double):sumSq - mean * sum => mean * sum
ODL_585:433:double_standardize(double):(sumSq - mean * sum) / data.length => sumSq - mean * sum
ODL_586:433:double_standardize(double):(sumSq - mean * sum) / data.length => data.length
ODL_587:434:double_standardize(double):i < data.length => i
ODL_588:434:double_standardize(double):i < data.length => data.length
ODL_589:434:double_standardize(double):i++ => i
ODL_590:435:double_standardize(double):data[i] - mean => data[i]
ODL_591:435:double_standardize(double):data[i] - mean => mean
ODL_592:435:double_standardize(double):(data[i] - mean) / sd => data[i] - mean
ODL_593:435:double_standardize(double):(data[i] - mean) / sd => sd
ODL_594:444:double_weightedRMS(double,double):i < data.length => i
ODL_595:444:double_weightedRMS(double,double):i < data.length => data.length
ODL_596:444:double_weightedRMS(double,double):i++ => i
ODL_597:445:double_weightedRMS(double,double):data[i] * weights[i] => data[i]
ODL_598:445:double_weightedRMS(double,double):data[i] * weights[i] => weights[i]
ODL_599:445:double_weightedRMS(double,double):sumOfProducts += data[i] * weights[i] => sumOfProducts = data[i] * weights[i]
ODL_600:446:double_weightedRMS(double,double):data[i] * data[i] => data[i]
ODL_601:446:double_weightedRMS(double,double):data[i] * data[i] => data[i]
ODL_602:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => data[i] * data[i]
ODL_603:446:double_weightedRMS(double,double):data[i] * data[i] * weights[i] => weights[i]
ODL_604:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfProducts
ODL_605:448:double_weightedRMS(double,double):sumOfProducts / sumOfSquaredProducts => sumOfSquaredProducts
ODL_606:454:double_harmonicMean(double):i < data.length => i
ODL_607:454:double_harmonicMean(double):i < data.length => data.length
ODL_608:454:double_harmonicMean(double):i++ => i
ODL_609:455:double_harmonicMean(double):1 / data[i] => 1
ODL_610:455:double_harmonicMean(double):1 / data[i] => data[i]
ODL_611:455:double_harmonicMean(double):sumOfInversions += 1 / data[i] => sumOfInversions = 1 / data[i]
ODL_612:457:double_harmonicMean(double):data.length / sumOfInversions => data.length
ODL_613:457:double_harmonicMean(double):data.length / sumOfInversions => sumOfInversions
ODL_614:463:double_sumOfPowerOfDeviations(double,int,double):i < data.length => i
ODL_615:463:double_sumOfPowerOfDeviations(double,int,double):i < data.length => data.length
ODL_616:463:double_sumOfPowerOfDeviations(double,int,double):i++ => i
ODL_617:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => data[i]
ODL_618:464:double_sumOfPowerOfDeviations(double,int,double):data[i] - c => c
ODL_619:464:double_sumOfPowerOfDeviations(double,int,double):sum += Math.pow( data[i] - c, k ) => sum = Math.pow( data[i] - c, k )
ODL_620:471:double_power(double,int):i < data.length => i
ODL_621:471:double_power(double,int):i < data.length => data.length
ODL_622:471:double_power(double,int):i++ => i
ODL_623:479:double_square(double):i < data.length => i
ODL_624:479:double_square(double):i < data.length => data.length
ODL_625:479:double_square(double):i++ => i
ODL_626:480:double_square(double):data[i] * data[i] => data[i]
ODL_627:480:double_square(double):data[i] * data[i] => data[i]
CDL_1:31:int_binarySearchFromTo(double,double,int,int):(low + high) / 2 => low + high
CDL_2:34:int_binarySearchFromTo(double,double,int,int):mid + 1 => mid
CDL_3:37:int_binarySearchFromTo(double,double,int,int):mid - 1 => mid
CDL_4:43:int_binarySearchFromTo(double,double,int,int):low + 1 => low
CDL_5:56:double_covariance(double,double):i + 1 => i
CDL_6:59:double_covariance(double,double):size - 1 => size
CDL_7:67:double_durbinWatson(double):i - 1 => i
CDL_8:80:double_lag1(double,double):i - 1 => i
CDL_9:82:double_lag1(double,double):i + 1 => i
CDL_10:83:double_lag1(double,double):i + 1 => i
CDL_11:92:double_max(double):size - 1 => size
CDL_12:93:double_max(double):--i >= 0 => --i
CDL_13:105:double_meanDeviation(double,double):--i >= 0 => --i
CDL_14:114:double_min(double):size - 1 => size
CDL_15:115:double_min(double):--i >= 0 => --i
CDL_16:127:double_product(double):--i >= 0 => --i
CDL_17:136:double_quantile(double,double):n - 1 => n
CDL_18:140:double_quantile(double,double):n == 0 => n
CDL_19:143:double_quantile(double,double):n - 1 => n
CDL_20:146:double_quantile(double,double):1 - delta => delta
CDL_21:146:double_quantile(double,double):lhs + 1 => lhs
CDL_22:156:double_sampleKurtosis(int,double,double):n + 1 => n
CDL_23:156:double_sampleKurtosis(int,double,double):n - 1 => n
CDL_24:156:double_sampleKurtosis(int,double,double):n - 2 => n
CDL_25:156:double_sampleKurtosis(int,double,double):n - 3 => n
CDL_26:156:double_sampleKurtosis(int,double,double):n - 1 => n
CDL_27:156:double_sampleKurtosis(int,double,double):3.0 * (n - 1) => n - 1
CDL_28:156:double_sampleKurtosis(int,double,double):n - 1 => n
CDL_29:156:double_sampleKurtosis(int,double,double):n - 2 => n
CDL_30:156:double_sampleKurtosis(int,double,double):n - 3 => n
CDL_31:162:double_sampleKurtosisStandardError(int):24.0 * n => n
CDL_32:162:double_sampleKurtosisStandardError(int):n - 1 => n
CDL_33:162:double_sampleKurtosisStandardError(int):n - 1 => n
CDL_34:162:double_sampleKurtosisStandardError(int):n - 3 => n
CDL_35:162:double_sampleKurtosisStandardError(int):n - 2 => n
CDL_36:162:double_sampleKurtosisStandardError(int):n + 3 => n
CDL_37:162:double_sampleKurtosisStandardError(int):n + 5 => n
CDL_38:170:double_sampleSkew(int,double,double):n - 1 => n
CDL_39:170:double_sampleSkew(int,double,double):n - 2 => n
CDL_40:177:double_sampleVariance(double,double):--i >= 0 => --i
CDL_41:181:double_sampleVariance(double,double):size - 1 => size
CDL_42:201:double_trimmedMean(double,double,int,int):N0 - 1 => N0
CDL_43:211:double_weightedMean(double,double):--i >= 0 => --i
CDL_44:223:int_binarySearchFromTo(int,int,int,int):(from + to) / 2 => from + to
CDL_45:226:int_binarySearchFromTo(int,int,int,int):mid + 1 => mid
CDL_46:229:int_binarySearchFromTo(int,int,int,int):mid - 1 => mid
CDL_47:235:int_binarySearchFromTo(int,int,int,int):from + 1 => from
CDL_48:240:double_binomial(double,long):k < 0 => k
CDL_49:243:double_binomial(double,long):k == 0 => k
CDL_50:246:double_binomial(double,long):k == 1 => k
CDL_51:249:double_binomial(double,long):n - k + 1 => n - k
CDL_52:252:double_binomial(double,long):i-- > 0 => i--
CDL_53:260:double_link(double):r < 0.0 => r
CDL_54:262:double_link(double):1.0 + s => s
CDL_55:265:double_link(double):1.0 + s => s
CDL_56:265:double_link(double):1.0 / (1.0 + s) => 1.0 + s
CDL_57:281:double_winsorizedMean(double,int,int):N - 1 => N
CDL_58:283:double_winsorizedMean(double,int,int):N - 1 => N
CDL_59:290:double_geometricPdf(int,double):1 - p => p
CDL_60:308:double_kurtosis(double):-3 =>  
CDL_61:313:double_logGamma(double):-86.50532032941677 =>  
CDL_62:313:double_logGamma(double):-1.231739572450155 =>  
CDL_63:313:double_logGamma(double):-0.5395239384953e-5 =>  
CDL_64:314:double_logGamma(double):xx - 1.0 => xx
CDL_65:315:double_logGamma(double):x + 5.5 => x
CDL_66:316:double_logGamma(double):x + 0.5 => x
CDL_67:319:double_logGamma(double):j <= 5 => j
CDL_68:323:double_logGamma(double):2.5066282746310005 * ser => ser
CDL_69:375:double_rankInterpolated(double,double,int):index >= 0 => index
CDL_70:376:double_rankInterpolated(double,double,int):index + 1 => index
CDL_71:383:double_rankInterpolated(double,double,int):-index - 1 => -index
CDL_72:384:double_rankInterpolated(double,double,int):insertionPoint == 0 => insertionPoint
CDL_73:387:double_rankInterpolated(double,double,int):insertionPoint - 1 => insertionPoint
CDL_74:403:double_sampleWeightedVariance(double,double):sumOfWeights - 1 => sumOfWeights
CDL_75:455:double_harmonicMean(double):1 / data[i] => data[i]
